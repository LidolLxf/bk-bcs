// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/bcs-push-manager.proto

package pushmanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Dimension with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Dimension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dimension with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DimensionMultiError, or nil
// if none found.
func (m *Dimension) ValidateAll() error {
	return m.validate(true)
}

func (m *Dimension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fields

	if len(errors) > 0 {
		return DimensionMultiError(errors)
	}

	return nil
}

// DimensionMultiError is an error wrapping multiple validation errors returned
// by Dimension.ValidateAll() if the designated constraints aren't met.
type DimensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DimensionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DimensionMultiError) AllErrors() []error { return m }

// DimensionValidationError is the validation error returned by
// Dimension.Validate if the designated constraints aren't met.
type DimensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DimensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DimensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DimensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DimensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DimensionValidationError) ErrorName() string { return "DimensionValidationError" }

// Error satisfies the builtin error interface
func (e DimensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDimension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DimensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DimensionValidationError{}

// Validate checks the field values on EventDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventDetailMultiError, or
// nil if none found.
func (m *EventDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *EventDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fields

	if len(errors) > 0 {
		return EventDetailMultiError(errors)
	}

	return nil
}

// EventDetailMultiError is an error wrapping multiple validation errors
// returned by EventDetail.ValidateAll() if the designated constraints aren't met.
type EventDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventDetailMultiError) AllErrors() []error { return m }

// EventDetailValidationError is the validation error returned by
// EventDetail.Validate if the designated constraints aren't met.
type EventDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventDetailValidationError) ErrorName() string { return "EventDetailValidationError" }

// Error satisfies the builtin error interface
func (e EventDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventDetailValidationError{}

// Validate checks the field values on NotificationResults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationResults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationResults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationResultsMultiError, or nil if none found.
func (m *NotificationResults) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationResults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fields

	if len(errors) > 0 {
		return NotificationResultsMultiError(errors)
	}

	return nil
}

// NotificationResultsMultiError is an error wrapping multiple validation
// errors returned by NotificationResults.ValidateAll() if the designated
// constraints aren't met.
type NotificationResultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationResultsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationResultsMultiError) AllErrors() []error { return m }

// NotificationResultsValidationError is the validation error returned by
// NotificationResults.Validate if the designated constraints aren't met.
type NotificationResultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationResultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationResultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationResultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationResultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationResultsValidationError) ErrorName() string {
	return "NotificationResultsValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationResultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationResults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationResultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationResultsValidationError{}

// Validate checks the field values on MetricData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricDataMultiError, or
// nil if none found.
func (m *MetricData) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricValue

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricDataValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricDataValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricDataValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricDataMultiError(errors)
	}

	return nil
}

// MetricDataMultiError is an error wrapping multiple validation errors
// returned by MetricData.ValidateAll() if the designated constraints aren't met.
type MetricDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricDataMultiError) AllErrors() []error { return m }

// MetricDataValidationError is the validation error returned by
// MetricData.Validate if the designated constraints aren't met.
type MetricDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricDataValidationError) ErrorName() string { return "MetricDataValidationError" }

// Error satisfies the builtin error interface
func (e MetricDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricDataValidationError{}

// Validate checks the field values on PushEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushEventMultiError, or nil
// if none found.
func (m *PushEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *PushEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for Domain

	// no validation rules for RuleId

	if all {
		switch v := interface{}(m.GetEventDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "EventDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "EventDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushEventValidationError{
				field:  "EventDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PushLevel

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetNotificationResults()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "NotificationResults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "NotificationResults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotificationResults()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushEventValidationError{
				field:  "NotificationResults",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDimension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "Dimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "Dimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDimension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushEventValidationError{
				field:  "Dimension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BkBizName

	if all {
		switch v := interface{}(m.GetMetricData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "MetricData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "MetricData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetricData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushEventValidationError{
				field:  "MetricData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushEventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushEventValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushEventValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushEventMultiError(errors)
	}

	return nil
}

// PushEventMultiError is an error wrapping multiple validation errors returned
// by PushEvent.ValidateAll() if the designated constraints aren't met.
type PushEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushEventMultiError) AllErrors() []error { return m }

// PushEventValidationError is the validation error returned by
// PushEvent.Validate if the designated constraints aren't met.
type PushEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushEventValidationError) ErrorName() string { return "PushEventValidationError" }

// Error satisfies the builtin error interface
func (e PushEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushEventValidationError{}

// Validate checks the field values on CreatePushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushEventRequestMultiError, or nil if none found.
func (m *CreatePushEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePushEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePushEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePushEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePushEventRequestMultiError(errors)
	}

	return nil
}

// CreatePushEventRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePushEventRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePushEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushEventRequestMultiError) AllErrors() []error { return m }

// CreatePushEventRequestValidationError is the validation error returned by
// CreatePushEventRequest.Validate if the designated constraints aren't met.
type CreatePushEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushEventRequestValidationError) ErrorName() string {
	return "CreatePushEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushEventRequestValidationError{}

// Validate checks the field values on CreatePushEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushEventResponseMultiError, or nil if none found.
func (m *CreatePushEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for EventId

	if len(errors) > 0 {
		return CreatePushEventResponseMultiError(errors)
	}

	return nil
}

// CreatePushEventResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePushEventResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePushEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushEventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushEventResponseMultiError) AllErrors() []error { return m }

// CreatePushEventResponseValidationError is the validation error returned by
// CreatePushEventResponse.Validate if the designated constraints aren't met.
type CreatePushEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushEventResponseValidationError) ErrorName() string {
	return "CreatePushEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushEventResponseValidationError{}

// Validate checks the field values on DeletePushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushEventRequestMultiError, or nil if none found.
func (m *DeletePushEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for EventId

	if len(errors) > 0 {
		return DeletePushEventRequestMultiError(errors)
	}

	return nil
}

// DeletePushEventRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePushEventRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePushEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushEventRequestMultiError) AllErrors() []error { return m }

// DeletePushEventRequestValidationError is the validation error returned by
// DeletePushEventRequest.Validate if the designated constraints aren't met.
type DeletePushEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushEventRequestValidationError) ErrorName() string {
	return "DeletePushEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushEventRequestValidationError{}

// Validate checks the field values on DeletePushEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushEventResponseMultiError, or nil if none found.
func (m *DeletePushEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeletePushEventResponseMultiError(errors)
	}

	return nil
}

// DeletePushEventResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePushEventResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePushEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushEventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushEventResponseMultiError) AllErrors() []error { return m }

// DeletePushEventResponseValidationError is the validation error returned by
// DeletePushEventResponse.Validate if the designated constraints aren't met.
type DeletePushEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushEventResponseValidationError) ErrorName() string {
	return "DeletePushEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushEventResponseValidationError{}

// Validate checks the field values on GetPushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushEventRequestMultiError, or nil if none found.
func (m *GetPushEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for EventId

	if len(errors) > 0 {
		return GetPushEventRequestMultiError(errors)
	}

	return nil
}

// GetPushEventRequestMultiError is an error wrapping multiple validation
// errors returned by GetPushEventRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPushEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushEventRequestMultiError) AllErrors() []error { return m }

// GetPushEventRequestValidationError is the validation error returned by
// GetPushEventRequest.Validate if the designated constraints aren't met.
type GetPushEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushEventRequestValidationError) ErrorName() string {
	return "GetPushEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushEventRequestValidationError{}

// Validate checks the field values on GetPushEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushEventResponseMultiError, or nil if none found.
func (m *GetPushEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPushEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPushEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPushEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPushEventResponseMultiError(errors)
	}

	return nil
}

// GetPushEventResponseMultiError is an error wrapping multiple validation
// errors returned by GetPushEventResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPushEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushEventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushEventResponseMultiError) AllErrors() []error { return m }

// GetPushEventResponseValidationError is the validation error returned by
// GetPushEventResponse.Validate if the designated constraints aren't met.
type GetPushEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushEventResponseValidationError) ErrorName() string {
	return "GetPushEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushEventResponseValidationError{}

// Validate checks the field values on ListPushEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPushEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPushEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPushEventsRequestMultiError, or nil if none found.
func (m *ListPushEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPushEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for RuleId

	// no validation rules for Status

	// no validation rules for PushLevel

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPushEventsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPushEventsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPushEventsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPushEventsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPushEventsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPushEventsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPushEventsRequestMultiError(errors)
	}

	return nil
}

// ListPushEventsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPushEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPushEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPushEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPushEventsRequestMultiError) AllErrors() []error { return m }

// ListPushEventsRequestValidationError is the validation error returned by
// ListPushEventsRequest.Validate if the designated constraints aren't met.
type ListPushEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPushEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPushEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPushEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPushEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPushEventsRequestValidationError) ErrorName() string {
	return "ListPushEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPushEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPushEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPushEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPushEventsRequestValidationError{}

// Validate checks the field values on ListPushEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPushEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPushEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPushEventsResponseMultiError, or nil if none found.
func (m *ListPushEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPushEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPushEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPushEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPushEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPushEventsResponseMultiError(errors)
	}

	return nil
}

// ListPushEventsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPushEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPushEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPushEventsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPushEventsResponseMultiError) AllErrors() []error { return m }

// ListPushEventsResponseValidationError is the validation error returned by
// ListPushEventsResponse.Validate if the designated constraints aren't met.
type ListPushEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPushEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPushEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPushEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPushEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPushEventsResponseValidationError) ErrorName() string {
	return "ListPushEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPushEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPushEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPushEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPushEventsResponseValidationError{}

// Validate checks the field values on UpdatePushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushEventRequestMultiError, or nil if none found.
func (m *UpdatePushEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for EventId

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePushEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePushEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePushEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePushEventRequestMultiError(errors)
	}

	return nil
}

// UpdatePushEventRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePushEventRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePushEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushEventRequestMultiError) AllErrors() []error { return m }

// UpdatePushEventRequestValidationError is the validation error returned by
// UpdatePushEventRequest.Validate if the designated constraints aren't met.
type UpdatePushEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushEventRequestValidationError) ErrorName() string {
	return "UpdatePushEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushEventRequestValidationError{}

// Validate checks the field values on UpdatePushEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushEventResponseMultiError, or nil if none found.
func (m *UpdatePushEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdatePushEventResponseMultiError(errors)
	}

	return nil
}

// UpdatePushEventResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePushEventResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePushEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushEventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushEventResponseMultiError) AllErrors() []error { return m }

// UpdatePushEventResponseValidationError is the validation error returned by
// UpdatePushEventResponse.Validate if the designated constraints aren't met.
type UpdatePushEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushEventResponseValidationError) ErrorName() string {
	return "UpdatePushEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushEventResponseValidationError{}

// Validate checks the field values on PushWhitelist with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushWhitelist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushWhitelist with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushWhitelistMultiError, or
// nil if none found.
func (m *PushWhitelist) ValidateAll() error {
	return m.validate(true)
}

func (m *PushWhitelist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WhitelistId

	// no validation rules for Domain

	if all {
		switch v := interface{}(m.GetDimension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "Dimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "Dimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDimension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushWhitelistValidationError{
				field:  "Dimension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	// no validation rules for Applicant

	// no validation rules for Approver

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushWhitelistValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushWhitelistValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushWhitelistValidationError{
				field:  "ApprovedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushWhitelistValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushWhitelistValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushWhitelistValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.WhitelistStatus != nil {
		// no validation rules for WhitelistStatus
	}

	if m.ApprovalStatus != nil {
		// no validation rules for ApprovalStatus
	}

	if len(errors) > 0 {
		return PushWhitelistMultiError(errors)
	}

	return nil
}

// PushWhitelistMultiError is an error wrapping multiple validation errors
// returned by PushWhitelist.ValidateAll() if the designated constraints
// aren't met.
type PushWhitelistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushWhitelistMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushWhitelistMultiError) AllErrors() []error { return m }

// PushWhitelistValidationError is the validation error returned by
// PushWhitelist.Validate if the designated constraints aren't met.
type PushWhitelistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushWhitelistValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushWhitelistValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushWhitelistValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushWhitelistValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushWhitelistValidationError) ErrorName() string { return "PushWhitelistValidationError" }

// Error satisfies the builtin error interface
func (e PushWhitelistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushWhitelist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushWhitelistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushWhitelistValidationError{}

// Validate checks the field values on CreatePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushWhitelistRequestMultiError, or nil if none found.
func (m *CreatePushWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if all {
		switch v := interface{}(m.GetWhitelist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePushWhitelistRequestValidationError{
					field:  "Whitelist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePushWhitelistRequestValidationError{
					field:  "Whitelist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWhitelist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePushWhitelistRequestValidationError{
				field:  "Whitelist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePushWhitelistRequestMultiError(errors)
	}

	return nil
}

// CreatePushWhitelistRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePushWhitelistRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePushWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushWhitelistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushWhitelistRequestMultiError) AllErrors() []error { return m }

// CreatePushWhitelistRequestValidationError is the validation error returned
// by CreatePushWhitelistRequest.Validate if the designated constraints aren't met.
type CreatePushWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushWhitelistRequestValidationError) ErrorName() string {
	return "CreatePushWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushWhitelistRequestValidationError{}

// Validate checks the field values on CreatePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushWhitelistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushWhitelistResponseMultiError, or nil if none found.
func (m *CreatePushWhitelistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushWhitelistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreatePushWhitelistResponseMultiError(errors)
	}

	return nil
}

// CreatePushWhitelistResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePushWhitelistResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePushWhitelistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushWhitelistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushWhitelistResponseMultiError) AllErrors() []error { return m }

// CreatePushWhitelistResponseValidationError is the validation error returned
// by CreatePushWhitelistResponse.Validate if the designated constraints
// aren't met.
type CreatePushWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushWhitelistResponseValidationError) ErrorName() string {
	return "CreatePushWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushWhitelistResponseValidationError{}

// Validate checks the field values on GetPushWhitelistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushWhitelistRequestMultiError, or nil if none found.
func (m *GetPushWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for WhitelistId

	if len(errors) > 0 {
		return GetPushWhitelistRequestMultiError(errors)
	}

	return nil
}

// GetPushWhitelistRequestMultiError is an error wrapping multiple validation
// errors returned by GetPushWhitelistRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPushWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushWhitelistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushWhitelistRequestMultiError) AllErrors() []error { return m }

// GetPushWhitelistRequestValidationError is the validation error returned by
// GetPushWhitelistRequest.Validate if the designated constraints aren't met.
type GetPushWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushWhitelistRequestValidationError) ErrorName() string {
	return "GetPushWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushWhitelistRequestValidationError{}

// Validate checks the field values on GetPushWhitelistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushWhitelistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushWhitelistResponseMultiError, or nil if none found.
func (m *GetPushWhitelistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushWhitelistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetWhitelist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPushWhitelistResponseValidationError{
					field:  "Whitelist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPushWhitelistResponseValidationError{
					field:  "Whitelist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWhitelist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPushWhitelistResponseValidationError{
				field:  "Whitelist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPushWhitelistResponseMultiError(errors)
	}

	return nil
}

// GetPushWhitelistResponseMultiError is an error wrapping multiple validation
// errors returned by GetPushWhitelistResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPushWhitelistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushWhitelistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushWhitelistResponseMultiError) AllErrors() []error { return m }

// GetPushWhitelistResponseValidationError is the validation error returned by
// GetPushWhitelistResponse.Validate if the designated constraints aren't met.
type GetPushWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushWhitelistResponseValidationError) ErrorName() string {
	return "GetPushWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushWhitelistResponseValidationError{}

// Validate checks the field values on UpdatePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushWhitelistRequestMultiError, or nil if none found.
func (m *UpdatePushWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for WhitelistId

	if all {
		switch v := interface{}(m.GetWhitelist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePushWhitelistRequestValidationError{
					field:  "Whitelist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePushWhitelistRequestValidationError{
					field:  "Whitelist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWhitelist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePushWhitelistRequestValidationError{
				field:  "Whitelist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePushWhitelistRequestMultiError(errors)
	}

	return nil
}

// UpdatePushWhitelistRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePushWhitelistRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePushWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushWhitelistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushWhitelistRequestMultiError) AllErrors() []error { return m }

// UpdatePushWhitelistRequestValidationError is the validation error returned
// by UpdatePushWhitelistRequest.Validate if the designated constraints aren't met.
type UpdatePushWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushWhitelistRequestValidationError) ErrorName() string {
	return "UpdatePushWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushWhitelistRequestValidationError{}

// Validate checks the field values on UpdatePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushWhitelistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushWhitelistResponseMultiError, or nil if none found.
func (m *UpdatePushWhitelistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushWhitelistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdatePushWhitelistResponseMultiError(errors)
	}

	return nil
}

// UpdatePushWhitelistResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePushWhitelistResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePushWhitelistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushWhitelistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushWhitelistResponseMultiError) AllErrors() []error { return m }

// UpdatePushWhitelistResponseValidationError is the validation error returned
// by UpdatePushWhitelistResponse.Validate if the designated constraints
// aren't met.
type UpdatePushWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushWhitelistResponseValidationError) ErrorName() string {
	return "UpdatePushWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushWhitelistResponseValidationError{}

// Validate checks the field values on DeletePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushWhitelistRequestMultiError, or nil if none found.
func (m *DeletePushWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for WhitelistId

	if len(errors) > 0 {
		return DeletePushWhitelistRequestMultiError(errors)
	}

	return nil
}

// DeletePushWhitelistRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePushWhitelistRequest.ValidateAll() if
// the designated constraints aren't met.
type DeletePushWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushWhitelistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushWhitelistRequestMultiError) AllErrors() []error { return m }

// DeletePushWhitelistRequestValidationError is the validation error returned
// by DeletePushWhitelistRequest.Validate if the designated constraints aren't met.
type DeletePushWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushWhitelistRequestValidationError) ErrorName() string {
	return "DeletePushWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushWhitelistRequestValidationError{}

// Validate checks the field values on DeletePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushWhitelistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushWhitelistResponseMultiError, or nil if none found.
func (m *DeletePushWhitelistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushWhitelistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeletePushWhitelistResponseMultiError(errors)
	}

	return nil
}

// DeletePushWhitelistResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePushWhitelistResponse.ValidateAll() if
// the designated constraints aren't met.
type DeletePushWhitelistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushWhitelistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushWhitelistResponseMultiError) AllErrors() []error { return m }

// DeletePushWhitelistResponseValidationError is the validation error returned
// by DeletePushWhitelistResponse.Validate if the designated constraints
// aren't met.
type DeletePushWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushWhitelistResponseValidationError) ErrorName() string {
	return "DeletePushWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushWhitelistResponseValidationError{}

// Validate checks the field values on ListPushWhitelistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPushWhitelistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPushWhitelistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPushWhitelistsRequestMultiError, or nil if none found.
func (m *ListPushWhitelistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPushWhitelistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Applicant

	if m.WhitelistStatus != nil {
		// no validation rules for WhitelistStatus
	}

	if m.ApprovalStatus != nil {
		// no validation rules for ApprovalStatus
	}

	if len(errors) > 0 {
		return ListPushWhitelistsRequestMultiError(errors)
	}

	return nil
}

// ListPushWhitelistsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPushWhitelistsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListPushWhitelistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPushWhitelistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPushWhitelistsRequestMultiError) AllErrors() []error { return m }

// ListPushWhitelistsRequestValidationError is the validation error returned by
// ListPushWhitelistsRequest.Validate if the designated constraints aren't met.
type ListPushWhitelistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPushWhitelistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPushWhitelistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPushWhitelistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPushWhitelistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPushWhitelistsRequestValidationError) ErrorName() string {
	return "ListPushWhitelistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPushWhitelistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPushWhitelistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPushWhitelistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPushWhitelistsRequestValidationError{}

// Validate checks the field values on ListPushWhitelistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPushWhitelistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPushWhitelistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPushWhitelistsResponseMultiError, or nil if none found.
func (m *ListPushWhitelistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPushWhitelistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetWhitelists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPushWhitelistsResponseValidationError{
						field:  fmt.Sprintf("Whitelists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPushWhitelistsResponseValidationError{
						field:  fmt.Sprintf("Whitelists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPushWhitelistsResponseValidationError{
					field:  fmt.Sprintf("Whitelists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPushWhitelistsResponseMultiError(errors)
	}

	return nil
}

// ListPushWhitelistsResponseMultiError is an error wrapping multiple
// validation errors returned by ListPushWhitelistsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPushWhitelistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPushWhitelistsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPushWhitelistsResponseMultiError) AllErrors() []error { return m }

// ListPushWhitelistsResponseValidationError is the validation error returned
// by ListPushWhitelistsResponse.Validate if the designated constraints aren't met.
type ListPushWhitelistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPushWhitelistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPushWhitelistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPushWhitelistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPushWhitelistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPushWhitelistsResponseValidationError) ErrorName() string {
	return "ListPushWhitelistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPushWhitelistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPushWhitelistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPushWhitelistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPushWhitelistsResponseValidationError{}

// Validate checks the field values on ApprovePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApprovePushWhitelistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovePushWhitelistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApprovePushWhitelistRequestMultiError, or nil if none found.
func (m *ApprovePushWhitelistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovePushWhitelistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for WhitelistId

	// no validation rules for ApprovalStatus

	// no validation rules for Approver

	if len(errors) > 0 {
		return ApprovePushWhitelistRequestMultiError(errors)
	}

	return nil
}

// ApprovePushWhitelistRequestMultiError is an error wrapping multiple
// validation errors returned by ApprovePushWhitelistRequest.ValidateAll() if
// the designated constraints aren't met.
type ApprovePushWhitelistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovePushWhitelistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovePushWhitelistRequestMultiError) AllErrors() []error { return m }

// ApprovePushWhitelistRequestValidationError is the validation error returned
// by ApprovePushWhitelistRequest.Validate if the designated constraints
// aren't met.
type ApprovePushWhitelistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovePushWhitelistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovePushWhitelistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovePushWhitelistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovePushWhitelistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovePushWhitelistRequestValidationError) ErrorName() string {
	return "ApprovePushWhitelistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovePushWhitelistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovePushWhitelistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovePushWhitelistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovePushWhitelistRequestValidationError{}

// Validate checks the field values on ApprovePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApprovePushWhitelistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovePushWhitelistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApprovePushWhitelistResponseMultiError, or nil if none found.
func (m *ApprovePushWhitelistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovePushWhitelistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ApprovePushWhitelistResponseMultiError(errors)
	}

	return nil
}

// ApprovePushWhitelistResponseMultiError is an error wrapping multiple
// validation errors returned by ApprovePushWhitelistResponse.ValidateAll() if
// the designated constraints aren't met.
type ApprovePushWhitelistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovePushWhitelistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovePushWhitelistResponseMultiError) AllErrors() []error { return m }

// ApprovePushWhitelistResponseValidationError is the validation error returned
// by ApprovePushWhitelistResponse.Validate if the designated constraints
// aren't met.
type ApprovePushWhitelistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovePushWhitelistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovePushWhitelistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovePushWhitelistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovePushWhitelistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovePushWhitelistResponseValidationError) ErrorName() string {
	return "ApprovePushWhitelistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovePushWhitelistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovePushWhitelistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovePushWhitelistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovePushWhitelistResponseValidationError{}

// Validate checks the field values on TemplateContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TemplateContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TemplateContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TemplateContentMultiError, or nil if none found.
func (m *TemplateContent) ValidateAll() error {
	return m.validate(true)
}

func (m *TemplateContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Body

	if len(errors) > 0 {
		return TemplateContentMultiError(errors)
	}

	return nil
}

// TemplateContentMultiError is an error wrapping multiple validation errors
// returned by TemplateContent.ValidateAll() if the designated constraints
// aren't met.
type TemplateContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TemplateContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TemplateContentMultiError) AllErrors() []error { return m }

// TemplateContentValidationError is the validation error returned by
// TemplateContent.Validate if the designated constraints aren't met.
type TemplateContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TemplateContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TemplateContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TemplateContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TemplateContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TemplateContentValidationError) ErrorName() string { return "TemplateContentValidationError" }

// Error satisfies the builtin error interface
func (e TemplateContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTemplateContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TemplateContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TemplateContentValidationError{}

// Validate checks the field values on PushTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PushTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushTemplate with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PushTemplateMultiError, or
// nil if none found.
func (m *PushTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *PushTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	// no validation rules for Domain

	// no validation rules for TemplateType

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushTemplateValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushTemplateValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushTemplateValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Creator

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushTemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushTemplateMultiError(errors)
	}

	return nil
}

// PushTemplateMultiError is an error wrapping multiple validation errors
// returned by PushTemplate.ValidateAll() if the designated constraints aren't met.
type PushTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushTemplateMultiError) AllErrors() []error { return m }

// PushTemplateValidationError is the validation error returned by
// PushTemplate.Validate if the designated constraints aren't met.
type PushTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushTemplateValidationError) ErrorName() string { return "PushTemplateValidationError" }

// Error satisfies the builtin error interface
func (e PushTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushTemplateValidationError{}

// Validate checks the field values on CreatePushTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushTemplateRequestMultiError, or nil if none found.
func (m *CreatePushTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePushTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePushTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePushTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePushTemplateRequestMultiError(errors)
	}

	return nil
}

// CreatePushTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePushTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePushTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushTemplateRequestMultiError) AllErrors() []error { return m }

// CreatePushTemplateRequestValidationError is the validation error returned by
// CreatePushTemplateRequest.Validate if the designated constraints aren't met.
type CreatePushTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushTemplateRequestValidationError) ErrorName() string {
	return "CreatePushTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushTemplateRequestValidationError{}

// Validate checks the field values on CreatePushTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePushTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePushTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePushTemplateResponseMultiError, or nil if none found.
func (m *CreatePushTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePushTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreatePushTemplateResponseMultiError(errors)
	}

	return nil
}

// CreatePushTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePushTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePushTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePushTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePushTemplateResponseMultiError) AllErrors() []error { return m }

// CreatePushTemplateResponseValidationError is the validation error returned
// by CreatePushTemplateResponse.Validate if the designated constraints aren't met.
type CreatePushTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePushTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePushTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePushTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePushTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePushTemplateResponseValidationError) ErrorName() string {
	return "CreatePushTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePushTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePushTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePushTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePushTemplateResponseValidationError{}

// Validate checks the field values on GetPushTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushTemplateRequestMultiError, or nil if none found.
func (m *GetPushTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return GetPushTemplateRequestMultiError(errors)
	}

	return nil
}

// GetPushTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by GetPushTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPushTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushTemplateRequestMultiError) AllErrors() []error { return m }

// GetPushTemplateRequestValidationError is the validation error returned by
// GetPushTemplateRequest.Validate if the designated constraints aren't met.
type GetPushTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushTemplateRequestValidationError) ErrorName() string {
	return "GetPushTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushTemplateRequestValidationError{}

// Validate checks the field values on GetPushTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPushTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPushTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPushTemplateResponseMultiError, or nil if none found.
func (m *GetPushTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPushTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPushTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPushTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPushTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPushTemplateResponseMultiError(errors)
	}

	return nil
}

// GetPushTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetPushTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPushTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPushTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPushTemplateResponseMultiError) AllErrors() []error { return m }

// GetPushTemplateResponseValidationError is the validation error returned by
// GetPushTemplateResponse.Validate if the designated constraints aren't met.
type GetPushTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPushTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPushTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPushTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPushTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPushTemplateResponseValidationError) ErrorName() string {
	return "GetPushTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPushTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPushTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPushTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPushTemplateResponseValidationError{}

// Validate checks the field values on UpdatePushTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushTemplateRequestMultiError, or nil if none found.
func (m *UpdatePushTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for TemplateId

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePushTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePushTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePushTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePushTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdatePushTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePushTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdatePushTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushTemplateRequestMultiError) AllErrors() []error { return m }

// UpdatePushTemplateRequestValidationError is the validation error returned by
// UpdatePushTemplateRequest.Validate if the designated constraints aren't met.
type UpdatePushTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushTemplateRequestValidationError) ErrorName() string {
	return "UpdatePushTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushTemplateRequestValidationError{}

// Validate checks the field values on UpdatePushTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePushTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePushTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePushTemplateResponseMultiError, or nil if none found.
func (m *UpdatePushTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePushTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdatePushTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdatePushTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePushTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePushTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePushTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePushTemplateResponseMultiError) AllErrors() []error { return m }

// UpdatePushTemplateResponseValidationError is the validation error returned
// by UpdatePushTemplateResponse.Validate if the designated constraints aren't met.
type UpdatePushTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePushTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePushTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePushTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePushTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePushTemplateResponseValidationError) ErrorName() string {
	return "UpdatePushTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePushTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePushTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePushTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePushTemplateResponseValidationError{}

// Validate checks the field values on DeletePushTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushTemplateRequestMultiError, or nil if none found.
func (m *DeletePushTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return DeletePushTemplateRequestMultiError(errors)
	}

	return nil
}

// DeletePushTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePushTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type DeletePushTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushTemplateRequestMultiError) AllErrors() []error { return m }

// DeletePushTemplateRequestValidationError is the validation error returned by
// DeletePushTemplateRequest.Validate if the designated constraints aren't met.
type DeletePushTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushTemplateRequestValidationError) ErrorName() string {
	return "DeletePushTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushTemplateRequestValidationError{}

// Validate checks the field values on DeletePushTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePushTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePushTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePushTemplateResponseMultiError, or nil if none found.
func (m *DeletePushTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePushTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeletePushTemplateResponseMultiError(errors)
	}

	return nil
}

// DeletePushTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by DeletePushTemplateResponse.ValidateAll() if
// the designated constraints aren't met.
type DeletePushTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePushTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePushTemplateResponseMultiError) AllErrors() []error { return m }

// DeletePushTemplateResponseValidationError is the validation error returned
// by DeletePushTemplateResponse.Validate if the designated constraints aren't met.
type DeletePushTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePushTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePushTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePushTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePushTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePushTemplateResponseValidationError) ErrorName() string {
	return "DeletePushTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePushTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePushTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePushTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePushTemplateResponseValidationError{}

// Validate checks the field values on ListPushTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPushTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPushTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPushTemplatesRequestMultiError, or nil if none found.
func (m *ListPushTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPushTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TemplateType

	// no validation rules for Creator

	if len(errors) > 0 {
		return ListPushTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListPushTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPushTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPushTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPushTemplatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPushTemplatesRequestMultiError) AllErrors() []error { return m }

// ListPushTemplatesRequestValidationError is the validation error returned by
// ListPushTemplatesRequest.Validate if the designated constraints aren't met.
type ListPushTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPushTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPushTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPushTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPushTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPushTemplatesRequestValidationError) ErrorName() string {
	return "ListPushTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPushTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPushTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPushTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPushTemplatesRequestValidationError{}

// Validate checks the field values on ListPushTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPushTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPushTemplatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPushTemplatesResponseMultiError, or nil if none found.
func (m *ListPushTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPushTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPushTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPushTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPushTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPushTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListPushTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPushTemplatesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListPushTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPushTemplatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPushTemplatesResponseMultiError) AllErrors() []error { return m }

// ListPushTemplatesResponseValidationError is the validation error returned by
// ListPushTemplatesResponse.Validate if the designated constraints aren't met.
type ListPushTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPushTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPushTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPushTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPushTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPushTemplatesResponseValidationError) ErrorName() string {
	return "ListPushTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPushTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPushTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPushTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPushTemplatesResponseValidationError{}
