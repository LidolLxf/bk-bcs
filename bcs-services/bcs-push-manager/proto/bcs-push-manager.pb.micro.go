// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-push-manager.proto

package pushmanager

import (
	fmt "fmt"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PushManager service

func NewPushManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "PushManager.CreatePushEvent",
			Path:    []string{"/api/v1/domains/{domain}/push_events"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.DeletePushEvent",
			Path:    []string{"/api/v1/domains/{domain}/push_events/{event_id}"},
			Method:  []string{"DELETE"},
			// Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.GetPushEvent",
			Path:    []string{"/api/v1/domains/{domain}/push_events/{event_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "PushManager.ListPushEvents",
			Path:    []string{"/api/v1/domains/{domain}/push_events"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "PushManager.UpdatePushEvent",
			Path:    []string{"/api/v1/domains/{domain}/push_events/{event_id}"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.CreatePushWhitelist",
			Path:    []string{"/api/v1/domains/{domain}/push_whitelists"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.DeletePushWhitelist",
			Path:    []string{"/api/v1/domains/{domain}/push_whitelists/{whitelist_id}"},
			Method:  []string{"DELETE"},
			// Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.UpdatePushWhitelist",
			Path:    []string{"/api/v1/domains/{domain}/push_whitelists/{whitelist_id}"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.ListPushWhitelists",
			Path:    []string{"/api/v1/domains/{domain}/push_whitelists"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "PushManager.GetPushWhitelist",
			Path:    []string{"/api/v1/domains/{domain}/push_whitelists/{whitelist_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "PushManager.CreatePushTemplate",
			Path:    []string{"/api/v1/domains/{domain}/push_templates"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.DeletePushTemplate",
			Path:    []string{"/api/v1/domains/{domain}/push_templates/{template_id}"},
			Method:  []string{"DELETE"},
			// Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.UpdatePushTemplate",
			Path:    []string{"/api/v1/domains/{domain}/push_templates/{template_id}"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PushManager.ListPushTemplates",
			Path:    []string{"/api/v1/domains/{domain}/push_templates"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "PushManager.GetPushTemplate",
			Path:    []string{"/api/v1/domains/{domain}/push_templates/{template_id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for PushManager service

type PushManagerService interface {
	// ===== 推送事件相关 =====
	CreatePushEvent(ctx context.Context, in *CreatePushEventRequest, opts ...client.CallOption) (*CreatePushEventResponse, error)
	DeletePushEvent(ctx context.Context, in *DeletePushEventRequest, opts ...client.CallOption) (*DeletePushEventResponse, error)
	GetPushEvent(ctx context.Context, in *GetPushEventRequest, opts ...client.CallOption) (*GetPushEventResponse, error)
	ListPushEvents(ctx context.Context, in *ListPushEventsRequest, opts ...client.CallOption) (*ListPushEventsResponse, error)
	UpdatePushEvent(ctx context.Context, in *UpdatePushEventRequest, opts ...client.CallOption) (*UpdatePushEventResponse, error)
	// ===== 推送白名单相关 =====
	CreatePushWhitelist(ctx context.Context, in *CreatePushWhitelistRequest, opts ...client.CallOption) (*CreatePushWhitelistResponse, error)
	DeletePushWhitelist(ctx context.Context, in *DeletePushWhitelistRequest, opts ...client.CallOption) (*DeletePushWhitelistResponse, error)
	UpdatePushWhitelist(ctx context.Context, in *UpdatePushWhitelistRequest, opts ...client.CallOption) (*UpdatePushWhitelistResponse, error)
	ListPushWhitelists(ctx context.Context, in *ListPushWhitelistsRequest, opts ...client.CallOption) (*ListPushWhitelistsResponse, error)
	GetPushWhitelist(ctx context.Context, in *GetPushWhitelistRequest, opts ...client.CallOption) (*GetPushWhitelistResponse, error)
	// ===== 推送模版相关 =====
	CreatePushTemplate(ctx context.Context, in *CreatePushTemplateRequest, opts ...client.CallOption) (*CreatePushTemplateResponse, error)
	DeletePushTemplate(ctx context.Context, in *DeletePushTemplateRequest, opts ...client.CallOption) (*DeletePushTemplateResponse, error)
	UpdatePushTemplate(ctx context.Context, in *UpdatePushTemplateRequest, opts ...client.CallOption) (*UpdatePushTemplateResponse, error)
	ListPushTemplates(ctx context.Context, in *ListPushTemplatesRequest, opts ...client.CallOption) (*ListPushTemplatesResponse, error)
	GetPushTemplate(ctx context.Context, in *GetPushTemplateRequest, opts ...client.CallOption) (*GetPushTemplateResponse, error)
}

type pushManagerService struct {
	c    client.Client
	name string
}

func NewPushManagerService(name string, c client.Client) PushManagerService {
	return &pushManagerService{
		c:    c,
		name: name,
	}
}

func (c *pushManagerService) CreatePushEvent(ctx context.Context, in *CreatePushEventRequest, opts ...client.CallOption) (*CreatePushEventResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.CreatePushEvent", in)
	out := new(CreatePushEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) DeletePushEvent(ctx context.Context, in *DeletePushEventRequest, opts ...client.CallOption) (*DeletePushEventResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.DeletePushEvent", in)
	out := new(DeletePushEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) GetPushEvent(ctx context.Context, in *GetPushEventRequest, opts ...client.CallOption) (*GetPushEventResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.GetPushEvent", in)
	out := new(GetPushEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) ListPushEvents(ctx context.Context, in *ListPushEventsRequest, opts ...client.CallOption) (*ListPushEventsResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.ListPushEvents", in)
	out := new(ListPushEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) UpdatePushEvent(ctx context.Context, in *UpdatePushEventRequest, opts ...client.CallOption) (*UpdatePushEventResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.UpdatePushEvent", in)
	out := new(UpdatePushEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) CreatePushWhitelist(ctx context.Context, in *CreatePushWhitelistRequest, opts ...client.CallOption) (*CreatePushWhitelistResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.CreatePushWhitelist", in)
	out := new(CreatePushWhitelistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) DeletePushWhitelist(ctx context.Context, in *DeletePushWhitelistRequest, opts ...client.CallOption) (*DeletePushWhitelistResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.DeletePushWhitelist", in)
	out := new(DeletePushWhitelistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) UpdatePushWhitelist(ctx context.Context, in *UpdatePushWhitelistRequest, opts ...client.CallOption) (*UpdatePushWhitelistResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.UpdatePushWhitelist", in)
	out := new(UpdatePushWhitelistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) ListPushWhitelists(ctx context.Context, in *ListPushWhitelistsRequest, opts ...client.CallOption) (*ListPushWhitelistsResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.ListPushWhitelists", in)
	out := new(ListPushWhitelistsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) GetPushWhitelist(ctx context.Context, in *GetPushWhitelistRequest, opts ...client.CallOption) (*GetPushWhitelistResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.GetPushWhitelist", in)
	out := new(GetPushWhitelistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) CreatePushTemplate(ctx context.Context, in *CreatePushTemplateRequest, opts ...client.CallOption) (*CreatePushTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.CreatePushTemplate", in)
	out := new(CreatePushTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) DeletePushTemplate(ctx context.Context, in *DeletePushTemplateRequest, opts ...client.CallOption) (*DeletePushTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.DeletePushTemplate", in)
	out := new(DeletePushTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) UpdatePushTemplate(ctx context.Context, in *UpdatePushTemplateRequest, opts ...client.CallOption) (*UpdatePushTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.UpdatePushTemplate", in)
	out := new(UpdatePushTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) ListPushTemplates(ctx context.Context, in *ListPushTemplatesRequest, opts ...client.CallOption) (*ListPushTemplatesResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.ListPushTemplates", in)
	out := new(ListPushTemplatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerService) GetPushTemplate(ctx context.Context, in *GetPushTemplateRequest, opts ...client.CallOption) (*GetPushTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "PushManager.GetPushTemplate", in)
	out := new(GetPushTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushManager service

type PushManagerHandler interface {
	// ===== 推送事件相关 =====
	CreatePushEvent(context.Context, *CreatePushEventRequest, *CreatePushEventResponse) error
	DeletePushEvent(context.Context, *DeletePushEventRequest, *DeletePushEventResponse) error
	GetPushEvent(context.Context, *GetPushEventRequest, *GetPushEventResponse) error
	ListPushEvents(context.Context, *ListPushEventsRequest, *ListPushEventsResponse) error
	UpdatePushEvent(context.Context, *UpdatePushEventRequest, *UpdatePushEventResponse) error
	// ===== 推送白名单相关 =====
	CreatePushWhitelist(context.Context, *CreatePushWhitelistRequest, *CreatePushWhitelistResponse) error
	DeletePushWhitelist(context.Context, *DeletePushWhitelistRequest, *DeletePushWhitelistResponse) error
	UpdatePushWhitelist(context.Context, *UpdatePushWhitelistRequest, *UpdatePushWhitelistResponse) error
	ListPushWhitelists(context.Context, *ListPushWhitelistsRequest, *ListPushWhitelistsResponse) error
	GetPushWhitelist(context.Context, *GetPushWhitelistRequest, *GetPushWhitelistResponse) error
	// ===== 推送模版相关 =====
	CreatePushTemplate(context.Context, *CreatePushTemplateRequest, *CreatePushTemplateResponse) error
	DeletePushTemplate(context.Context, *DeletePushTemplateRequest, *DeletePushTemplateResponse) error
	UpdatePushTemplate(context.Context, *UpdatePushTemplateRequest, *UpdatePushTemplateResponse) error
	ListPushTemplates(context.Context, *ListPushTemplatesRequest, *ListPushTemplatesResponse) error
	GetPushTemplate(context.Context, *GetPushTemplateRequest, *GetPushTemplateResponse) error
}

func RegisterPushManagerHandler(s server.Server, hdlr PushManagerHandler, opts ...server.HandlerOption) error {
	type pushManager interface {
		CreatePushEvent(ctx context.Context, in *CreatePushEventRequest, out *CreatePushEventResponse) error
		DeletePushEvent(ctx context.Context, in *DeletePushEventRequest, out *DeletePushEventResponse) error
		GetPushEvent(ctx context.Context, in *GetPushEventRequest, out *GetPushEventResponse) error
		ListPushEvents(ctx context.Context, in *ListPushEventsRequest, out *ListPushEventsResponse) error
		UpdatePushEvent(ctx context.Context, in *UpdatePushEventRequest, out *UpdatePushEventResponse) error
		CreatePushWhitelist(ctx context.Context, in *CreatePushWhitelistRequest, out *CreatePushWhitelistResponse) error
		DeletePushWhitelist(ctx context.Context, in *DeletePushWhitelistRequest, out *DeletePushWhitelistResponse) error
		UpdatePushWhitelist(ctx context.Context, in *UpdatePushWhitelistRequest, out *UpdatePushWhitelistResponse) error
		ListPushWhitelists(ctx context.Context, in *ListPushWhitelistsRequest, out *ListPushWhitelistsResponse) error
		GetPushWhitelist(ctx context.Context, in *GetPushWhitelistRequest, out *GetPushWhitelistResponse) error
		CreatePushTemplate(ctx context.Context, in *CreatePushTemplateRequest, out *CreatePushTemplateResponse) error
		DeletePushTemplate(ctx context.Context, in *DeletePushTemplateRequest, out *DeletePushTemplateResponse) error
		UpdatePushTemplate(ctx context.Context, in *UpdatePushTemplateRequest, out *UpdatePushTemplateResponse) error
		ListPushTemplates(ctx context.Context, in *ListPushTemplatesRequest, out *ListPushTemplatesResponse) error
		GetPushTemplate(ctx context.Context, in *GetPushTemplateRequest, out *GetPushTemplateResponse) error
	}
	type PushManager struct {
		pushManager
	}
	h := &pushManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.CreatePushEvent",
		Path:    []string{"/api/v1/domains/{domain}/push_events"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.DeletePushEvent",
		Path:    []string{"/api/v1/domains/{domain}/push_events/{event_id}"},
		Method:  []string{"DELETE"},
		// Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.GetPushEvent",
		Path:    []string{"/api/v1/domains/{domain}/push_events/{event_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.ListPushEvents",
		Path:    []string{"/api/v1/domains/{domain}/push_events"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.UpdatePushEvent",
		Path:    []string{"/api/v1/domains/{domain}/push_events/{event_id}"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.CreatePushWhitelist",
		Path:    []string{"/api/v1/domains/{domain}/push_whitelists"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.DeletePushWhitelist",
		Path:    []string{"/api/v1/domains/{domain}/push_whitelists/{whitelist_id}"},
		Method:  []string{"DELETE"},
		// Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.UpdatePushWhitelist",
		Path:    []string{"/api/v1/domains/{domain}/push_whitelists/{whitelist_id}"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.ListPushWhitelists",
		Path:    []string{"/api/v1/domains/{domain}/push_whitelists"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.GetPushWhitelist",
		Path:    []string{"/api/v1/domains/{domain}/push_whitelists/{whitelist_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.CreatePushTemplate",
		Path:    []string{"/api/v1/domains/{domain}/push_templates"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.DeletePushTemplate",
		Path:    []string{"/api/v1/domains/{domain}/push_templates/{template_id}"},
		Method:  []string{"DELETE"},
		// Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.UpdatePushTemplate",
		Path:    []string{"/api/v1/domains/{domain}/push_templates/{template_id}"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.ListPushTemplates",
		Path:    []string{"/api/v1/domains/{domain}/push_templates"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PushManager.GetPushTemplate",
		Path:    []string{"/api/v1/domains/{domain}/push_templates/{template_id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&PushManager{h}, opts...))
}

type pushManagerHandler struct {
	PushManagerHandler
}

func (h *pushManagerHandler) CreatePushEvent(ctx context.Context, in *CreatePushEventRequest, out *CreatePushEventResponse) error {
	return h.PushManagerHandler.CreatePushEvent(ctx, in, out)
}

func (h *pushManagerHandler) DeletePushEvent(ctx context.Context, in *DeletePushEventRequest, out *DeletePushEventResponse) error {
	return h.PushManagerHandler.DeletePushEvent(ctx, in, out)
}

func (h *pushManagerHandler) GetPushEvent(ctx context.Context, in *GetPushEventRequest, out *GetPushEventResponse) error {
	return h.PushManagerHandler.GetPushEvent(ctx, in, out)
}

func (h *pushManagerHandler) ListPushEvents(ctx context.Context, in *ListPushEventsRequest, out *ListPushEventsResponse) error {
	return h.PushManagerHandler.ListPushEvents(ctx, in, out)
}

func (h *pushManagerHandler) UpdatePushEvent(ctx context.Context, in *UpdatePushEventRequest, out *UpdatePushEventResponse) error {
	return h.PushManagerHandler.UpdatePushEvent(ctx, in, out)
}

func (h *pushManagerHandler) CreatePushWhitelist(ctx context.Context, in *CreatePushWhitelistRequest, out *CreatePushWhitelistResponse) error {
	return h.PushManagerHandler.CreatePushWhitelist(ctx, in, out)
}

func (h *pushManagerHandler) DeletePushWhitelist(ctx context.Context, in *DeletePushWhitelistRequest, out *DeletePushWhitelistResponse) error {
	return h.PushManagerHandler.DeletePushWhitelist(ctx, in, out)
}

func (h *pushManagerHandler) UpdatePushWhitelist(ctx context.Context, in *UpdatePushWhitelistRequest, out *UpdatePushWhitelistResponse) error {
	return h.PushManagerHandler.UpdatePushWhitelist(ctx, in, out)
}

func (h *pushManagerHandler) ListPushWhitelists(ctx context.Context, in *ListPushWhitelistsRequest, out *ListPushWhitelistsResponse) error {
	return h.PushManagerHandler.ListPushWhitelists(ctx, in, out)
}

func (h *pushManagerHandler) GetPushWhitelist(ctx context.Context, in *GetPushWhitelistRequest, out *GetPushWhitelistResponse) error {
	return h.PushManagerHandler.GetPushWhitelist(ctx, in, out)
}

func (h *pushManagerHandler) CreatePushTemplate(ctx context.Context, in *CreatePushTemplateRequest, out *CreatePushTemplateResponse) error {
	return h.PushManagerHandler.CreatePushTemplate(ctx, in, out)
}

func (h *pushManagerHandler) DeletePushTemplate(ctx context.Context, in *DeletePushTemplateRequest, out *DeletePushTemplateResponse) error {
	return h.PushManagerHandler.DeletePushTemplate(ctx, in, out)
}

func (h *pushManagerHandler) UpdatePushTemplate(ctx context.Context, in *UpdatePushTemplateRequest, out *UpdatePushTemplateResponse) error {
	return h.PushManagerHandler.UpdatePushTemplate(ctx, in, out)
}

func (h *pushManagerHandler) ListPushTemplates(ctx context.Context, in *ListPushTemplatesRequest, out *ListPushTemplatesResponse) error {
	return h.PushManagerHandler.ListPushTemplates(ctx, in, out)
}

func (h *pushManagerHandler) GetPushTemplate(ctx context.Context, in *GetPushTemplateRequest, out *GetPushTemplateResponse) error {
	return h.PushManagerHandler.GetPushTemplate(ctx, in, out)
}
