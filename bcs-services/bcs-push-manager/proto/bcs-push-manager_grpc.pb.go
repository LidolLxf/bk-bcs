// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.5
// source: proto/bcs-push-manager.proto

package pushmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PushManager_CreatePushEvent_FullMethodName     = "/pushmanager.PushManager/CreatePushEvent"
	PushManager_DeletePushEvent_FullMethodName     = "/pushmanager.PushManager/DeletePushEvent"
	PushManager_GetPushEvent_FullMethodName        = "/pushmanager.PushManager/GetPushEvent"
	PushManager_ListPushEvents_FullMethodName      = "/pushmanager.PushManager/ListPushEvents"
	PushManager_UpdatePushEvent_FullMethodName     = "/pushmanager.PushManager/UpdatePushEvent"
	PushManager_CreatePushWhitelist_FullMethodName = "/pushmanager.PushManager/CreatePushWhitelist"
	PushManager_DeletePushWhitelist_FullMethodName = "/pushmanager.PushManager/DeletePushWhitelist"
	PushManager_UpdatePushWhitelist_FullMethodName = "/pushmanager.PushManager/UpdatePushWhitelist"
	PushManager_ListPushWhitelists_FullMethodName  = "/pushmanager.PushManager/ListPushWhitelists"
	PushManager_GetPushWhitelist_FullMethodName    = "/pushmanager.PushManager/GetPushWhitelist"
	PushManager_CreatePushTemplate_FullMethodName  = "/pushmanager.PushManager/CreatePushTemplate"
	PushManager_DeletePushTemplate_FullMethodName  = "/pushmanager.PushManager/DeletePushTemplate"
	PushManager_UpdatePushTemplate_FullMethodName  = "/pushmanager.PushManager/UpdatePushTemplate"
	PushManager_ListPushTemplates_FullMethodName   = "/pushmanager.PushManager/ListPushTemplates"
	PushManager_GetPushTemplate_FullMethodName     = "/pushmanager.PushManager/GetPushTemplate"
)

// PushManagerClient is the client API for PushManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushManagerClient interface {
	// ===== 推送事件相关 =====
	CreatePushEvent(ctx context.Context, in *CreatePushEventRequest, opts ...grpc.CallOption) (*CreatePushEventResponse, error)
	DeletePushEvent(ctx context.Context, in *DeletePushEventRequest, opts ...grpc.CallOption) (*DeletePushEventResponse, error)
	GetPushEvent(ctx context.Context, in *GetPushEventRequest, opts ...grpc.CallOption) (*GetPushEventResponse, error)
	ListPushEvents(ctx context.Context, in *ListPushEventsRequest, opts ...grpc.CallOption) (*ListPushEventsResponse, error)
	UpdatePushEvent(ctx context.Context, in *UpdatePushEventRequest, opts ...grpc.CallOption) (*UpdatePushEventResponse, error)
	// ===== 推送白名单相关 =====
	CreatePushWhitelist(ctx context.Context, in *CreatePushWhitelistRequest, opts ...grpc.CallOption) (*CreatePushWhitelistResponse, error)
	DeletePushWhitelist(ctx context.Context, in *DeletePushWhitelistRequest, opts ...grpc.CallOption) (*DeletePushWhitelistResponse, error)
	UpdatePushWhitelist(ctx context.Context, in *UpdatePushWhitelistRequest, opts ...grpc.CallOption) (*UpdatePushWhitelistResponse, error)
	ListPushWhitelists(ctx context.Context, in *ListPushWhitelistsRequest, opts ...grpc.CallOption) (*ListPushWhitelistsResponse, error)
	GetPushWhitelist(ctx context.Context, in *GetPushWhitelistRequest, opts ...grpc.CallOption) (*GetPushWhitelistResponse, error)
	// ===== 推送模版相关 =====
	CreatePushTemplate(ctx context.Context, in *CreatePushTemplateRequest, opts ...grpc.CallOption) (*CreatePushTemplateResponse, error)
	DeletePushTemplate(ctx context.Context, in *DeletePushTemplateRequest, opts ...grpc.CallOption) (*DeletePushTemplateResponse, error)
	UpdatePushTemplate(ctx context.Context, in *UpdatePushTemplateRequest, opts ...grpc.CallOption) (*UpdatePushTemplateResponse, error)
	ListPushTemplates(ctx context.Context, in *ListPushTemplatesRequest, opts ...grpc.CallOption) (*ListPushTemplatesResponse, error)
	GetPushTemplate(ctx context.Context, in *GetPushTemplateRequest, opts ...grpc.CallOption) (*GetPushTemplateResponse, error)
}

type pushManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPushManagerClient(cc grpc.ClientConnInterface) PushManagerClient {
	return &pushManagerClient{cc}
}

func (c *pushManagerClient) CreatePushEvent(ctx context.Context, in *CreatePushEventRequest, opts ...grpc.CallOption) (*CreatePushEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePushEventResponse)
	err := c.cc.Invoke(ctx, PushManager_CreatePushEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) DeletePushEvent(ctx context.Context, in *DeletePushEventRequest, opts ...grpc.CallOption) (*DeletePushEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePushEventResponse)
	err := c.cc.Invoke(ctx, PushManager_DeletePushEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) GetPushEvent(ctx context.Context, in *GetPushEventRequest, opts ...grpc.CallOption) (*GetPushEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPushEventResponse)
	err := c.cc.Invoke(ctx, PushManager_GetPushEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) ListPushEvents(ctx context.Context, in *ListPushEventsRequest, opts ...grpc.CallOption) (*ListPushEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPushEventsResponse)
	err := c.cc.Invoke(ctx, PushManager_ListPushEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) UpdatePushEvent(ctx context.Context, in *UpdatePushEventRequest, opts ...grpc.CallOption) (*UpdatePushEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePushEventResponse)
	err := c.cc.Invoke(ctx, PushManager_UpdatePushEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) CreatePushWhitelist(ctx context.Context, in *CreatePushWhitelistRequest, opts ...grpc.CallOption) (*CreatePushWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePushWhitelistResponse)
	err := c.cc.Invoke(ctx, PushManager_CreatePushWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) DeletePushWhitelist(ctx context.Context, in *DeletePushWhitelistRequest, opts ...grpc.CallOption) (*DeletePushWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePushWhitelistResponse)
	err := c.cc.Invoke(ctx, PushManager_DeletePushWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) UpdatePushWhitelist(ctx context.Context, in *UpdatePushWhitelistRequest, opts ...grpc.CallOption) (*UpdatePushWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePushWhitelistResponse)
	err := c.cc.Invoke(ctx, PushManager_UpdatePushWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) ListPushWhitelists(ctx context.Context, in *ListPushWhitelistsRequest, opts ...grpc.CallOption) (*ListPushWhitelistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPushWhitelistsResponse)
	err := c.cc.Invoke(ctx, PushManager_ListPushWhitelists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) GetPushWhitelist(ctx context.Context, in *GetPushWhitelistRequest, opts ...grpc.CallOption) (*GetPushWhitelistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPushWhitelistResponse)
	err := c.cc.Invoke(ctx, PushManager_GetPushWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) CreatePushTemplate(ctx context.Context, in *CreatePushTemplateRequest, opts ...grpc.CallOption) (*CreatePushTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePushTemplateResponse)
	err := c.cc.Invoke(ctx, PushManager_CreatePushTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) DeletePushTemplate(ctx context.Context, in *DeletePushTemplateRequest, opts ...grpc.CallOption) (*DeletePushTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePushTemplateResponse)
	err := c.cc.Invoke(ctx, PushManager_DeletePushTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) UpdatePushTemplate(ctx context.Context, in *UpdatePushTemplateRequest, opts ...grpc.CallOption) (*UpdatePushTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePushTemplateResponse)
	err := c.cc.Invoke(ctx, PushManager_UpdatePushTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) ListPushTemplates(ctx context.Context, in *ListPushTemplatesRequest, opts ...grpc.CallOption) (*ListPushTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPushTemplatesResponse)
	err := c.cc.Invoke(ctx, PushManager_ListPushTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushManagerClient) GetPushTemplate(ctx context.Context, in *GetPushTemplateRequest, opts ...grpc.CallOption) (*GetPushTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPushTemplateResponse)
	err := c.cc.Invoke(ctx, PushManager_GetPushTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushManagerServer is the server API for PushManager service.
// All implementations must embed UnimplementedPushManagerServer
// for forward compatibility.
type PushManagerServer interface {
	// ===== 推送事件相关 =====
	CreatePushEvent(context.Context, *CreatePushEventRequest) (*CreatePushEventResponse, error)
	DeletePushEvent(context.Context, *DeletePushEventRequest) (*DeletePushEventResponse, error)
	GetPushEvent(context.Context, *GetPushEventRequest) (*GetPushEventResponse, error)
	ListPushEvents(context.Context, *ListPushEventsRequest) (*ListPushEventsResponse, error)
	UpdatePushEvent(context.Context, *UpdatePushEventRequest) (*UpdatePushEventResponse, error)
	// ===== 推送白名单相关 =====
	CreatePushWhitelist(context.Context, *CreatePushWhitelistRequest) (*CreatePushWhitelistResponse, error)
	DeletePushWhitelist(context.Context, *DeletePushWhitelistRequest) (*DeletePushWhitelistResponse, error)
	UpdatePushWhitelist(context.Context, *UpdatePushWhitelistRequest) (*UpdatePushWhitelistResponse, error)
	ListPushWhitelists(context.Context, *ListPushWhitelistsRequest) (*ListPushWhitelistsResponse, error)
	GetPushWhitelist(context.Context, *GetPushWhitelistRequest) (*GetPushWhitelistResponse, error)
	// ===== 推送模版相关 =====
	CreatePushTemplate(context.Context, *CreatePushTemplateRequest) (*CreatePushTemplateResponse, error)
	DeletePushTemplate(context.Context, *DeletePushTemplateRequest) (*DeletePushTemplateResponse, error)
	UpdatePushTemplate(context.Context, *UpdatePushTemplateRequest) (*UpdatePushTemplateResponse, error)
	ListPushTemplates(context.Context, *ListPushTemplatesRequest) (*ListPushTemplatesResponse, error)
	GetPushTemplate(context.Context, *GetPushTemplateRequest) (*GetPushTemplateResponse, error)
	mustEmbedUnimplementedPushManagerServer()
}

// UnimplementedPushManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPushManagerServer struct{}

func (UnimplementedPushManagerServer) CreatePushEvent(context.Context, *CreatePushEventRequest) (*CreatePushEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePushEvent not implemented")
}
func (UnimplementedPushManagerServer) DeletePushEvent(context.Context, *DeletePushEventRequest) (*DeletePushEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePushEvent not implemented")
}
func (UnimplementedPushManagerServer) GetPushEvent(context.Context, *GetPushEventRequest) (*GetPushEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushEvent not implemented")
}
func (UnimplementedPushManagerServer) ListPushEvents(context.Context, *ListPushEventsRequest) (*ListPushEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushEvents not implemented")
}
func (UnimplementedPushManagerServer) UpdatePushEvent(context.Context, *UpdatePushEventRequest) (*UpdatePushEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushEvent not implemented")
}
func (UnimplementedPushManagerServer) CreatePushWhitelist(context.Context, *CreatePushWhitelistRequest) (*CreatePushWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePushWhitelist not implemented")
}
func (UnimplementedPushManagerServer) DeletePushWhitelist(context.Context, *DeletePushWhitelistRequest) (*DeletePushWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePushWhitelist not implemented")
}
func (UnimplementedPushManagerServer) UpdatePushWhitelist(context.Context, *UpdatePushWhitelistRequest) (*UpdatePushWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushWhitelist not implemented")
}
func (UnimplementedPushManagerServer) ListPushWhitelists(context.Context, *ListPushWhitelistsRequest) (*ListPushWhitelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushWhitelists not implemented")
}
func (UnimplementedPushManagerServer) GetPushWhitelist(context.Context, *GetPushWhitelistRequest) (*GetPushWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushWhitelist not implemented")
}
func (UnimplementedPushManagerServer) CreatePushTemplate(context.Context, *CreatePushTemplateRequest) (*CreatePushTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePushTemplate not implemented")
}
func (UnimplementedPushManagerServer) DeletePushTemplate(context.Context, *DeletePushTemplateRequest) (*DeletePushTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePushTemplate not implemented")
}
func (UnimplementedPushManagerServer) UpdatePushTemplate(context.Context, *UpdatePushTemplateRequest) (*UpdatePushTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePushTemplate not implemented")
}
func (UnimplementedPushManagerServer) ListPushTemplates(context.Context, *ListPushTemplatesRequest) (*ListPushTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPushTemplates not implemented")
}
func (UnimplementedPushManagerServer) GetPushTemplate(context.Context, *GetPushTemplateRequest) (*GetPushTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushTemplate not implemented")
}
func (UnimplementedPushManagerServer) mustEmbedUnimplementedPushManagerServer() {}
func (UnimplementedPushManagerServer) testEmbeddedByValue()                     {}

// UnsafePushManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushManagerServer will
// result in compilation errors.
type UnsafePushManagerServer interface {
	mustEmbedUnimplementedPushManagerServer()
}

func RegisterPushManagerServer(s grpc.ServiceRegistrar, srv PushManagerServer) {
	// If the following call pancis, it indicates UnimplementedPushManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PushManager_ServiceDesc, srv)
}

func _PushManager_CreatePushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePushEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).CreatePushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_CreatePushEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).CreatePushEvent(ctx, req.(*CreatePushEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_DeletePushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePushEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).DeletePushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_DeletePushEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).DeletePushEvent(ctx, req.(*DeletePushEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_GetPushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).GetPushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_GetPushEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).GetPushEvent(ctx, req.(*GetPushEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_ListPushEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).ListPushEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_ListPushEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).ListPushEvents(ctx, req.(*ListPushEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_UpdatePushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePushEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).UpdatePushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_UpdatePushEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).UpdatePushEvent(ctx, req.(*UpdatePushEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_CreatePushWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePushWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).CreatePushWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_CreatePushWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).CreatePushWhitelist(ctx, req.(*CreatePushWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_DeletePushWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePushWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).DeletePushWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_DeletePushWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).DeletePushWhitelist(ctx, req.(*DeletePushWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_UpdatePushWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePushWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).UpdatePushWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_UpdatePushWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).UpdatePushWhitelist(ctx, req.(*UpdatePushWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_ListPushWhitelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushWhitelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).ListPushWhitelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_ListPushWhitelists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).ListPushWhitelists(ctx, req.(*ListPushWhitelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_GetPushWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).GetPushWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_GetPushWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).GetPushWhitelist(ctx, req.(*GetPushWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_CreatePushTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePushTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).CreatePushTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_CreatePushTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).CreatePushTemplate(ctx, req.(*CreatePushTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_DeletePushTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePushTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).DeletePushTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_DeletePushTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).DeletePushTemplate(ctx, req.(*DeletePushTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_UpdatePushTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePushTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).UpdatePushTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_UpdatePushTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).UpdatePushTemplate(ctx, req.(*UpdatePushTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_ListPushTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).ListPushTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_ListPushTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).ListPushTemplates(ctx, req.(*ListPushTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushManager_GetPushTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushManagerServer).GetPushTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushManager_GetPushTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushManagerServer).GetPushTemplate(ctx, req.(*GetPushTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PushManager_ServiceDesc is the grpc.ServiceDesc for PushManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pushmanager.PushManager",
	HandlerType: (*PushManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePushEvent",
			Handler:    _PushManager_CreatePushEvent_Handler,
		},
		{
			MethodName: "DeletePushEvent",
			Handler:    _PushManager_DeletePushEvent_Handler,
		},
		{
			MethodName: "GetPushEvent",
			Handler:    _PushManager_GetPushEvent_Handler,
		},
		{
			MethodName: "ListPushEvents",
			Handler:    _PushManager_ListPushEvents_Handler,
		},
		{
			MethodName: "UpdatePushEvent",
			Handler:    _PushManager_UpdatePushEvent_Handler,
		},
		{
			MethodName: "CreatePushWhitelist",
			Handler:    _PushManager_CreatePushWhitelist_Handler,
		},
		{
			MethodName: "DeletePushWhitelist",
			Handler:    _PushManager_DeletePushWhitelist_Handler,
		},
		{
			MethodName: "UpdatePushWhitelist",
			Handler:    _PushManager_UpdatePushWhitelist_Handler,
		},
		{
			MethodName: "ListPushWhitelists",
			Handler:    _PushManager_ListPushWhitelists_Handler,
		},
		{
			MethodName: "GetPushWhitelist",
			Handler:    _PushManager_GetPushWhitelist_Handler,
		},
		{
			MethodName: "CreatePushTemplate",
			Handler:    _PushManager_CreatePushTemplate_Handler,
		},
		{
			MethodName: "DeletePushTemplate",
			Handler:    _PushManager_DeletePushTemplate_Handler,
		},
		{
			MethodName: "UpdatePushTemplate",
			Handler:    _PushManager_UpdatePushTemplate_Handler,
		},
		{
			MethodName: "ListPushTemplates",
			Handler:    _PushManager_ListPushTemplates_Handler,
		},
		{
			MethodName: "GetPushTemplate",
			Handler:    _PushManager_GetPushTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-push-manager.proto",
}
