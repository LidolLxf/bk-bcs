// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bcs-mesh-manager.proto

package meshmanager

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MeshManager service

func NewMeshManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MeshManager.ListIstioVersion",
			Path:    []string{"/v1/mesh/istio/version"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "MeshManager.InstallIstio",
			Path:    []string{"/v1/mesh/istio/install"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "MeshManager.ListMesh",
			Path:    []string{"/v1/mesh/list"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "MeshManager.UpdateMesh",
			Path:    []string{"/v1/mesh/{meshID}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "MeshManager.DeleteMesh",
			Path:    []string{"/v1/mesh/{meshID}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
	}
}

// Client API for MeshManager service

type MeshManagerService interface {
	// 获取当前开放的istio版本
	ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...client.CallOption) (*ListIstioVersionResponse, error)
	// 安装istio
	InstallIstio(ctx context.Context, in *InstallIstioRequest, opts ...client.CallOption) (*InstallIstioResponse, error)
	// 获取网格列表
	ListMesh(ctx context.Context, in *ListMeshRequest, opts ...client.CallOption) (*ListMeshResponse, error)
	// 更新网格配置
	UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...client.CallOption) (*UpdateMeshResponse, error)
	// 删除网格
	DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...client.CallOption) (*DeleteMeshResponse, error)
}

type meshManagerService struct {
	c    client.Client
	name string
}

func NewMeshManagerService(name string, c client.Client) MeshManagerService {
	return &meshManagerService{
		c:    c,
		name: name,
	}
}

func (c *meshManagerService) ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...client.CallOption) (*ListIstioVersionResponse, error) {
	req := c.c.NewRequest(c.name, "MeshManager.ListIstioVersion", in)
	out := new(ListIstioVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerService) InstallIstio(ctx context.Context, in *InstallIstioRequest, opts ...client.CallOption) (*InstallIstioResponse, error) {
	req := c.c.NewRequest(c.name, "MeshManager.InstallIstio", in)
	out := new(InstallIstioResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerService) ListMesh(ctx context.Context, in *ListMeshRequest, opts ...client.CallOption) (*ListMeshResponse, error) {
	req := c.c.NewRequest(c.name, "MeshManager.ListMesh", in)
	out := new(ListMeshResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerService) UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...client.CallOption) (*UpdateMeshResponse, error) {
	req := c.c.NewRequest(c.name, "MeshManager.UpdateMesh", in)
	out := new(UpdateMeshResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerService) DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...client.CallOption) (*DeleteMeshResponse, error) {
	req := c.c.NewRequest(c.name, "MeshManager.DeleteMesh", in)
	out := new(DeleteMeshResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MeshManager service

type MeshManagerHandler interface {
	// 获取当前开放的istio版本
	ListIstioVersion(context.Context, *ListIstioVersionRequest, *ListIstioVersionResponse) error
	// 安装istio
	InstallIstio(context.Context, *InstallIstioRequest, *InstallIstioResponse) error
	// 获取网格列表
	ListMesh(context.Context, *ListMeshRequest, *ListMeshResponse) error
	// 更新网格配置
	UpdateMesh(context.Context, *UpdateMeshRequest, *UpdateMeshResponse) error
	// 删除网格
	DeleteMesh(context.Context, *DeleteMeshRequest, *DeleteMeshResponse) error
}

func RegisterMeshManagerHandler(s server.Server, hdlr MeshManagerHandler, opts ...server.HandlerOption) error {
	type meshManager interface {
		ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, out *ListIstioVersionResponse) error
		InstallIstio(ctx context.Context, in *InstallIstioRequest, out *InstallIstioResponse) error
		ListMesh(ctx context.Context, in *ListMeshRequest, out *ListMeshResponse) error
		UpdateMesh(ctx context.Context, in *UpdateMeshRequest, out *UpdateMeshResponse) error
		DeleteMesh(ctx context.Context, in *DeleteMeshRequest, out *DeleteMeshResponse) error
	}
	type MeshManager struct {
		meshManager
	}
	h := &meshManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.ListIstioVersion",
		Path:    []string{"/v1/mesh/istio/version"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.InstallIstio",
		Path:    []string{"/v1/mesh/istio/install"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.ListMesh",
		Path:    []string{"/v1/mesh/list"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.UpdateMesh",
		Path:    []string{"/v1/mesh/{meshID}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.DeleteMesh",
		Path:    []string{"/v1/mesh/{meshID}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MeshManager{h}, opts...))
}

type meshManagerHandler struct {
	MeshManagerHandler
}

func (h *meshManagerHandler) ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, out *ListIstioVersionResponse) error {
	return h.MeshManagerHandler.ListIstioVersion(ctx, in, out)
}

func (h *meshManagerHandler) InstallIstio(ctx context.Context, in *InstallIstioRequest, out *InstallIstioResponse) error {
	return h.MeshManagerHandler.InstallIstio(ctx, in, out)
}

func (h *meshManagerHandler) ListMesh(ctx context.Context, in *ListMeshRequest, out *ListMeshResponse) error {
	return h.MeshManagerHandler.ListMesh(ctx, in, out)
}

func (h *meshManagerHandler) UpdateMesh(ctx context.Context, in *UpdateMeshRequest, out *UpdateMeshResponse) error {
	return h.MeshManagerHandler.UpdateMesh(ctx, in, out)
}

func (h *meshManagerHandler) DeleteMesh(ctx context.Context, in *DeleteMeshRequest, out *DeleteMeshResponse) error {
	return h.MeshManagerHandler.DeleteMesh(ctx, in, out)
}
