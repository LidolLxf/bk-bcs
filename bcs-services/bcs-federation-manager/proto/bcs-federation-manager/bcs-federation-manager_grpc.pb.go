// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.5
// source: proto/bcs-federation-manager/bcs-federation-manager.proto

package federationmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FederationManager_ListFederationClusterWithSubcluster_FullMethodName   = "/federationmanager.FederationManager/ListFederationClusterWithSubcluster"
	FederationManager_ListFederationClusterWithNamespace_FullMethodName    = "/federationmanager.FederationManager/ListFederationClusterWithNamespace"
	FederationManager_GetTask_FullMethodName                               = "/federationmanager.FederationManager/GetTask"
	FederationManager_ListTasks_FullMethodName                             = "/federationmanager.FederationManager/ListTasks"
	FederationManager_RetryTask_FullMethodName                             = "/federationmanager.FederationManager/RetryTask"
	FederationManager_GetTaskRecord_FullMethodName                         = "/federationmanager.FederationManager/GetTaskRecord"
	FederationManager_InstallFederation_FullMethodName                     = "/federationmanager.FederationManager/InstallFederation"
	FederationManager_UnInstallFederation_FullMethodName                   = "/federationmanager.FederationManager/UnInstallFederation"
	FederationManager_RegisterSubcluster_FullMethodName                    = "/federationmanager.FederationManager/RegisterSubcluster"
	FederationManager_RemoveSubcluster_FullMethodName                      = "/federationmanager.FederationManager/RemoveSubcluster"
	FederationManager_GetFederationCluster_FullMethodName                  = "/federationmanager.FederationManager/GetFederationCluster"
	FederationManager_GetFederationByHostCluster_FullMethodName            = "/federationmanager.FederationManager/GetFederationByHostCluster"
	FederationManager_ListProjectInstallingFederation_FullMethodName       = "/federationmanager.FederationManager/ListProjectInstallingFederation"
	FederationManager_ListProjectFederation_FullMethodName                 = "/federationmanager.FederationManager/ListProjectFederation"
	FederationManager_CreateFederationClusterNamespace_FullMethodName      = "/federationmanager.FederationManager/CreateFederationClusterNamespace"
	FederationManager_UpdateFederationClusterNamespace_FullMethodName      = "/federationmanager.FederationManager/UpdateFederationClusterNamespace"
	FederationManager_DeleteFederationClusterNamespace_FullMethodName      = "/federationmanager.FederationManager/DeleteFederationClusterNamespace"
	FederationManager_GetFederationClusterNamespace_FullMethodName         = "/federationmanager.FederationManager/GetFederationClusterNamespace"
	FederationManager_ListFederationClusterNamespace_FullMethodName        = "/federationmanager.FederationManager/ListFederationClusterNamespace"
	FederationManager_CreateFederationClusterNamespaceQuota_FullMethodName = "/federationmanager.FederationManager/CreateFederationClusterNamespaceQuota"
	FederationManager_UpdateFederationClusterNamespaceQuota_FullMethodName = "/federationmanager.FederationManager/UpdateFederationClusterNamespaceQuota"
	FederationManager_DeleteFederationClusterNamespaceQuota_FullMethodName = "/federationmanager.FederationManager/DeleteFederationClusterNamespaceQuota"
	FederationManager_GetFederationClusterNamespaceQuota_FullMethodName    = "/federationmanager.FederationManager/GetFederationClusterNamespaceQuota"
	FederationManager_ListFederationClusterNamespaceQuota_FullMethodName   = "/federationmanager.FederationManager/ListFederationClusterNamespaceQuota"
)

// FederationManagerClient is the client API for FederationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederationManagerClient interface {
	// 联邦拓扑查询接口
	ListFederationClusterWithSubcluster(ctx context.Context, in *ListFederationClusterWithSubclusterRequest, opts ...grpc.CallOption) (*ListFederationClusterWithSubclusterResponse, error)
	ListFederationClusterWithNamespace(ctx context.Context, in *ListFederationClusterWithNamespaceRequest, opts ...grpc.CallOption) (*ListFederationClusterWithNamespaceResponse, error)
	// 任务查询接口
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...grpc.CallOption) (*RetryTaskResponse, error)
	GetTaskRecord(ctx context.Context, in *GetTaskRecordRequest, opts ...grpc.CallOption) (*GetTaskRecordResponse, error)
	// 联邦管理接口
	InstallFederation(ctx context.Context, in *InstallFederationRequest, opts ...grpc.CallOption) (*InstallFederationResponse, error)
	UnInstallFederation(ctx context.Context, in *UnInstallFederationRequest, opts ...grpc.CallOption) (*UnInstallFederationResponse, error)
	RegisterSubcluster(ctx context.Context, in *RegisterSubclusterRequest, opts ...grpc.CallOption) (*RegisterSubclusterResponse, error)
	RemoveSubcluster(ctx context.Context, in *RemoveSubclusterRequest, opts ...grpc.CallOption) (*RemoveSubclusterResponse, error)
	// 联邦集群查询
	GetFederationCluster(ctx context.Context, in *GetFederationClusterRequest, opts ...grpc.CallOption) (*GetFederationClusterResponse, error)
	GetFederationByHostCluster(ctx context.Context, in *GetFederationByHostClusterRequest, opts ...grpc.CallOption) (*GetFederationByHostClusterResponse, error)
	ListProjectInstallingFederation(ctx context.Context, in *ListProjectInstallingFederationRequest, opts ...grpc.CallOption) (*ListProjectInstallingFederationResponse, error)
	ListProjectFederation(ctx context.Context, in *ListProjectFederationRequest, opts ...grpc.CallOption) (*ListProjectFederationResponse, error)
	// 联邦命名空间操作相关接口
	CreateFederationClusterNamespace(ctx context.Context, in *CreateFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*CreateFederationClusterNamespaceResponse, error)
	UpdateFederationClusterNamespace(ctx context.Context, in *UpdateFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*UpdateFederationClusterNamespaceResponse, error)
	DeleteFederationClusterNamespace(ctx context.Context, in *DeleteFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*DeleteFederationClusterNamespaceResponse, error)
	GetFederationClusterNamespace(ctx context.Context, in *GetFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*GetFederationClusterNamespaceResponse, error)
	ListFederationClusterNamespace(ctx context.Context, in *ListFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*ListFederationClusterNamespaceResponse, error)
	// 联邦命名空间quota相关操作接口
	CreateFederationClusterNamespaceQuota(ctx context.Context, in *CreateFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*CreateFederationClusterNamespaceQuotaResponse, error)
	UpdateFederationClusterNamespaceQuota(ctx context.Context, in *UpdateFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*UpdateFederationClusterNamespaceQuotaResponse, error)
	DeleteFederationClusterNamespaceQuota(ctx context.Context, in *DeleteFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*DeleteFederationClusterNamespaceQuotaResponse, error)
	GetFederationClusterNamespaceQuota(ctx context.Context, in *GetFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*GetFederationClusterNamespaceQuotaResponse, error)
	ListFederationClusterNamespaceQuota(ctx context.Context, in *ListFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*ListFederationClusterNamespaceQuotaResponse, error)
}

type federationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFederationManagerClient(cc grpc.ClientConnInterface) FederationManagerClient {
	return &federationManagerClient{cc}
}

func (c *federationManagerClient) ListFederationClusterWithSubcluster(ctx context.Context, in *ListFederationClusterWithSubclusterRequest, opts ...grpc.CallOption) (*ListFederationClusterWithSubclusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFederationClusterWithSubclusterResponse)
	err := c.cc.Invoke(ctx, FederationManager_ListFederationClusterWithSubcluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) ListFederationClusterWithNamespace(ctx context.Context, in *ListFederationClusterWithNamespaceRequest, opts ...grpc.CallOption) (*ListFederationClusterWithNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFederationClusterWithNamespaceResponse)
	err := c.cc.Invoke(ctx, FederationManager_ListFederationClusterWithNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, FederationManager_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, FederationManager_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...grpc.CallOption) (*RetryTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetryTaskResponse)
	err := c.cc.Invoke(ctx, FederationManager_RetryTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) GetTaskRecord(ctx context.Context, in *GetTaskRecordRequest, opts ...grpc.CallOption) (*GetTaskRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskRecordResponse)
	err := c.cc.Invoke(ctx, FederationManager_GetTaskRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) InstallFederation(ctx context.Context, in *InstallFederationRequest, opts ...grpc.CallOption) (*InstallFederationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallFederationResponse)
	err := c.cc.Invoke(ctx, FederationManager_InstallFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) UnInstallFederation(ctx context.Context, in *UnInstallFederationRequest, opts ...grpc.CallOption) (*UnInstallFederationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnInstallFederationResponse)
	err := c.cc.Invoke(ctx, FederationManager_UnInstallFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) RegisterSubcluster(ctx context.Context, in *RegisterSubclusterRequest, opts ...grpc.CallOption) (*RegisterSubclusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterSubclusterResponse)
	err := c.cc.Invoke(ctx, FederationManager_RegisterSubcluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) RemoveSubcluster(ctx context.Context, in *RemoveSubclusterRequest, opts ...grpc.CallOption) (*RemoveSubclusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSubclusterResponse)
	err := c.cc.Invoke(ctx, FederationManager_RemoveSubcluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) GetFederationCluster(ctx context.Context, in *GetFederationClusterRequest, opts ...grpc.CallOption) (*GetFederationClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFederationClusterResponse)
	err := c.cc.Invoke(ctx, FederationManager_GetFederationCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) GetFederationByHostCluster(ctx context.Context, in *GetFederationByHostClusterRequest, opts ...grpc.CallOption) (*GetFederationByHostClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFederationByHostClusterResponse)
	err := c.cc.Invoke(ctx, FederationManager_GetFederationByHostCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) ListProjectInstallingFederation(ctx context.Context, in *ListProjectInstallingFederationRequest, opts ...grpc.CallOption) (*ListProjectInstallingFederationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectInstallingFederationResponse)
	err := c.cc.Invoke(ctx, FederationManager_ListProjectInstallingFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) ListProjectFederation(ctx context.Context, in *ListProjectFederationRequest, opts ...grpc.CallOption) (*ListProjectFederationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectFederationResponse)
	err := c.cc.Invoke(ctx, FederationManager_ListProjectFederation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) CreateFederationClusterNamespace(ctx context.Context, in *CreateFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*CreateFederationClusterNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFederationClusterNamespaceResponse)
	err := c.cc.Invoke(ctx, FederationManager_CreateFederationClusterNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) UpdateFederationClusterNamespace(ctx context.Context, in *UpdateFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*UpdateFederationClusterNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFederationClusterNamespaceResponse)
	err := c.cc.Invoke(ctx, FederationManager_UpdateFederationClusterNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) DeleteFederationClusterNamespace(ctx context.Context, in *DeleteFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*DeleteFederationClusterNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFederationClusterNamespaceResponse)
	err := c.cc.Invoke(ctx, FederationManager_DeleteFederationClusterNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) GetFederationClusterNamespace(ctx context.Context, in *GetFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*GetFederationClusterNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFederationClusterNamespaceResponse)
	err := c.cc.Invoke(ctx, FederationManager_GetFederationClusterNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) ListFederationClusterNamespace(ctx context.Context, in *ListFederationClusterNamespaceRequest, opts ...grpc.CallOption) (*ListFederationClusterNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFederationClusterNamespaceResponse)
	err := c.cc.Invoke(ctx, FederationManager_ListFederationClusterNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) CreateFederationClusterNamespaceQuota(ctx context.Context, in *CreateFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*CreateFederationClusterNamespaceQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFederationClusterNamespaceQuotaResponse)
	err := c.cc.Invoke(ctx, FederationManager_CreateFederationClusterNamespaceQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) UpdateFederationClusterNamespaceQuota(ctx context.Context, in *UpdateFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*UpdateFederationClusterNamespaceQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFederationClusterNamespaceQuotaResponse)
	err := c.cc.Invoke(ctx, FederationManager_UpdateFederationClusterNamespaceQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) DeleteFederationClusterNamespaceQuota(ctx context.Context, in *DeleteFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*DeleteFederationClusterNamespaceQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFederationClusterNamespaceQuotaResponse)
	err := c.cc.Invoke(ctx, FederationManager_DeleteFederationClusterNamespaceQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) GetFederationClusterNamespaceQuota(ctx context.Context, in *GetFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*GetFederationClusterNamespaceQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFederationClusterNamespaceQuotaResponse)
	err := c.cc.Invoke(ctx, FederationManager_GetFederationClusterNamespaceQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerClient) ListFederationClusterNamespaceQuota(ctx context.Context, in *ListFederationClusterNamespaceQuotaRequest, opts ...grpc.CallOption) (*ListFederationClusterNamespaceQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFederationClusterNamespaceQuotaResponse)
	err := c.cc.Invoke(ctx, FederationManager_ListFederationClusterNamespaceQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederationManagerServer is the server API for FederationManager service.
// All implementations must embed UnimplementedFederationManagerServer
// for forward compatibility.
type FederationManagerServer interface {
	// 联邦拓扑查询接口
	ListFederationClusterWithSubcluster(context.Context, *ListFederationClusterWithSubclusterRequest) (*ListFederationClusterWithSubclusterResponse, error)
	ListFederationClusterWithNamespace(context.Context, *ListFederationClusterWithNamespaceRequest) (*ListFederationClusterWithNamespaceResponse, error)
	// 任务查询接口
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	RetryTask(context.Context, *RetryTaskRequest) (*RetryTaskResponse, error)
	GetTaskRecord(context.Context, *GetTaskRecordRequest) (*GetTaskRecordResponse, error)
	// 联邦管理接口
	InstallFederation(context.Context, *InstallFederationRequest) (*InstallFederationResponse, error)
	UnInstallFederation(context.Context, *UnInstallFederationRequest) (*UnInstallFederationResponse, error)
	RegisterSubcluster(context.Context, *RegisterSubclusterRequest) (*RegisterSubclusterResponse, error)
	RemoveSubcluster(context.Context, *RemoveSubclusterRequest) (*RemoveSubclusterResponse, error)
	// 联邦集群查询
	GetFederationCluster(context.Context, *GetFederationClusterRequest) (*GetFederationClusterResponse, error)
	GetFederationByHostCluster(context.Context, *GetFederationByHostClusterRequest) (*GetFederationByHostClusterResponse, error)
	ListProjectInstallingFederation(context.Context, *ListProjectInstallingFederationRequest) (*ListProjectInstallingFederationResponse, error)
	ListProjectFederation(context.Context, *ListProjectFederationRequest) (*ListProjectFederationResponse, error)
	// 联邦命名空间操作相关接口
	CreateFederationClusterNamespace(context.Context, *CreateFederationClusterNamespaceRequest) (*CreateFederationClusterNamespaceResponse, error)
	UpdateFederationClusterNamespace(context.Context, *UpdateFederationClusterNamespaceRequest) (*UpdateFederationClusterNamespaceResponse, error)
	DeleteFederationClusterNamespace(context.Context, *DeleteFederationClusterNamespaceRequest) (*DeleteFederationClusterNamespaceResponse, error)
	GetFederationClusterNamespace(context.Context, *GetFederationClusterNamespaceRequest) (*GetFederationClusterNamespaceResponse, error)
	ListFederationClusterNamespace(context.Context, *ListFederationClusterNamespaceRequest) (*ListFederationClusterNamespaceResponse, error)
	// 联邦命名空间quota相关操作接口
	CreateFederationClusterNamespaceQuota(context.Context, *CreateFederationClusterNamespaceQuotaRequest) (*CreateFederationClusterNamespaceQuotaResponse, error)
	UpdateFederationClusterNamespaceQuota(context.Context, *UpdateFederationClusterNamespaceQuotaRequest) (*UpdateFederationClusterNamespaceQuotaResponse, error)
	DeleteFederationClusterNamespaceQuota(context.Context, *DeleteFederationClusterNamespaceQuotaRequest) (*DeleteFederationClusterNamespaceQuotaResponse, error)
	GetFederationClusterNamespaceQuota(context.Context, *GetFederationClusterNamespaceQuotaRequest) (*GetFederationClusterNamespaceQuotaResponse, error)
	ListFederationClusterNamespaceQuota(context.Context, *ListFederationClusterNamespaceQuotaRequest) (*ListFederationClusterNamespaceQuotaResponse, error)
	mustEmbedUnimplementedFederationManagerServer()
}

// UnimplementedFederationManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFederationManagerServer struct{}

func (UnimplementedFederationManagerServer) ListFederationClusterWithSubcluster(context.Context, *ListFederationClusterWithSubclusterRequest) (*ListFederationClusterWithSubclusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFederationClusterWithSubcluster not implemented")
}
func (UnimplementedFederationManagerServer) ListFederationClusterWithNamespace(context.Context, *ListFederationClusterWithNamespaceRequest) (*ListFederationClusterWithNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFederationClusterWithNamespace not implemented")
}
func (UnimplementedFederationManagerServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedFederationManagerServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedFederationManagerServer) RetryTask(context.Context, *RetryTaskRequest) (*RetryTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryTask not implemented")
}
func (UnimplementedFederationManagerServer) GetTaskRecord(context.Context, *GetTaskRecordRequest) (*GetTaskRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRecord not implemented")
}
func (UnimplementedFederationManagerServer) InstallFederation(context.Context, *InstallFederationRequest) (*InstallFederationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallFederation not implemented")
}
func (UnimplementedFederationManagerServer) UnInstallFederation(context.Context, *UnInstallFederationRequest) (*UnInstallFederationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnInstallFederation not implemented")
}
func (UnimplementedFederationManagerServer) RegisterSubcluster(context.Context, *RegisterSubclusterRequest) (*RegisterSubclusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSubcluster not implemented")
}
func (UnimplementedFederationManagerServer) RemoveSubcluster(context.Context, *RemoveSubclusterRequest) (*RemoveSubclusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubcluster not implemented")
}
func (UnimplementedFederationManagerServer) GetFederationCluster(context.Context, *GetFederationClusterRequest) (*GetFederationClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFederationCluster not implemented")
}
func (UnimplementedFederationManagerServer) GetFederationByHostCluster(context.Context, *GetFederationByHostClusterRequest) (*GetFederationByHostClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFederationByHostCluster not implemented")
}
func (UnimplementedFederationManagerServer) ListProjectInstallingFederation(context.Context, *ListProjectInstallingFederationRequest) (*ListProjectInstallingFederationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectInstallingFederation not implemented")
}
func (UnimplementedFederationManagerServer) ListProjectFederation(context.Context, *ListProjectFederationRequest) (*ListProjectFederationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectFederation not implemented")
}
func (UnimplementedFederationManagerServer) CreateFederationClusterNamespace(context.Context, *CreateFederationClusterNamespaceRequest) (*CreateFederationClusterNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFederationClusterNamespace not implemented")
}
func (UnimplementedFederationManagerServer) UpdateFederationClusterNamespace(context.Context, *UpdateFederationClusterNamespaceRequest) (*UpdateFederationClusterNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFederationClusterNamespace not implemented")
}
func (UnimplementedFederationManagerServer) DeleteFederationClusterNamespace(context.Context, *DeleteFederationClusterNamespaceRequest) (*DeleteFederationClusterNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFederationClusterNamespace not implemented")
}
func (UnimplementedFederationManagerServer) GetFederationClusterNamespace(context.Context, *GetFederationClusterNamespaceRequest) (*GetFederationClusterNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFederationClusterNamespace not implemented")
}
func (UnimplementedFederationManagerServer) ListFederationClusterNamespace(context.Context, *ListFederationClusterNamespaceRequest) (*ListFederationClusterNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFederationClusterNamespace not implemented")
}
func (UnimplementedFederationManagerServer) CreateFederationClusterNamespaceQuota(context.Context, *CreateFederationClusterNamespaceQuotaRequest) (*CreateFederationClusterNamespaceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFederationClusterNamespaceQuota not implemented")
}
func (UnimplementedFederationManagerServer) UpdateFederationClusterNamespaceQuota(context.Context, *UpdateFederationClusterNamespaceQuotaRequest) (*UpdateFederationClusterNamespaceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFederationClusterNamespaceQuota not implemented")
}
func (UnimplementedFederationManagerServer) DeleteFederationClusterNamespaceQuota(context.Context, *DeleteFederationClusterNamespaceQuotaRequest) (*DeleteFederationClusterNamespaceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFederationClusterNamespaceQuota not implemented")
}
func (UnimplementedFederationManagerServer) GetFederationClusterNamespaceQuota(context.Context, *GetFederationClusterNamespaceQuotaRequest) (*GetFederationClusterNamespaceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFederationClusterNamespaceQuota not implemented")
}
func (UnimplementedFederationManagerServer) ListFederationClusterNamespaceQuota(context.Context, *ListFederationClusterNamespaceQuotaRequest) (*ListFederationClusterNamespaceQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFederationClusterNamespaceQuota not implemented")
}
func (UnimplementedFederationManagerServer) mustEmbedUnimplementedFederationManagerServer() {}
func (UnimplementedFederationManagerServer) testEmbeddedByValue()                           {}

// UnsafeFederationManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederationManagerServer will
// result in compilation errors.
type UnsafeFederationManagerServer interface {
	mustEmbedUnimplementedFederationManagerServer()
}

func RegisterFederationManagerServer(s grpc.ServiceRegistrar, srv FederationManagerServer) {
	// If the following call pancis, it indicates UnimplementedFederationManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FederationManager_ServiceDesc, srv)
}

func _FederationManager_ListFederationClusterWithSubcluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederationClusterWithSubclusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).ListFederationClusterWithSubcluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_ListFederationClusterWithSubcluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).ListFederationClusterWithSubcluster(ctx, req.(*ListFederationClusterWithSubclusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_ListFederationClusterWithNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederationClusterWithNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).ListFederationClusterWithNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_ListFederationClusterWithNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).ListFederationClusterWithNamespace(ctx, req.(*ListFederationClusterWithNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_RetryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).RetryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_RetryTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).RetryTask(ctx, req.(*RetryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_GetTaskRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).GetTaskRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_GetTaskRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).GetTaskRecord(ctx, req.(*GetTaskRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_InstallFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallFederationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).InstallFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_InstallFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).InstallFederation(ctx, req.(*InstallFederationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_UnInstallFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnInstallFederationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).UnInstallFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_UnInstallFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).UnInstallFederation(ctx, req.(*UnInstallFederationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_RegisterSubcluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSubclusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).RegisterSubcluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_RegisterSubcluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).RegisterSubcluster(ctx, req.(*RegisterSubclusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_RemoveSubcluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubclusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).RemoveSubcluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_RemoveSubcluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).RemoveSubcluster(ctx, req.(*RemoveSubclusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_GetFederationCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFederationClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).GetFederationCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_GetFederationCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).GetFederationCluster(ctx, req.(*GetFederationClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_GetFederationByHostCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFederationByHostClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).GetFederationByHostCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_GetFederationByHostCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).GetFederationByHostCluster(ctx, req.(*GetFederationByHostClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_ListProjectInstallingFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectInstallingFederationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).ListProjectInstallingFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_ListProjectInstallingFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).ListProjectInstallingFederation(ctx, req.(*ListProjectInstallingFederationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_ListProjectFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectFederationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).ListProjectFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_ListProjectFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).ListProjectFederation(ctx, req.(*ListProjectFederationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_CreateFederationClusterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederationClusterNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).CreateFederationClusterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_CreateFederationClusterNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).CreateFederationClusterNamespace(ctx, req.(*CreateFederationClusterNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_UpdateFederationClusterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFederationClusterNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).UpdateFederationClusterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_UpdateFederationClusterNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).UpdateFederationClusterNamespace(ctx, req.(*UpdateFederationClusterNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_DeleteFederationClusterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederationClusterNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).DeleteFederationClusterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_DeleteFederationClusterNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).DeleteFederationClusterNamespace(ctx, req.(*DeleteFederationClusterNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_GetFederationClusterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFederationClusterNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).GetFederationClusterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_GetFederationClusterNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).GetFederationClusterNamespace(ctx, req.(*GetFederationClusterNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_ListFederationClusterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederationClusterNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).ListFederationClusterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_ListFederationClusterNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).ListFederationClusterNamespace(ctx, req.(*ListFederationClusterNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_CreateFederationClusterNamespaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederationClusterNamespaceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).CreateFederationClusterNamespaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_CreateFederationClusterNamespaceQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).CreateFederationClusterNamespaceQuota(ctx, req.(*CreateFederationClusterNamespaceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_UpdateFederationClusterNamespaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFederationClusterNamespaceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).UpdateFederationClusterNamespaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_UpdateFederationClusterNamespaceQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).UpdateFederationClusterNamespaceQuota(ctx, req.(*UpdateFederationClusterNamespaceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_DeleteFederationClusterNamespaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederationClusterNamespaceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).DeleteFederationClusterNamespaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_DeleteFederationClusterNamespaceQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).DeleteFederationClusterNamespaceQuota(ctx, req.(*DeleteFederationClusterNamespaceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_GetFederationClusterNamespaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFederationClusterNamespaceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).GetFederationClusterNamespaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_GetFederationClusterNamespaceQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).GetFederationClusterNamespaceQuota(ctx, req.(*GetFederationClusterNamespaceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationManager_ListFederationClusterNamespaceQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederationClusterNamespaceQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationManagerServer).ListFederationClusterNamespaceQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationManager_ListFederationClusterNamespaceQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationManagerServer).ListFederationClusterNamespaceQuota(ctx, req.(*ListFederationClusterNamespaceQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FederationManager_ServiceDesc is the grpc.ServiceDesc for FederationManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FederationManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "federationmanager.FederationManager",
	HandlerType: (*FederationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFederationClusterWithSubcluster",
			Handler:    _FederationManager_ListFederationClusterWithSubcluster_Handler,
		},
		{
			MethodName: "ListFederationClusterWithNamespace",
			Handler:    _FederationManager_ListFederationClusterWithNamespace_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _FederationManager_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _FederationManager_ListTasks_Handler,
		},
		{
			MethodName: "RetryTask",
			Handler:    _FederationManager_RetryTask_Handler,
		},
		{
			MethodName: "GetTaskRecord",
			Handler:    _FederationManager_GetTaskRecord_Handler,
		},
		{
			MethodName: "InstallFederation",
			Handler:    _FederationManager_InstallFederation_Handler,
		},
		{
			MethodName: "UnInstallFederation",
			Handler:    _FederationManager_UnInstallFederation_Handler,
		},
		{
			MethodName: "RegisterSubcluster",
			Handler:    _FederationManager_RegisterSubcluster_Handler,
		},
		{
			MethodName: "RemoveSubcluster",
			Handler:    _FederationManager_RemoveSubcluster_Handler,
		},
		{
			MethodName: "GetFederationCluster",
			Handler:    _FederationManager_GetFederationCluster_Handler,
		},
		{
			MethodName: "GetFederationByHostCluster",
			Handler:    _FederationManager_GetFederationByHostCluster_Handler,
		},
		{
			MethodName: "ListProjectInstallingFederation",
			Handler:    _FederationManager_ListProjectInstallingFederation_Handler,
		},
		{
			MethodName: "ListProjectFederation",
			Handler:    _FederationManager_ListProjectFederation_Handler,
		},
		{
			MethodName: "CreateFederationClusterNamespace",
			Handler:    _FederationManager_CreateFederationClusterNamespace_Handler,
		},
		{
			MethodName: "UpdateFederationClusterNamespace",
			Handler:    _FederationManager_UpdateFederationClusterNamespace_Handler,
		},
		{
			MethodName: "DeleteFederationClusterNamespace",
			Handler:    _FederationManager_DeleteFederationClusterNamespace_Handler,
		},
		{
			MethodName: "GetFederationClusterNamespace",
			Handler:    _FederationManager_GetFederationClusterNamespace_Handler,
		},
		{
			MethodName: "ListFederationClusterNamespace",
			Handler:    _FederationManager_ListFederationClusterNamespace_Handler,
		},
		{
			MethodName: "CreateFederationClusterNamespaceQuota",
			Handler:    _FederationManager_CreateFederationClusterNamespaceQuota_Handler,
		},
		{
			MethodName: "UpdateFederationClusterNamespaceQuota",
			Handler:    _FederationManager_UpdateFederationClusterNamespaceQuota_Handler,
		},
		{
			MethodName: "DeleteFederationClusterNamespaceQuota",
			Handler:    _FederationManager_DeleteFederationClusterNamespaceQuota_Handler,
		},
		{
			MethodName: "GetFederationClusterNamespaceQuota",
			Handler:    _FederationManager_GetFederationClusterNamespaceQuota_Handler,
		},
		{
			MethodName: "ListFederationClusterNamespaceQuota",
			Handler:    _FederationManager_ListFederationClusterNamespaceQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-federation-manager/bcs-federation-manager.proto",
}
