// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/bcs-federation-manager/bcs-federation-manager.proto

package federationmanager

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FederationManager service

func NewFederationManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "FederationManager.ListFederationClusterWithSubcluster",
			Path:    []string{"/federationmanager/v1/clusters/all/sub_clusters"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.ListFederationClusterWithNamespace",
			Path:    []string{"/federationmanager/v1/clusters/all/namespaces"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.GetTask",
			Path:    []string{"/federationmanager/v1/tasks/{taskId}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.ListTasks",
			Path:    []string{"/federationmanager/v1/tasks"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.RetryTask",
			Path:    []string{"/federationmanager/v1/tasks/{taskId}/retry"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.GetTaskRecord",
			Path:    []string{"/federationmanager/v1/taskrecords/{taskId}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.InstallFederation",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/install"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.UnInstallFederation",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/uninstall"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.RegisterSubcluster",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/subcluster/{subclusterId}/add"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.RemoveSubcluster",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/subcluster/{subclusterId}/remove"},
			Method:  []string{"DELETE"},
			// Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.GetFederationCluster",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.GetFederationByHostCluster",
			Path:    []string{"/federationmanager/v1/hostcluster/{clusterId}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.ListProjectInstallingFederation",
			Path:    []string{"/federationmanager/v1/project/{projectId}/installing_clusters"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.ListProjectFederation",
			Path:    []string{"/federationmanager/v1/project/{projectId}/clusters"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.CreateFederationClusterNamespace",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.UpdateFederationClusterNamespace",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.DeleteFederationClusterNamespace",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}"},
			Method:  []string{"DELETE"},
			// Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.GetFederationClusterNamespace",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.ListFederationClusterNamespace",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespaces"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.CreateFederationClusterNamespaceQuota",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.UpdateFederationClusterNamespaceQuota",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota/{name}"},
			Method:  []string{"PUT"},
			// Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.DeleteFederationClusterNamespaceQuota",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota/{name}"},
			Method:  []string{"DELETE"},
			// Body:    "",
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.GetFederationClusterNamespaceQuota",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota/{name}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "FederationManager.ListFederationClusterNamespaceQuota",
			Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quotas"},
			Method:  []string{"POST"},
			// Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for FederationManager service

type FederationManagerService interface {
	// 联邦拓扑查询接口
	ListFederationClusterWithSubcluster(ctx context.Context, in *ListFederationClusterWithSubclusterRequest, opts ...client.CallOption) (*ListFederationClusterWithSubclusterResponse, error)
	ListFederationClusterWithNamespace(ctx context.Context, in *ListFederationClusterWithNamespaceRequest, opts ...client.CallOption) (*ListFederationClusterWithNamespaceResponse, error)
	// 任务查询接口
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...client.CallOption) (*ListTasksResponse, error)
	RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...client.CallOption) (*RetryTaskResponse, error)
	GetTaskRecord(ctx context.Context, in *GetTaskRecordRequest, opts ...client.CallOption) (*GetTaskRecordResponse, error)
	// 联邦管理接口
	InstallFederation(ctx context.Context, in *InstallFederationRequest, opts ...client.CallOption) (*InstallFederationResponse, error)
	UnInstallFederation(ctx context.Context, in *UnInstallFederationRequest, opts ...client.CallOption) (*UnInstallFederationResponse, error)
	RegisterSubcluster(ctx context.Context, in *RegisterSubclusterRequest, opts ...client.CallOption) (*RegisterSubclusterResponse, error)
	RemoveSubcluster(ctx context.Context, in *RemoveSubclusterRequest, opts ...client.CallOption) (*RemoveSubclusterResponse, error)
	// 联邦集群查询
	GetFederationCluster(ctx context.Context, in *GetFederationClusterRequest, opts ...client.CallOption) (*GetFederationClusterResponse, error)
	GetFederationByHostCluster(ctx context.Context, in *GetFederationByHostClusterRequest, opts ...client.CallOption) (*GetFederationByHostClusterResponse, error)
	ListProjectInstallingFederation(ctx context.Context, in *ListProjectInstallingFederationRequest, opts ...client.CallOption) (*ListProjectInstallingFederationResponse, error)
	ListProjectFederation(ctx context.Context, in *ListProjectFederationRequest, opts ...client.CallOption) (*ListProjectFederationResponse, error)
	// 联邦命名空间操作相关接口
	CreateFederationClusterNamespace(ctx context.Context, in *CreateFederationClusterNamespaceRequest, opts ...client.CallOption) (*CreateFederationClusterNamespaceResponse, error)
	UpdateFederationClusterNamespace(ctx context.Context, in *UpdateFederationClusterNamespaceRequest, opts ...client.CallOption) (*UpdateFederationClusterNamespaceResponse, error)
	DeleteFederationClusterNamespace(ctx context.Context, in *DeleteFederationClusterNamespaceRequest, opts ...client.CallOption) (*DeleteFederationClusterNamespaceResponse, error)
	GetFederationClusterNamespace(ctx context.Context, in *GetFederationClusterNamespaceRequest, opts ...client.CallOption) (*GetFederationClusterNamespaceResponse, error)
	ListFederationClusterNamespace(ctx context.Context, in *ListFederationClusterNamespaceRequest, opts ...client.CallOption) (*ListFederationClusterNamespaceResponse, error)
	// 联邦命名空间quota相关操作接口
	CreateFederationClusterNamespaceQuota(ctx context.Context, in *CreateFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*CreateFederationClusterNamespaceQuotaResponse, error)
	UpdateFederationClusterNamespaceQuota(ctx context.Context, in *UpdateFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*UpdateFederationClusterNamespaceQuotaResponse, error)
	DeleteFederationClusterNamespaceQuota(ctx context.Context, in *DeleteFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*DeleteFederationClusterNamespaceQuotaResponse, error)
	GetFederationClusterNamespaceQuota(ctx context.Context, in *GetFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*GetFederationClusterNamespaceQuotaResponse, error)
	ListFederationClusterNamespaceQuota(ctx context.Context, in *ListFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*ListFederationClusterNamespaceQuotaResponse, error)
}

type federationManagerService struct {
	c    client.Client
	name string
}

func NewFederationManagerService(name string, c client.Client) FederationManagerService {
	return &federationManagerService{
		c:    c,
		name: name,
	}
}

func (c *federationManagerService) ListFederationClusterWithSubcluster(ctx context.Context, in *ListFederationClusterWithSubclusterRequest, opts ...client.CallOption) (*ListFederationClusterWithSubclusterResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.ListFederationClusterWithSubcluster", in)
	out := new(ListFederationClusterWithSubclusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) ListFederationClusterWithNamespace(ctx context.Context, in *ListFederationClusterWithNamespaceRequest, opts ...client.CallOption) (*ListFederationClusterWithNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.ListFederationClusterWithNamespace", in)
	out := new(ListFederationClusterWithNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) GetTask(ctx context.Context, in *GetTaskRequest, opts ...client.CallOption) (*GetTaskResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.GetTask", in)
	out := new(GetTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...client.CallOption) (*ListTasksResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.ListTasks", in)
	out := new(ListTasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) RetryTask(ctx context.Context, in *RetryTaskRequest, opts ...client.CallOption) (*RetryTaskResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.RetryTask", in)
	out := new(RetryTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) GetTaskRecord(ctx context.Context, in *GetTaskRecordRequest, opts ...client.CallOption) (*GetTaskRecordResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.GetTaskRecord", in)
	out := new(GetTaskRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) InstallFederation(ctx context.Context, in *InstallFederationRequest, opts ...client.CallOption) (*InstallFederationResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.InstallFederation", in)
	out := new(InstallFederationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) UnInstallFederation(ctx context.Context, in *UnInstallFederationRequest, opts ...client.CallOption) (*UnInstallFederationResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.UnInstallFederation", in)
	out := new(UnInstallFederationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) RegisterSubcluster(ctx context.Context, in *RegisterSubclusterRequest, opts ...client.CallOption) (*RegisterSubclusterResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.RegisterSubcluster", in)
	out := new(RegisterSubclusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) RemoveSubcluster(ctx context.Context, in *RemoveSubclusterRequest, opts ...client.CallOption) (*RemoveSubclusterResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.RemoveSubcluster", in)
	out := new(RemoveSubclusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) GetFederationCluster(ctx context.Context, in *GetFederationClusterRequest, opts ...client.CallOption) (*GetFederationClusterResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.GetFederationCluster", in)
	out := new(GetFederationClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) GetFederationByHostCluster(ctx context.Context, in *GetFederationByHostClusterRequest, opts ...client.CallOption) (*GetFederationByHostClusterResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.GetFederationByHostCluster", in)
	out := new(GetFederationByHostClusterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) ListProjectInstallingFederation(ctx context.Context, in *ListProjectInstallingFederationRequest, opts ...client.CallOption) (*ListProjectInstallingFederationResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.ListProjectInstallingFederation", in)
	out := new(ListProjectInstallingFederationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) ListProjectFederation(ctx context.Context, in *ListProjectFederationRequest, opts ...client.CallOption) (*ListProjectFederationResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.ListProjectFederation", in)
	out := new(ListProjectFederationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) CreateFederationClusterNamespace(ctx context.Context, in *CreateFederationClusterNamespaceRequest, opts ...client.CallOption) (*CreateFederationClusterNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.CreateFederationClusterNamespace", in)
	out := new(CreateFederationClusterNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) UpdateFederationClusterNamespace(ctx context.Context, in *UpdateFederationClusterNamespaceRequest, opts ...client.CallOption) (*UpdateFederationClusterNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.UpdateFederationClusterNamespace", in)
	out := new(UpdateFederationClusterNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) DeleteFederationClusterNamespace(ctx context.Context, in *DeleteFederationClusterNamespaceRequest, opts ...client.CallOption) (*DeleteFederationClusterNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.DeleteFederationClusterNamespace", in)
	out := new(DeleteFederationClusterNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) GetFederationClusterNamespace(ctx context.Context, in *GetFederationClusterNamespaceRequest, opts ...client.CallOption) (*GetFederationClusterNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.GetFederationClusterNamespace", in)
	out := new(GetFederationClusterNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) ListFederationClusterNamespace(ctx context.Context, in *ListFederationClusterNamespaceRequest, opts ...client.CallOption) (*ListFederationClusterNamespaceResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.ListFederationClusterNamespace", in)
	out := new(ListFederationClusterNamespaceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) CreateFederationClusterNamespaceQuota(ctx context.Context, in *CreateFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*CreateFederationClusterNamespaceQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.CreateFederationClusterNamespaceQuota", in)
	out := new(CreateFederationClusterNamespaceQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) UpdateFederationClusterNamespaceQuota(ctx context.Context, in *UpdateFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*UpdateFederationClusterNamespaceQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.UpdateFederationClusterNamespaceQuota", in)
	out := new(UpdateFederationClusterNamespaceQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) DeleteFederationClusterNamespaceQuota(ctx context.Context, in *DeleteFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*DeleteFederationClusterNamespaceQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.DeleteFederationClusterNamespaceQuota", in)
	out := new(DeleteFederationClusterNamespaceQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) GetFederationClusterNamespaceQuota(ctx context.Context, in *GetFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*GetFederationClusterNamespaceQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.GetFederationClusterNamespaceQuota", in)
	out := new(GetFederationClusterNamespaceQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationManagerService) ListFederationClusterNamespaceQuota(ctx context.Context, in *ListFederationClusterNamespaceQuotaRequest, opts ...client.CallOption) (*ListFederationClusterNamespaceQuotaResponse, error) {
	req := c.c.NewRequest(c.name, "FederationManager.ListFederationClusterNamespaceQuota", in)
	out := new(ListFederationClusterNamespaceQuotaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FederationManager service

type FederationManagerHandler interface {
	// 联邦拓扑查询接口
	ListFederationClusterWithSubcluster(context.Context, *ListFederationClusterWithSubclusterRequest, *ListFederationClusterWithSubclusterResponse) error
	ListFederationClusterWithNamespace(context.Context, *ListFederationClusterWithNamespaceRequest, *ListFederationClusterWithNamespaceResponse) error
	// 任务查询接口
	GetTask(context.Context, *GetTaskRequest, *GetTaskResponse) error
	ListTasks(context.Context, *ListTasksRequest, *ListTasksResponse) error
	RetryTask(context.Context, *RetryTaskRequest, *RetryTaskResponse) error
	GetTaskRecord(context.Context, *GetTaskRecordRequest, *GetTaskRecordResponse) error
	// 联邦管理接口
	InstallFederation(context.Context, *InstallFederationRequest, *InstallFederationResponse) error
	UnInstallFederation(context.Context, *UnInstallFederationRequest, *UnInstallFederationResponse) error
	RegisterSubcluster(context.Context, *RegisterSubclusterRequest, *RegisterSubclusterResponse) error
	RemoveSubcluster(context.Context, *RemoveSubclusterRequest, *RemoveSubclusterResponse) error
	// 联邦集群查询
	GetFederationCluster(context.Context, *GetFederationClusterRequest, *GetFederationClusterResponse) error
	GetFederationByHostCluster(context.Context, *GetFederationByHostClusterRequest, *GetFederationByHostClusterResponse) error
	ListProjectInstallingFederation(context.Context, *ListProjectInstallingFederationRequest, *ListProjectInstallingFederationResponse) error
	ListProjectFederation(context.Context, *ListProjectFederationRequest, *ListProjectFederationResponse) error
	// 联邦命名空间操作相关接口
	CreateFederationClusterNamespace(context.Context, *CreateFederationClusterNamespaceRequest, *CreateFederationClusterNamespaceResponse) error
	UpdateFederationClusterNamespace(context.Context, *UpdateFederationClusterNamespaceRequest, *UpdateFederationClusterNamespaceResponse) error
	DeleteFederationClusterNamespace(context.Context, *DeleteFederationClusterNamespaceRequest, *DeleteFederationClusterNamespaceResponse) error
	GetFederationClusterNamespace(context.Context, *GetFederationClusterNamespaceRequest, *GetFederationClusterNamespaceResponse) error
	ListFederationClusterNamespace(context.Context, *ListFederationClusterNamespaceRequest, *ListFederationClusterNamespaceResponse) error
	// 联邦命名空间quota相关操作接口
	CreateFederationClusterNamespaceQuota(context.Context, *CreateFederationClusterNamespaceQuotaRequest, *CreateFederationClusterNamespaceQuotaResponse) error
	UpdateFederationClusterNamespaceQuota(context.Context, *UpdateFederationClusterNamespaceQuotaRequest, *UpdateFederationClusterNamespaceQuotaResponse) error
	DeleteFederationClusterNamespaceQuota(context.Context, *DeleteFederationClusterNamespaceQuotaRequest, *DeleteFederationClusterNamespaceQuotaResponse) error
	GetFederationClusterNamespaceQuota(context.Context, *GetFederationClusterNamespaceQuotaRequest, *GetFederationClusterNamespaceQuotaResponse) error
	ListFederationClusterNamespaceQuota(context.Context, *ListFederationClusterNamespaceQuotaRequest, *ListFederationClusterNamespaceQuotaResponse) error
}

func RegisterFederationManagerHandler(s server.Server, hdlr FederationManagerHandler, opts ...server.HandlerOption) error {
	type federationManager interface {
		ListFederationClusterWithSubcluster(ctx context.Context, in *ListFederationClusterWithSubclusterRequest, out *ListFederationClusterWithSubclusterResponse) error
		ListFederationClusterWithNamespace(ctx context.Context, in *ListFederationClusterWithNamespaceRequest, out *ListFederationClusterWithNamespaceResponse) error
		GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error
		ListTasks(ctx context.Context, in *ListTasksRequest, out *ListTasksResponse) error
		RetryTask(ctx context.Context, in *RetryTaskRequest, out *RetryTaskResponse) error
		GetTaskRecord(ctx context.Context, in *GetTaskRecordRequest, out *GetTaskRecordResponse) error
		InstallFederation(ctx context.Context, in *InstallFederationRequest, out *InstallFederationResponse) error
		UnInstallFederation(ctx context.Context, in *UnInstallFederationRequest, out *UnInstallFederationResponse) error
		RegisterSubcluster(ctx context.Context, in *RegisterSubclusterRequest, out *RegisterSubclusterResponse) error
		RemoveSubcluster(ctx context.Context, in *RemoveSubclusterRequest, out *RemoveSubclusterResponse) error
		GetFederationCluster(ctx context.Context, in *GetFederationClusterRequest, out *GetFederationClusterResponse) error
		GetFederationByHostCluster(ctx context.Context, in *GetFederationByHostClusterRequest, out *GetFederationByHostClusterResponse) error
		ListProjectInstallingFederation(ctx context.Context, in *ListProjectInstallingFederationRequest, out *ListProjectInstallingFederationResponse) error
		ListProjectFederation(ctx context.Context, in *ListProjectFederationRequest, out *ListProjectFederationResponse) error
		CreateFederationClusterNamespace(ctx context.Context, in *CreateFederationClusterNamespaceRequest, out *CreateFederationClusterNamespaceResponse) error
		UpdateFederationClusterNamespace(ctx context.Context, in *UpdateFederationClusterNamespaceRequest, out *UpdateFederationClusterNamespaceResponse) error
		DeleteFederationClusterNamespace(ctx context.Context, in *DeleteFederationClusterNamespaceRequest, out *DeleteFederationClusterNamespaceResponse) error
		GetFederationClusterNamespace(ctx context.Context, in *GetFederationClusterNamespaceRequest, out *GetFederationClusterNamespaceResponse) error
		ListFederationClusterNamespace(ctx context.Context, in *ListFederationClusterNamespaceRequest, out *ListFederationClusterNamespaceResponse) error
		CreateFederationClusterNamespaceQuota(ctx context.Context, in *CreateFederationClusterNamespaceQuotaRequest, out *CreateFederationClusterNamespaceQuotaResponse) error
		UpdateFederationClusterNamespaceQuota(ctx context.Context, in *UpdateFederationClusterNamespaceQuotaRequest, out *UpdateFederationClusterNamespaceQuotaResponse) error
		DeleteFederationClusterNamespaceQuota(ctx context.Context, in *DeleteFederationClusterNamespaceQuotaRequest, out *DeleteFederationClusterNamespaceQuotaResponse) error
		GetFederationClusterNamespaceQuota(ctx context.Context, in *GetFederationClusterNamespaceQuotaRequest, out *GetFederationClusterNamespaceQuotaResponse) error
		ListFederationClusterNamespaceQuota(ctx context.Context, in *ListFederationClusterNamespaceQuotaRequest, out *ListFederationClusterNamespaceQuotaResponse) error
	}
	type FederationManager struct {
		federationManager
	}
	h := &federationManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.ListFederationClusterWithSubcluster",
		Path:    []string{"/federationmanager/v1/clusters/all/sub_clusters"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.ListFederationClusterWithNamespace",
		Path:    []string{"/federationmanager/v1/clusters/all/namespaces"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.GetTask",
		Path:    []string{"/federationmanager/v1/tasks/{taskId}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.ListTasks",
		Path:    []string{"/federationmanager/v1/tasks"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.RetryTask",
		Path:    []string{"/federationmanager/v1/tasks/{taskId}/retry"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.GetTaskRecord",
		Path:    []string{"/federationmanager/v1/taskrecords/{taskId}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.InstallFederation",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/install"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.UnInstallFederation",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/uninstall"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.RegisterSubcluster",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/subcluster/{subclusterId}/add"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.RemoveSubcluster",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/subcluster/{subclusterId}/remove"},
		Method:  []string{"DELETE"},
		// Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.GetFederationCluster",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.GetFederationByHostCluster",
		Path:    []string{"/federationmanager/v1/hostcluster/{clusterId}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.ListProjectInstallingFederation",
		Path:    []string{"/federationmanager/v1/project/{projectId}/installing_clusters"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.ListProjectFederation",
		Path:    []string{"/federationmanager/v1/project/{projectId}/clusters"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.CreateFederationClusterNamespace",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.UpdateFederationClusterNamespace",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.DeleteFederationClusterNamespace",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}"},
		Method:  []string{"DELETE"},
		// Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.GetFederationClusterNamespace",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.ListFederationClusterNamespace",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespaces"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.CreateFederationClusterNamespaceQuota",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.UpdateFederationClusterNamespaceQuota",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota/{name}"},
		Method:  []string{"PUT"},
		// Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.DeleteFederationClusterNamespaceQuota",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota/{name}"},
		Method:  []string{"DELETE"},
		// Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.GetFederationClusterNamespaceQuota",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quota/{name}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "FederationManager.ListFederationClusterNamespaceQuota",
		Path:    []string{"/federationmanager/v1/cluster/{clusterId}/namespace/{namespace}/quotas"},
		Method:  []string{"POST"},
		// Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&FederationManager{h}, opts...))
}

type federationManagerHandler struct {
	FederationManagerHandler
}

func (h *federationManagerHandler) ListFederationClusterWithSubcluster(ctx context.Context, in *ListFederationClusterWithSubclusterRequest, out *ListFederationClusterWithSubclusterResponse) error {
	return h.FederationManagerHandler.ListFederationClusterWithSubcluster(ctx, in, out)
}

func (h *federationManagerHandler) ListFederationClusterWithNamespace(ctx context.Context, in *ListFederationClusterWithNamespaceRequest, out *ListFederationClusterWithNamespaceResponse) error {
	return h.FederationManagerHandler.ListFederationClusterWithNamespace(ctx, in, out)
}

func (h *federationManagerHandler) GetTask(ctx context.Context, in *GetTaskRequest, out *GetTaskResponse) error {
	return h.FederationManagerHandler.GetTask(ctx, in, out)
}

func (h *federationManagerHandler) ListTasks(ctx context.Context, in *ListTasksRequest, out *ListTasksResponse) error {
	return h.FederationManagerHandler.ListTasks(ctx, in, out)
}

func (h *federationManagerHandler) RetryTask(ctx context.Context, in *RetryTaskRequest, out *RetryTaskResponse) error {
	return h.FederationManagerHandler.RetryTask(ctx, in, out)
}

func (h *federationManagerHandler) GetTaskRecord(ctx context.Context, in *GetTaskRecordRequest, out *GetTaskRecordResponse) error {
	return h.FederationManagerHandler.GetTaskRecord(ctx, in, out)
}

func (h *federationManagerHandler) InstallFederation(ctx context.Context, in *InstallFederationRequest, out *InstallFederationResponse) error {
	return h.FederationManagerHandler.InstallFederation(ctx, in, out)
}

func (h *federationManagerHandler) UnInstallFederation(ctx context.Context, in *UnInstallFederationRequest, out *UnInstallFederationResponse) error {
	return h.FederationManagerHandler.UnInstallFederation(ctx, in, out)
}

func (h *federationManagerHandler) RegisterSubcluster(ctx context.Context, in *RegisterSubclusterRequest, out *RegisterSubclusterResponse) error {
	return h.FederationManagerHandler.RegisterSubcluster(ctx, in, out)
}

func (h *federationManagerHandler) RemoveSubcluster(ctx context.Context, in *RemoveSubclusterRequest, out *RemoveSubclusterResponse) error {
	return h.FederationManagerHandler.RemoveSubcluster(ctx, in, out)
}

func (h *federationManagerHandler) GetFederationCluster(ctx context.Context, in *GetFederationClusterRequest, out *GetFederationClusterResponse) error {
	return h.FederationManagerHandler.GetFederationCluster(ctx, in, out)
}

func (h *federationManagerHandler) GetFederationByHostCluster(ctx context.Context, in *GetFederationByHostClusterRequest, out *GetFederationByHostClusterResponse) error {
	return h.FederationManagerHandler.GetFederationByHostCluster(ctx, in, out)
}

func (h *federationManagerHandler) ListProjectInstallingFederation(ctx context.Context, in *ListProjectInstallingFederationRequest, out *ListProjectInstallingFederationResponse) error {
	return h.FederationManagerHandler.ListProjectInstallingFederation(ctx, in, out)
}

func (h *federationManagerHandler) ListProjectFederation(ctx context.Context, in *ListProjectFederationRequest, out *ListProjectFederationResponse) error {
	return h.FederationManagerHandler.ListProjectFederation(ctx, in, out)
}

func (h *federationManagerHandler) CreateFederationClusterNamespace(ctx context.Context, in *CreateFederationClusterNamespaceRequest, out *CreateFederationClusterNamespaceResponse) error {
	return h.FederationManagerHandler.CreateFederationClusterNamespace(ctx, in, out)
}

func (h *federationManagerHandler) UpdateFederationClusterNamespace(ctx context.Context, in *UpdateFederationClusterNamespaceRequest, out *UpdateFederationClusterNamespaceResponse) error {
	return h.FederationManagerHandler.UpdateFederationClusterNamespace(ctx, in, out)
}

func (h *federationManagerHandler) DeleteFederationClusterNamespace(ctx context.Context, in *DeleteFederationClusterNamespaceRequest, out *DeleteFederationClusterNamespaceResponse) error {
	return h.FederationManagerHandler.DeleteFederationClusterNamespace(ctx, in, out)
}

func (h *federationManagerHandler) GetFederationClusterNamespace(ctx context.Context, in *GetFederationClusterNamespaceRequest, out *GetFederationClusterNamespaceResponse) error {
	return h.FederationManagerHandler.GetFederationClusterNamespace(ctx, in, out)
}

func (h *federationManagerHandler) ListFederationClusterNamespace(ctx context.Context, in *ListFederationClusterNamespaceRequest, out *ListFederationClusterNamespaceResponse) error {
	return h.FederationManagerHandler.ListFederationClusterNamespace(ctx, in, out)
}

func (h *federationManagerHandler) CreateFederationClusterNamespaceQuota(ctx context.Context, in *CreateFederationClusterNamespaceQuotaRequest, out *CreateFederationClusterNamespaceQuotaResponse) error {
	return h.FederationManagerHandler.CreateFederationClusterNamespaceQuota(ctx, in, out)
}

func (h *federationManagerHandler) UpdateFederationClusterNamespaceQuota(ctx context.Context, in *UpdateFederationClusterNamespaceQuotaRequest, out *UpdateFederationClusterNamespaceQuotaResponse) error {
	return h.FederationManagerHandler.UpdateFederationClusterNamespaceQuota(ctx, in, out)
}

func (h *federationManagerHandler) DeleteFederationClusterNamespaceQuota(ctx context.Context, in *DeleteFederationClusterNamespaceQuotaRequest, out *DeleteFederationClusterNamespaceQuotaResponse) error {
	return h.FederationManagerHandler.DeleteFederationClusterNamespaceQuota(ctx, in, out)
}

func (h *federationManagerHandler) GetFederationClusterNamespaceQuota(ctx context.Context, in *GetFederationClusterNamespaceQuotaRequest, out *GetFederationClusterNamespaceQuotaResponse) error {
	return h.FederationManagerHandler.GetFederationClusterNamespaceQuota(ctx, in, out)
}

func (h *federationManagerHandler) ListFederationClusterNamespaceQuota(ctx context.Context, in *ListFederationClusterNamespaceQuotaRequest, out *ListFederationClusterNamespaceQuotaResponse) error {
	return h.FederationManagerHandler.ListFederationClusterNamespaceQuota(ctx, in, out)
}
