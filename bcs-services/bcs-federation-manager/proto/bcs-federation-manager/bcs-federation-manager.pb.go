// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: proto/bcs-federation-manager/bcs-federation-manager.proto

package federationmanager

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateFederationClusterNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string                       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace       string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Annotations     map[string]string            `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterAffinity *NamespaceSubClusterAffinity `protobuf:"bytes,4,opt,name=clusterAffinity,proto3" json:"clusterAffinity,omitempty"`
	QuotaList       []*Quota                     `protobuf:"bytes,5,rep,name=quotaList,proto3" json:"quotaList,omitempty"`
	Creator         string                       `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *CreateFederationClusterNamespaceRequest) Reset() {
	*x = CreateFederationClusterNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFederationClusterNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFederationClusterNamespaceRequest) ProtoMessage() {}

func (x *CreateFederationClusterNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFederationClusterNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateFederationClusterNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFederationClusterNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateFederationClusterNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateFederationClusterNamespaceRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateFederationClusterNamespaceRequest) GetClusterAffinity() *NamespaceSubClusterAffinity {
	if x != nil {
		return x.ClusterAffinity
	}
	return nil
}

func (x *CreateFederationClusterNamespaceRequest) GetQuotaList() []*Quota {
	if x != nil {
		return x.QuotaList
	}
	return nil
}

func (x *CreateFederationClusterNamespaceRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type NamespaceSubClusterAffinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode          string         `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	LabelSelector *LabelSelector `protobuf:"bytes,2,opt,name=labelSelector,proto3,oneof" json:"labelSelector,omitempty"`
}

func (x *NamespaceSubClusterAffinity) Reset() {
	*x = NamespaceSubClusterAffinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceSubClusterAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceSubClusterAffinity) ProtoMessage() {}

func (x *NamespaceSubClusterAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceSubClusterAffinity.ProtoReflect.Descriptor instead.
func (*NamespaceSubClusterAffinity) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{1}
}

func (x *NamespaceSubClusterAffinity) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NamespaceSubClusterAffinity) GetLabelSelector() *LabelSelector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels      map[string]string           `protobuf:"bytes,1,rep,name=matchLabels,proto3" json:"matchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=matchExpressions,proto3" json:"matchExpressions,omitempty"`
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{2}
}

func (x *LabelSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

type LabelSelectorRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator string   `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Values   []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{3}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type K8SResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName     string `protobuf:"bytes,1,opt,name=ResourceName,json=resourceName,proto3" json:"ResourceName,omitempty"`
	ResourceQuantity string `protobuf:"bytes,2,opt,name=ResourceQuantity,json=resourceQuantity,proto3" json:"ResourceQuantity,omitempty"`
}

func (x *K8SResource) Reset() {
	*x = K8SResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SResource) ProtoMessage() {}

func (x *K8SResource) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SResource.ProtoReflect.Descriptor instead.
func (*K8SResource) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{4}
}

func (x *K8SResource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *K8SResource) GetResourceQuantity() string {
	if x != nil {
		return x.ResourceQuantity
	}
	return ""
}

type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attributes    map[string]string `protobuf:"bytes,2,rep,name=Attributes,json=attributes,proto3" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourceList  []*K8SResource    `protobuf:"bytes,3,rep,name=ResourceList,json=resourceList,proto3" json:"ResourceList,omitempty"`
	OriginK8SData *string           `protobuf:"bytes,4,opt,name=originK8sData,proto3,oneof" json:"originK8sData,omitempty"`
	Annotations   map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{5}
}

func (x *Quota) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Quota) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Quota) GetResourceList() []*K8SResource {
	if x != nil {
		return x.ResourceList
	}
	return nil
}

func (x *Quota) GetOriginK8SData() string {
	if x != nil && x.OriginK8SData != nil {
		return *x.OriginK8SData
	}
	return ""
}

func (x *Quota) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type CreateFederationClusterNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,3,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateFederationClusterNamespaceResponse) Reset() {
	*x = CreateFederationClusterNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFederationClusterNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFederationClusterNamespaceResponse) ProtoMessage() {}

func (x *CreateFederationClusterNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFederationClusterNamespaceResponse.ProtoReflect.Descriptor instead.
func (*CreateFederationClusterNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFederationClusterNamespaceResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateFederationClusterNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateFederationClusterNamespaceResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateFederationClusterNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string                       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace       string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Annotations     map[string]string            `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterAffinity *NamespaceSubClusterAffinity `protobuf:"bytes,4,opt,name=clusterAffinity,proto3" json:"clusterAffinity,omitempty"`
	Operator        string                       `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateFederationClusterNamespaceRequest) Reset() {
	*x = UpdateFederationClusterNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFederationClusterNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFederationClusterNamespaceRequest) ProtoMessage() {}

func (x *UpdateFederationClusterNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFederationClusterNamespaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateFederationClusterNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFederationClusterNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateFederationClusterNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateFederationClusterNamespaceRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateFederationClusterNamespaceRequest) GetClusterAffinity() *NamespaceSubClusterAffinity {
	if x != nil {
		return x.ClusterAffinity
	}
	return nil
}

func (x *UpdateFederationClusterNamespaceRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateFederationClusterNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,3,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateFederationClusterNamespaceResponse) Reset() {
	*x = UpdateFederationClusterNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFederationClusterNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFederationClusterNamespaceResponse) ProtoMessage() {}

func (x *UpdateFederationClusterNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFederationClusterNamespaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateFederationClusterNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFederationClusterNamespaceResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateFederationClusterNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateFederationClusterNamespaceResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteFederationClusterNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Operator  string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *DeleteFederationClusterNamespaceRequest) Reset() {
	*x = DeleteFederationClusterNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationClusterNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationClusterNamespaceRequest) ProtoMessage() {}

func (x *DeleteFederationClusterNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationClusterNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteFederationClusterNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFederationClusterNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteFederationClusterNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteFederationClusterNamespaceRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type DeleteFederationClusterNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,3,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteFederationClusterNamespaceResponse) Reset() {
	*x = DeleteFederationClusterNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationClusterNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationClusterNamespaceResponse) ProtoMessage() {}

func (x *DeleteFederationClusterNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationClusterNamespaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteFederationClusterNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteFederationClusterNamespaceResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DeleteFederationClusterNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteFederationClusterNamespaceResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type FederationClusterNamespaceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId       string                       `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace       string                       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Annotations     map[string]string            `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterAffinity *NamespaceSubClusterAffinity `protobuf:"bytes,4,opt,name=clusterAffinity,proto3" json:"clusterAffinity,omitempty"`
	State           string                       `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	CreateTime      string                       `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime      string                       `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	OriginK8SData   *string                      `protobuf:"bytes,8,opt,name=originK8sData,proto3,oneof" json:"originK8sData,omitempty"`
}

func (x *FederationClusterNamespaceData) Reset() {
	*x = FederationClusterNamespaceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederationClusterNamespaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederationClusterNamespaceData) ProtoMessage() {}

func (x *FederationClusterNamespaceData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederationClusterNamespaceData.ProtoReflect.Descriptor instead.
func (*FederationClusterNamespaceData) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{11}
}

func (x *FederationClusterNamespaceData) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *FederationClusterNamespaceData) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FederationClusterNamespaceData) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *FederationClusterNamespaceData) GetClusterAffinity() *NamespaceSubClusterAffinity {
	if x != nil {
		return x.ClusterAffinity
	}
	return nil
}

func (x *FederationClusterNamespaceData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FederationClusterNamespaceData) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *FederationClusterNamespaceData) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *FederationClusterNamespaceData) GetOriginK8SData() string {
	if x != nil && x.OriginK8SData != nil {
		return *x.OriginK8SData
	}
	return ""
}

type GetFederationClusterNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *GetFederationClusterNamespaceRequest) Reset() {
	*x = GetFederationClusterNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationClusterNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationClusterNamespaceRequest) ProtoMessage() {}

func (x *GetFederationClusterNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationClusterNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetFederationClusterNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{12}
}

func (x *GetFederationClusterNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetFederationClusterNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type GetFederationClusterNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *FederationClusterNamespaceData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations                 `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetFederationClusterNamespaceResponse) Reset() {
	*x = GetFederationClusterNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationClusterNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationClusterNamespaceResponse) ProtoMessage() {}

func (x *GetFederationClusterNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationClusterNamespaceResponse.ProtoReflect.Descriptor instead.
func (*GetFederationClusterNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{13}
}

func (x *GetFederationClusterNamespaceResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetFederationClusterNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetFederationClusterNamespaceResponse) GetData() *FederationClusterNamespaceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetFederationClusterNamespaceResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListFederationClusterNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *ListFederationClusterNamespaceRequest) Reset() {
	*x = ListFederationClusterNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterNamespaceRequest) ProtoMessage() {}

func (x *ListFederationClusterNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListFederationClusterNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{14}
}

func (x *ListFederationClusterNamespaceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListFederationClusterNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                           `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*FederationClusterNamespaceData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations                   `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListFederationClusterNamespaceResponse) Reset() {
	*x = ListFederationClusterNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterNamespaceResponse) ProtoMessage() {}

func (x *ListFederationClusterNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListFederationClusterNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ListFederationClusterNamespaceResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListFederationClusterNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListFederationClusterNamespaceResponse) GetData() []*FederationClusterNamespaceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListFederationClusterNamespaceResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type CreateFederationClusterNamespaceQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	QuotaList []*Quota `protobuf:"bytes,3,rep,name=quotaList,proto3" json:"quotaList,omitempty"`
	Operator  string   `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CreateFederationClusterNamespaceQuotaRequest) Reset() {
	*x = CreateFederationClusterNamespaceQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFederationClusterNamespaceQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFederationClusterNamespaceQuotaRequest) ProtoMessage() {}

func (x *CreateFederationClusterNamespaceQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFederationClusterNamespaceQuotaRequest.ProtoReflect.Descriptor instead.
func (*CreateFederationClusterNamespaceQuotaRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{16}
}

func (x *CreateFederationClusterNamespaceQuotaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateFederationClusterNamespaceQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateFederationClusterNamespaceQuotaRequest) GetQuotaList() []*Quota {
	if x != nil {
		return x.QuotaList
	}
	return nil
}

func (x *CreateFederationClusterNamespaceQuotaRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type CreateFederationClusterNamespaceQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,3,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *CreateFederationClusterNamespaceQuotaResponse) Reset() {
	*x = CreateFederationClusterNamespaceQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFederationClusterNamespaceQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFederationClusterNamespaceQuotaResponse) ProtoMessage() {}

func (x *CreateFederationClusterNamespaceQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFederationClusterNamespaceQuotaResponse.ProtoReflect.Descriptor instead.
func (*CreateFederationClusterNamespaceQuotaResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{17}
}

func (x *CreateFederationClusterNamespaceQuotaResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *CreateFederationClusterNamespaceQuotaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateFederationClusterNamespaceQuotaResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UpdateFederationClusterNamespaceQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Quota     *Quota `protobuf:"bytes,4,opt,name=quota,proto3" json:"quota,omitempty"`
	Operator  string `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UpdateFederationClusterNamespaceQuotaRequest) Reset() {
	*x = UpdateFederationClusterNamespaceQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFederationClusterNamespaceQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFederationClusterNamespaceQuotaRequest) ProtoMessage() {}

func (x *UpdateFederationClusterNamespaceQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFederationClusterNamespaceQuotaRequest.ProtoReflect.Descriptor instead.
func (*UpdateFederationClusterNamespaceQuotaRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateFederationClusterNamespaceQuotaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateFederationClusterNamespaceQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateFederationClusterNamespaceQuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFederationClusterNamespaceQuotaRequest) GetQuota() *Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *UpdateFederationClusterNamespaceQuotaRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UpdateFederationClusterNamespaceQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateFederationClusterNamespaceQuotaResponse) Reset() {
	*x = UpdateFederationClusterNamespaceQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFederationClusterNamespaceQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFederationClusterNamespaceQuotaResponse) ProtoMessage() {}

func (x *UpdateFederationClusterNamespaceQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFederationClusterNamespaceQuotaResponse.ProtoReflect.Descriptor instead.
func (*UpdateFederationClusterNamespaceQuotaResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateFederationClusterNamespaceQuotaResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UpdateFederationClusterNamespaceQuotaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateFederationClusterNamespaceQuotaResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type DeleteFederationClusterNamespaceQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteFederationClusterNamespaceQuotaRequest) Reset() {
	*x = DeleteFederationClusterNamespaceQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationClusterNamespaceQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationClusterNamespaceQuotaRequest) ProtoMessage() {}

func (x *DeleteFederationClusterNamespaceQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationClusterNamespaceQuotaRequest.ProtoReflect.Descriptor instead.
func (*DeleteFederationClusterNamespaceQuotaRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteFederationClusterNamespaceQuotaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteFederationClusterNamespaceQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteFederationClusterNamespaceQuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteFederationClusterNamespaceQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteFederationClusterNamespaceQuotaResponse) Reset() {
	*x = DeleteFederationClusterNamespaceQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederationClusterNamespaceQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederationClusterNamespaceQuotaResponse) ProtoMessage() {}

func (x *DeleteFederationClusterNamespaceQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederationClusterNamespaceQuotaResponse.ProtoReflect.Descriptor instead.
func (*DeleteFederationClusterNamespaceQuotaResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFederationClusterNamespaceQuotaResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *DeleteFederationClusterNamespaceQuotaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteFederationClusterNamespaceQuotaResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetFederationClusterNamespaceQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetFederationClusterNamespaceQuotaRequest) Reset() {
	*x = GetFederationClusterNamespaceQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationClusterNamespaceQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationClusterNamespaceQuotaRequest) ProtoMessage() {}

func (x *GetFederationClusterNamespaceQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationClusterNamespaceQuotaRequest.ProtoReflect.Descriptor instead.
func (*GetFederationClusterNamespaceQuotaRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{22}
}

func (x *GetFederationClusterNamespaceQuotaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetFederationClusterNamespaceQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetFederationClusterNamespaceQuotaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetFederationClusterNamespaceQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *Quota          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetFederationClusterNamespaceQuotaResponse) Reset() {
	*x = GetFederationClusterNamespaceQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationClusterNamespaceQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationClusterNamespaceQuotaResponse) ProtoMessage() {}

func (x *GetFederationClusterNamespaceQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationClusterNamespaceQuotaResponse.ProtoReflect.Descriptor instead.
func (*GetFederationClusterNamespaceQuotaResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{23}
}

func (x *GetFederationClusterNamespaceQuotaResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetFederationClusterNamespaceQuotaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetFederationClusterNamespaceQuotaResponse) GetData() *Quota {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetFederationClusterNamespaceQuotaResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListFederationClusterNamespaceQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ListFederationClusterNamespaceQuotaRequest) Reset() {
	*x = ListFederationClusterNamespaceQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterNamespaceQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterNamespaceQuotaRequest) ProtoMessage() {}

func (x *ListFederationClusterNamespaceQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterNamespaceQuotaRequest.ProtoReflect.Descriptor instead.
func (*ListFederationClusterNamespaceQuotaRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{24}
}

func (x *ListFederationClusterNamespaceQuotaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListFederationClusterNamespaceQuotaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListFederationClusterNamespaceQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*Quota        `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListFederationClusterNamespaceQuotaResponse) Reset() {
	*x = ListFederationClusterNamespaceQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterNamespaceQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterNamespaceQuotaResponse) ProtoMessage() {}

func (x *ListFederationClusterNamespaceQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterNamespaceQuotaResponse.ProtoReflect.Descriptor instead.
func (*ListFederationClusterNamespaceQuotaResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{25}
}

func (x *ListFederationClusterNamespaceQuotaResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListFederationClusterNamespaceQuotaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListFederationClusterNamespaceQuotaResponse) GetData() []*Quota {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListFederationClusterNamespaceQuotaResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type WebAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *WebAnnotations) Reset() {
	*x = WebAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotations) ProtoMessage() {}

func (x *WebAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotations.ProtoReflect.Descriptor instead.
func (*WebAnnotations) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{26}
}

func (x *WebAnnotations) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

type ListFederationClusterWithSubclusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions    map[string]string `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubConditions map[string]string `protobuf:"bytes,2,rep,name=sub_conditions,json=subConditions,proto3" json:"sub_conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListFederationClusterWithSubclusterRequest) Reset() {
	*x = ListFederationClusterWithSubclusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterWithSubclusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterWithSubclusterRequest) ProtoMessage() {}

func (x *ListFederationClusterWithSubclusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterWithSubclusterRequest.ProtoReflect.Descriptor instead.
func (*ListFederationClusterWithSubclusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{27}
}

func (x *ListFederationClusterWithSubclusterRequest) GetConditions() map[string]string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ListFederationClusterWithSubclusterRequest) GetSubConditions() map[string]string {
	if x != nil {
		return x.SubConditions
	}
	return nil
}

type ListFederationClusterWithSubclusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                            `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*FederationClusterWithSubcluster `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations                    `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListFederationClusterWithSubclusterResponse) Reset() {
	*x = ListFederationClusterWithSubclusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterWithSubclusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterWithSubclusterResponse) ProtoMessage() {}

func (x *ListFederationClusterWithSubclusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterWithSubclusterResponse.ProtoReflect.Descriptor instead.
func (*ListFederationClusterWithSubclusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{28}
}

func (x *ListFederationClusterWithSubclusterResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListFederationClusterWithSubclusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListFederationClusterWithSubclusterResponse) GetData() []*FederationClusterWithSubcluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListFederationClusterWithSubclusterResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type FederationClusterWithSubcluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode           string                  `protobuf:"bytes,1,opt,name=project_code,proto3" json:"project_code,omitempty"`
	ProjectId             string                  `protobuf:"bytes,2,opt,name=project_id,proto3" json:"project_id,omitempty"`
	FederationClusterId   string                  `protobuf:"bytes,3,opt,name=federation_cluster_id,proto3" json:"federation_cluster_id,omitempty"`
	FederationClusterName string                  `protobuf:"bytes,4,opt,name=federation_cluster_name,proto3" json:"federation_cluster_name,omitempty"`
	HostClusterId         string                  `protobuf:"bytes,5,opt,name=host_cluster_id,proto3" json:"host_cluster_id,omitempty"`
	CreatedTime           string                  `protobuf:"bytes,6,opt,name=created_time,proto3" json:"created_time,omitempty"`
	UpdatedTime           string                  `protobuf:"bytes,7,opt,name=updated_time,proto3" json:"updated_time,omitempty"`
	SubClusters           []*FederationSubCluster `protobuf:"bytes,8,rep,name=sub_clusters,proto3" json:"sub_clusters,omitempty"`
}

func (x *FederationClusterWithSubcluster) Reset() {
	*x = FederationClusterWithSubcluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederationClusterWithSubcluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederationClusterWithSubcluster) ProtoMessage() {}

func (x *FederationClusterWithSubcluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederationClusterWithSubcluster.ProtoReflect.Descriptor instead.
func (*FederationClusterWithSubcluster) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{29}
}

func (x *FederationClusterWithSubcluster) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *FederationClusterWithSubcluster) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FederationClusterWithSubcluster) GetFederationClusterId() string {
	if x != nil {
		return x.FederationClusterId
	}
	return ""
}

func (x *FederationClusterWithSubcluster) GetFederationClusterName() string {
	if x != nil {
		return x.FederationClusterName
	}
	return ""
}

func (x *FederationClusterWithSubcluster) GetHostClusterId() string {
	if x != nil {
		return x.HostClusterId
	}
	return ""
}

func (x *FederationClusterWithSubcluster) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *FederationClusterWithSubcluster) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *FederationClusterWithSubcluster) GetSubClusters() []*FederationSubCluster {
	if x != nil {
		return x.SubClusters
	}
	return nil
}

type FederationSubCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode                string            `protobuf:"bytes,1,opt,name=project_code,proto3" json:"project_code,omitempty"`
	ProjectId                  string            `protobuf:"bytes,2,opt,name=project_id,proto3" json:"project_id,omitempty"`
	SubClusterId               string            `protobuf:"bytes,3,opt,name=sub_cluster_id,proto3" json:"sub_cluster_id,omitempty"`
	SubClusterName             string            `protobuf:"bytes,4,opt,name=sub_cluster_name,proto3" json:"sub_cluster_name,omitempty"`
	FederationClusterId        string            `protobuf:"bytes,5,opt,name=federation_cluster_id,proto3" json:"federation_cluster_id,omitempty"`
	HostClusterId              string            `protobuf:"bytes,6,opt,name=host_cluster_id,proto3" json:"host_cluster_id,omitempty"`
	ClusternetClusterName      string            `protobuf:"bytes,7,opt,name=clusternet_cluster_name,proto3" json:"clusternet_cluster_name,omitempty"`
	ClusternetClusterNamespace string            `protobuf:"bytes,8,opt,name=clusternet_cluster_namespace,proto3" json:"clusternet_cluster_namespace,omitempty"`
	CreatedTime                string            `protobuf:"bytes,9,opt,name=created_time,proto3" json:"created_time,omitempty"`
	UpdatedTime                string            `protobuf:"bytes,10,opt,name=updated_time,proto3" json:"updated_time,omitempty"`
	Status                     string            `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Labels                     map[string]string `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FederationNamespaces       []string          `protobuf:"bytes,13,rep,name=federation_namespaces,proto3" json:"federation_namespaces,omitempty"`
}

func (x *FederationSubCluster) Reset() {
	*x = FederationSubCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederationSubCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederationSubCluster) ProtoMessage() {}

func (x *FederationSubCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederationSubCluster.ProtoReflect.Descriptor instead.
func (*FederationSubCluster) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{30}
}

func (x *FederationSubCluster) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *FederationSubCluster) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FederationSubCluster) GetSubClusterId() string {
	if x != nil {
		return x.SubClusterId
	}
	return ""
}

func (x *FederationSubCluster) GetSubClusterName() string {
	if x != nil {
		return x.SubClusterName
	}
	return ""
}

func (x *FederationSubCluster) GetFederationClusterId() string {
	if x != nil {
		return x.FederationClusterId
	}
	return ""
}

func (x *FederationSubCluster) GetHostClusterId() string {
	if x != nil {
		return x.HostClusterId
	}
	return ""
}

func (x *FederationSubCluster) GetClusternetClusterName() string {
	if x != nil {
		return x.ClusternetClusterName
	}
	return ""
}

func (x *FederationSubCluster) GetClusternetClusterNamespace() string {
	if x != nil {
		return x.ClusternetClusterNamespace
	}
	return ""
}

func (x *FederationSubCluster) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *FederationSubCluster) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *FederationSubCluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FederationSubCluster) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FederationSubCluster) GetFederationNamespaces() []string {
	if x != nil {
		return x.FederationNamespaces
	}
	return nil
}

type ListFederationClusterWithNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions    map[string]string `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubConditions map[string]string `protobuf:"bytes,2,rep,name=sub_conditions,json=subConditions,proto3" json:"sub_conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListFederationClusterWithNamespaceRequest) Reset() {
	*x = ListFederationClusterWithNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterWithNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterWithNamespaceRequest) ProtoMessage() {}

func (x *ListFederationClusterWithNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterWithNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListFederationClusterWithNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{31}
}

func (x *ListFederationClusterWithNamespaceRequest) GetConditions() map[string]string {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *ListFederationClusterWithNamespaceRequest) GetSubConditions() map[string]string {
	if x != nil {
		return x.SubConditions
	}
	return nil
}

type ListFederationClusterWithNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                           `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*FederationClusterWithNamespace `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations                   `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListFederationClusterWithNamespaceResponse) Reset() {
	*x = ListFederationClusterWithNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFederationClusterWithNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFederationClusterWithNamespaceResponse) ProtoMessage() {}

func (x *ListFederationClusterWithNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFederationClusterWithNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListFederationClusterWithNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{32}
}

func (x *ListFederationClusterWithNamespaceResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListFederationClusterWithNamespaceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListFederationClusterWithNamespaceResponse) GetData() []*FederationClusterWithNamespace {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListFederationClusterWithNamespaceResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type FederationClusterWithNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FederationClusterId   string                 `protobuf:"bytes,1,opt,name=federation_cluster_id,proto3" json:"federation_cluster_id,omitempty"`
	FederationClusterName string                 `protobuf:"bytes,2,opt,name=federation_cluster_name,proto3" json:"federation_cluster_name,omitempty"`
	HostClusterId         string                 `protobuf:"bytes,3,opt,name=host_cluster_id,proto3" json:"host_cluster_id,omitempty"`
	ProjectCode           string                 `protobuf:"bytes,4,opt,name=project_code,proto3" json:"project_code,omitempty"`
	ProjectId             string                 `protobuf:"bytes,5,opt,name=project_id,proto3" json:"project_id,omitempty"`
	CreatedTime           string                 `protobuf:"bytes,6,opt,name=created_time,proto3" json:"created_time,omitempty"`
	UpdatedTime           string                 `protobuf:"bytes,7,opt,name=updated_time,proto3" json:"updated_time,omitempty"`
	FederationNamespaces  []*FederationNamespace `protobuf:"bytes,8,rep,name=federation_namespaces,proto3" json:"federation_namespaces,omitempty"`
}

func (x *FederationClusterWithNamespace) Reset() {
	*x = FederationClusterWithNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederationClusterWithNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederationClusterWithNamespace) ProtoMessage() {}

func (x *FederationClusterWithNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederationClusterWithNamespace.ProtoReflect.Descriptor instead.
func (*FederationClusterWithNamespace) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{33}
}

func (x *FederationClusterWithNamespace) GetFederationClusterId() string {
	if x != nil {
		return x.FederationClusterId
	}
	return ""
}

func (x *FederationClusterWithNamespace) GetFederationClusterName() string {
	if x != nil {
		return x.FederationClusterName
	}
	return ""
}

func (x *FederationClusterWithNamespace) GetHostClusterId() string {
	if x != nil {
		return x.HostClusterId
	}
	return ""
}

func (x *FederationClusterWithNamespace) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *FederationClusterWithNamespace) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FederationClusterWithNamespace) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *FederationClusterWithNamespace) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *FederationClusterWithNamespace) GetFederationNamespaces() []*FederationNamespace {
	if x != nil {
		return x.FederationNamespaces
	}
	return nil
}

type FederationNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectCode         string   `protobuf:"bytes,1,opt,name=project_code,proto3" json:"project_code,omitempty"`
	ProjectId           string   `protobuf:"bytes,2,opt,name=project_id,proto3" json:"project_id,omitempty"`
	FederationNamespace string   `protobuf:"bytes,3,opt,name=federation_namespace,proto3" json:"federation_namespace,omitempty"`
	FederationClusterId string   `protobuf:"bytes,4,opt,name=federation_cluster_id,proto3" json:"federation_cluster_id,omitempty"`
	HostClusterId       string   `protobuf:"bytes,5,opt,name=host_cluster_id,proto3" json:"host_cluster_id,omitempty"`
	CreatedTime         string   `protobuf:"bytes,6,opt,name=created_time,proto3" json:"created_time,omitempty"`
	SubClusters         []string `protobuf:"bytes,7,rep,name=sub_clusters,proto3" json:"sub_clusters,omitempty"`
}

func (x *FederationNamespace) Reset() {
	*x = FederationNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederationNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederationNamespace) ProtoMessage() {}

func (x *FederationNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederationNamespace.ProtoReflect.Descriptor instead.
func (*FederationNamespace) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{34}
}

func (x *FederationNamespace) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *FederationNamespace) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FederationNamespace) GetFederationNamespace() string {
	if x != nil {
		return x.FederationNamespace
	}
	return ""
}

func (x *FederationNamespace) GetFederationClusterId() string {
	if x != nil {
		return x.FederationClusterId
	}
	return ""
}

func (x *FederationNamespace) GetHostClusterId() string {
	if x != nil {
		return x.HostClusterId
	}
	return ""
}

func (x *FederationNamespace) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *FederationNamespace) GetSubClusters() []string {
	if x != nil {
		return x.SubClusters
	}
	return nil
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{35}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *Task           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{36}
}

func (x *GetTaskResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTaskResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType  string `protobuf:"bytes,1,opt,name=taskType,proto3" json:"taskType,omitempty"`
	TaskIndex string `protobuf:"bytes,2,opt,name=taskIndex,proto3" json:"taskIndex,omitempty"`
	Offset    int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{37}
}

func (x *ListTasksRequest) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *ListTasksRequest) GetTaskIndex() string {
	if x != nil {
		return x.TaskIndex
	}
	return ""
}

func (x *ListTasksRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListTasksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*Task         `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{38}
}

func (x *ListTasksResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListTasksResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListTasksResponse) GetData() []*Task {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListTasksResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type RetryTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	BeginStepName string `protobuf:"bytes,2,opt,name=begin_step_name,json=beginStepName,proto3" json:"begin_step_name,omitempty"`
}

func (x *RetryTaskRequest) Reset() {
	*x = RetryTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTaskRequest) ProtoMessage() {}

func (x *RetryTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTaskRequest.ProtoReflect.Descriptor instead.
func (*RetryTaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{39}
}

func (x *RetryTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *RetryTaskRequest) GetBeginStepName() string {
	if x != nil {
		return x.BeginStepName
	}
	return ""
}

type RetryTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                     `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *TaskDistributeResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations             `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *RetryTaskResponse) Reset() {
	*x = RetryTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTaskResponse) ProtoMessage() {}

func (x *RetryTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTaskResponse.ProtoReflect.Descriptor instead.
func (*RetryTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{40}
}

func (x *RetryTaskResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *RetryTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RetryTaskResponse) GetData() *TaskDistributeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RetryTaskResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIndex           string            `protobuf:"bytes,1,opt,name=task_index,json=taskIndex,proto3" json:"task_index,omitempty"`
	TaskId              string            `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType            string            `protobuf:"bytes,3,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	TaskName            string            `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	CurrentStep         string            `protobuf:"bytes,5,opt,name=current_step,json=currentStep,proto3" json:"current_step,omitempty"`
	StepSequence        []string          `protobuf:"bytes,6,rep,name=step_sequence,json=stepSequence,proto3" json:"step_sequence,omitempty"`
	Steps               map[string]*Step  `protobuf:"bytes,7,rep,name=steps,proto3" json:"steps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CallBackFuncName    string            `protobuf:"bytes,8,opt,name=call_back_func_name,json=callBackFuncName,proto3" json:"call_back_func_name,omitempty"`
	CommonParams        map[string]string `protobuf:"bytes,9,rep,name=common_params,json=commonParams,proto3" json:"common_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtraJson           string            `protobuf:"bytes,10,opt,name=extra_json,json=extraJson,proto3" json:"extra_json,omitempty"`
	Status              string            `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Message             string            `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
	ForceTerminate      bool              `protobuf:"varint,13,opt,name=force_terminate,json=forceTerminate,proto3" json:"force_terminate,omitempty"`
	Start               string            `protobuf:"bytes,14,opt,name=start,proto3" json:"start,omitempty"`
	End                 string            `protobuf:"bytes,15,opt,name=end,proto3" json:"end,omitempty"`
	ExecutionTime       uint32            `protobuf:"varint,16,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	MaxExecutionSeconds uint32            `protobuf:"varint,17,opt,name=max_execution_seconds,json=maxExecutionSeconds,proto3" json:"max_execution_seconds,omitempty"`
	Creator             string            `protobuf:"bytes,18,opt,name=creator,proto3" json:"creator,omitempty"`
	LastUpdate          string            `protobuf:"bytes,19,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Updater             string            `protobuf:"bytes,20,opt,name=updater,proto3" json:"updater,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{41}
}

func (x *Task) GetTaskIndex() string {
	if x != nil {
		return x.TaskIndex
	}
	return ""
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *Task) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *Task) GetCurrentStep() string {
	if x != nil {
		return x.CurrentStep
	}
	return ""
}

func (x *Task) GetStepSequence() []string {
	if x != nil {
		return x.StepSequence
	}
	return nil
}

func (x *Task) GetSteps() map[string]*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Task) GetCallBackFuncName() string {
	if x != nil {
		return x.CallBackFuncName
	}
	return ""
}

func (x *Task) GetCommonParams() map[string]string {
	if x != nil {
		return x.CommonParams
	}
	return nil
}

func (x *Task) GetExtraJson() string {
	if x != nil {
		return x.ExtraJson
	}
	return ""
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Task) GetForceTerminate() bool {
	if x != nil {
		return x.ForceTerminate
	}
	return false
}

func (x *Task) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Task) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *Task) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Task) GetMaxExecutionSeconds() uint32 {
	if x != nil {
		return x.MaxExecutionSeconds
	}
	return 0
}

func (x *Task) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Task) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *Task) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Alias               string            `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Params              map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Extras              string            `protobuf:"bytes,4,opt,name=extras,proto3" json:"extras,omitempty"`
	Status              string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Message             string            `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	SkipOnFailed        bool              `protobuf:"varint,7,opt,name=skip_on_failed,json=skipOnFailed,proto3" json:"skip_on_failed,omitempty"`
	RetryCount          uint32            `protobuf:"varint,8,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Start               string            `protobuf:"bytes,9,opt,name=start,proto3" json:"start,omitempty"`
	End                 string            `protobuf:"bytes,10,opt,name=end,proto3" json:"end,omitempty"`
	ExecutionTime       uint32            `protobuf:"varint,11,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	MaxExecutionSeconds uint32            `protobuf:"varint,12,opt,name=max_execution_seconds,json=maxExecutionSeconds,proto3" json:"max_execution_seconds,omitempty"`
	LastUpdate          string            `protobuf:"bytes,13,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{42}
}

func (x *Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Step) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Step) GetExtras() string {
	if x != nil {
		return x.Extras
	}
	return ""
}

func (x *Step) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Step) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Step) GetSkipOnFailed() bool {
	if x != nil {
		return x.SkipOnFailed
	}
	return false
}

func (x *Step) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *Step) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Step) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *Step) GetExecutionTime() uint32 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *Step) GetMaxExecutionSeconds() uint32 {
	if x != nil {
		return x.MaxExecutionSeconds
	}
	return 0
}

func (x *Step) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

type GetTaskRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetTaskRecordRequest) Reset() {
	*x = GetTaskRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRecordRequest) ProtoMessage() {}

func (x *GetTaskRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRecordRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRecordRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{43}
}

func (x *GetTaskRecordRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetTaskRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32         `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *TaskRecord     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetTaskRecordResponse) Reset() {
	*x = GetTaskRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRecordResponse) ProtoMessage() {}

func (x *GetTaskRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRecordResponse.ProtoReflect.Descriptor instead.
func (*GetTaskRecordResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{44}
}

func (x *GetTaskRecordResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetTaskRecordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskRecordResponse) GetData() *TaskRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTaskRecordResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type TaskRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Step   []*TaskRecordStep `protobuf:"bytes,2,rep,name=step,proto3" json:"step,omitempty"`
}

func (x *TaskRecord) Reset() {
	*x = TaskRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRecord) ProtoMessage() {}

func (x *TaskRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRecord.ProtoReflect.Descriptor instead.
func (*TaskRecord) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{45}
}

func (x *TaskRecord) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskRecord) GetStep() []*TaskRecordStep {
	if x != nil {
		return x.Step
	}
	return nil
}

type TaskRecordStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status     string                `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	StartTime  int64                 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    int64                 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Data       []*TaskRecordStepData `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
	AllowSkip  *wrappers.BoolValue   `protobuf:"bytes,7,opt,name=allowSkip,proto3" json:"allowSkip,omitempty"`
	AllowRetry *wrappers.BoolValue   `protobuf:"bytes,8,opt,name=allowRetry,proto3" json:"allowRetry,omitempty"`
}

func (x *TaskRecordStep) Reset() {
	*x = TaskRecordStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRecordStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRecordStep) ProtoMessage() {}

func (x *TaskRecordStep) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRecordStep.ProtoReflect.Descriptor instead.
func (*TaskRecordStep) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{46}
}

func (x *TaskRecordStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRecordStep) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TaskRecordStep) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TaskRecordStep) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TaskRecordStep) GetData() []*TaskRecordStepData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskRecordStep) GetAllowSkip() *wrappers.BoolValue {
	if x != nil {
		return x.AllowSkip
	}
	return nil
}

func (x *TaskRecordStep) GetAllowRetry() *wrappers.BoolValue {
	if x != nil {
		return x.AllowRetry
	}
	return nil
}

type TaskRecordStepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log       string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Level     string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *TaskRecordStepData) Reset() {
	*x = TaskRecordStepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRecordStepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRecordStepData) ProtoMessage() {}

func (x *TaskRecordStepData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRecordStepData.ProtoReflect.Descriptor instead.
func (*TaskRecordStepData) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{47}
}

func (x *TaskRecordStepData) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *TaskRecordStepData) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TaskRecordStepData) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

type InstallFederationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId                    string            `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Creator                      string            `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	UserToken                    string            `protobuf:"bytes,3,opt,name=userToken,proto3" json:"userToken,omitempty"`
	LoadBalancerId               string            `protobuf:"bytes,4,opt,name=loadBalancerId,proto3" json:"loadBalancerId,omitempty"`
	FederationProjectId          string            `protobuf:"bytes,5,opt,name=federationProjectId,proto3" json:"federationProjectId,omitempty"`
	FederationProjectCode        string            `protobuf:"bytes,6,opt,name=federationProjectCode,proto3" json:"federationProjectCode,omitempty"`
	FederationClusterName        string            `protobuf:"bytes,7,opt,name=federationClusterName,proto3" json:"federationClusterName,omitempty"`
	FederationBusinessId         string            `protobuf:"bytes,8,opt,name=federationBusinessId,proto3" json:"federationBusinessId,omitempty"`
	FederationClusterEnv         string            `protobuf:"bytes,9,opt,name=federationClusterEnv,proto3" json:"federationClusterEnv,omitempty"`
	FederationClusterDescription string            `protobuf:"bytes,10,opt,name=federationClusterDescription,proto3" json:"federationClusterDescription,omitempty"`
	FederationClusterLabels      map[string]string `protobuf:"bytes,11,rep,name=federationClusterLabels,proto3" json:"federationClusterLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InstallFederationRequest) Reset() {
	*x = InstallFederationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallFederationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallFederationRequest) ProtoMessage() {}

func (x *InstallFederationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallFederationRequest.ProtoReflect.Descriptor instead.
func (*InstallFederationRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{48}
}

func (x *InstallFederationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *InstallFederationRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *InstallFederationRequest) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *InstallFederationRequest) GetLoadBalancerId() string {
	if x != nil {
		return x.LoadBalancerId
	}
	return ""
}

func (x *InstallFederationRequest) GetFederationProjectId() string {
	if x != nil {
		return x.FederationProjectId
	}
	return ""
}

func (x *InstallFederationRequest) GetFederationProjectCode() string {
	if x != nil {
		return x.FederationProjectCode
	}
	return ""
}

func (x *InstallFederationRequest) GetFederationClusterName() string {
	if x != nil {
		return x.FederationClusterName
	}
	return ""
}

func (x *InstallFederationRequest) GetFederationBusinessId() string {
	if x != nil {
		return x.FederationBusinessId
	}
	return ""
}

func (x *InstallFederationRequest) GetFederationClusterEnv() string {
	if x != nil {
		return x.FederationClusterEnv
	}
	return ""
}

func (x *InstallFederationRequest) GetFederationClusterDescription() string {
	if x != nil {
		return x.FederationClusterDescription
	}
	return ""
}

func (x *InstallFederationRequest) GetFederationClusterLabels() map[string]string {
	if x != nil {
		return x.FederationClusterLabels
	}
	return nil
}

type InstallFederationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                     `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *TaskDistributeResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations             `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *InstallFederationResponse) Reset() {
	*x = InstallFederationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallFederationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallFederationResponse) ProtoMessage() {}

func (x *InstallFederationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallFederationResponse.ProtoReflect.Descriptor instead.
func (*InstallFederationResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{49}
}

func (x *InstallFederationResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *InstallFederationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstallFederationResponse) GetData() *TaskDistributeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InstallFederationResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type UnInstallFederationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Operator  string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *UnInstallFederationRequest) Reset() {
	*x = UnInstallFederationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnInstallFederationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnInstallFederationRequest) ProtoMessage() {}

func (x *UnInstallFederationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnInstallFederationRequest.ProtoReflect.Descriptor instead.
func (*UnInstallFederationRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{50}
}

func (x *UnInstallFederationRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UnInstallFederationRequest) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type UnInstallFederationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                     `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *TaskDistributeResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations             `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UnInstallFederationResponse) Reset() {
	*x = UnInstallFederationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnInstallFederationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnInstallFederationResponse) ProtoMessage() {}

func (x *UnInstallFederationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnInstallFederationResponse.ProtoReflect.Descriptor instead.
func (*UnInstallFederationResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{51}
}

func (x *UnInstallFederationResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *UnInstallFederationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UnInstallFederationResponse) GetData() *TaskDistributeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UnInstallFederationResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type TaskDistributeResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *TaskDistributeResponseData) Reset() {
	*x = TaskDistributeResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDistributeResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDistributeResponseData) ProtoMessage() {}

func (x *TaskDistributeResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDistributeResponseData.ProtoReflect.Descriptor instead.
func (*TaskDistributeResponseData) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{52}
}

func (x *TaskDistributeResponseData) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type RegisterSubclusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Creator      string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	UserToken    string `protobuf:"bytes,3,opt,name=userToken,proto3" json:"userToken,omitempty"`
	SubclusterId string `protobuf:"bytes,4,opt,name=subclusterId,proto3" json:"subclusterId,omitempty"`
}

func (x *RegisterSubclusterRequest) Reset() {
	*x = RegisterSubclusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSubclusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSubclusterRequest) ProtoMessage() {}

func (x *RegisterSubclusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSubclusterRequest.ProtoReflect.Descriptor instead.
func (*RegisterSubclusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{53}
}

func (x *RegisterSubclusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RegisterSubclusterRequest) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *RegisterSubclusterRequest) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *RegisterSubclusterRequest) GetSubclusterId() string {
	if x != nil {
		return x.SubclusterId
	}
	return ""
}

type RegisterSubclusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                     `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *TaskDistributeResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations             `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *RegisterSubclusterResponse) Reset() {
	*x = RegisterSubclusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSubclusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSubclusterResponse) ProtoMessage() {}

func (x *RegisterSubclusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSubclusterResponse.ProtoReflect.Descriptor instead.
func (*RegisterSubclusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{54}
}

func (x *RegisterSubclusterResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *RegisterSubclusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RegisterSubclusterResponse) GetData() *TaskDistributeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RegisterSubclusterResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type RemoveSubclusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId    string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	SubclusterId string `protobuf:"bytes,2,opt,name=subclusterId,proto3" json:"subclusterId,omitempty"`
	User         string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *RemoveSubclusterRequest) Reset() {
	*x = RemoveSubclusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubclusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubclusterRequest) ProtoMessage() {}

func (x *RemoveSubclusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubclusterRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubclusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{55}
}

func (x *RemoveSubclusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RemoveSubclusterRequest) GetSubclusterId() string {
	if x != nil {
		return x.SubclusterId
	}
	return ""
}

func (x *RemoveSubclusterRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type RemoveSubclusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                     `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *TaskDistributeResponseData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations             `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *RemoveSubclusterResponse) Reset() {
	*x = RemoveSubclusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubclusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubclusterResponse) ProtoMessage() {}

func (x *RemoveSubclusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubclusterResponse.ProtoReflect.Descriptor instead.
func (*RemoveSubclusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{56}
}

func (x *RemoveSubclusterResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *RemoveSubclusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoveSubclusterResponse) GetData() *TaskDistributeResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RemoveSubclusterResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetFederationClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *GetFederationClusterRequest) Reset() {
	*x = GetFederationClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationClusterRequest) ProtoMessage() {}

func (x *GetFederationClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationClusterRequest.ProtoReflect.Descriptor instead.
func (*GetFederationClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{57}
}

func (x *GetFederationClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetFederationClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32            `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *FederationCluster `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations    `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetFederationClusterResponse) Reset() {
	*x = GetFederationClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationClusterResponse) ProtoMessage() {}

func (x *GetFederationClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationClusterResponse.ProtoReflect.Descriptor instead.
func (*GetFederationClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{58}
}

func (x *GetFederationClusterResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetFederationClusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetFederationClusterResponse) GetData() *FederationCluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetFederationClusterResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type GetFederationByHostClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId string `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
}

func (x *GetFederationByHostClusterRequest) Reset() {
	*x = GetFederationByHostClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationByHostClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationByHostClusterRequest) ProtoMessage() {}

func (x *GetFederationByHostClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationByHostClusterRequest.ProtoReflect.Descriptor instead.
func (*GetFederationByHostClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{59}
}

func (x *GetFederationByHostClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetFederationByHostClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                    `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           *FederationClusterWithTask `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations            `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *GetFederationByHostClusterResponse) Reset() {
	*x = GetFederationByHostClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFederationByHostClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFederationByHostClusterResponse) ProtoMessage() {}

func (x *GetFederationByHostClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFederationByHostClusterResponse.ProtoReflect.Descriptor instead.
func (*GetFederationByHostClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{60}
}

func (x *GetFederationByHostClusterResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *GetFederationByHostClusterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetFederationByHostClusterResponse) GetData() *FederationClusterWithTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetFederationByHostClusterResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListProjectInstallingFederationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *ListProjectInstallingFederationRequest) Reset() {
	*x = ListProjectInstallingFederationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectInstallingFederationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectInstallingFederationRequest) ProtoMessage() {}

func (x *ListProjectInstallingFederationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectInstallingFederationRequest.ProtoReflect.Descriptor instead.
func (*ListProjectInstallingFederationRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{61}
}

func (x *ListProjectInstallingFederationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListProjectInstallingFederationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32                      `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*FederationClusterWithTask `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations              `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListProjectInstallingFederationResponse) Reset() {
	*x = ListProjectInstallingFederationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectInstallingFederationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectInstallingFederationResponse) ProtoMessage() {}

func (x *ListProjectInstallingFederationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectInstallingFederationResponse.ProtoReflect.Descriptor instead.
func (*ListProjectInstallingFederationResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{62}
}

func (x *ListProjectInstallingFederationResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListProjectInstallingFederationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListProjectInstallingFederationResponse) GetData() []*FederationClusterWithTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProjectInstallingFederationResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type ListProjectFederationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *ListProjectFederationRequest) Reset() {
	*x = ListProjectFederationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectFederationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectFederationRequest) ProtoMessage() {}

func (x *ListProjectFederationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectFederationRequest.ProtoReflect.Descriptor instead.
func (*ListProjectFederationRequest) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{63}
}

func (x *ListProjectFederationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListProjectFederationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           *uint32              `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message        string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data           []*FederationCluster `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	WebAnnotations *WebAnnotations      `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *ListProjectFederationResponse) Reset() {
	*x = ListProjectFederationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectFederationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectFederationResponse) ProtoMessage() {}

func (x *ListProjectFederationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectFederationResponse.ProtoReflect.Descriptor instead.
func (*ListProjectFederationResponse) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{64}
}

func (x *ListProjectFederationResponse) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ListProjectFederationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListProjectFederationResponse) GetData() []*FederationCluster {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProjectFederationResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

type FederationClusterWithTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *FederationCluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Task    *Task              `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *FederationClusterWithTask) Reset() {
	*x = FederationClusterWithTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederationClusterWithTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederationClusterWithTask) ProtoMessage() {}

func (x *FederationClusterWithTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederationClusterWithTask.ProtoReflect.Descriptor instead.
func (*FederationClusterWithTask) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{65}
}

func (x *FederationClusterWithTask) GetCluster() *FederationCluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *FederationClusterWithTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type FederationCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FederationClusterId   string                  `protobuf:"bytes,1,opt,name=federation_cluster_id,proto3" json:"federation_cluster_id,omitempty"`
	FederationClusterName string                  `protobuf:"bytes,2,opt,name=federation_cluster_name,proto3" json:"federation_cluster_name,omitempty"`
	HostClusterId         string                  `protobuf:"bytes,3,opt,name=host_cluster_id,proto3" json:"host_cluster_id,omitempty"`
	ProjectCode           string                  `protobuf:"bytes,4,opt,name=project_code,proto3" json:"project_code,omitempty"`
	ProjectId             string                  `protobuf:"bytes,5,opt,name=project_id,proto3" json:"project_id,omitempty"`
	CreatedTime           string                  `protobuf:"bytes,6,opt,name=created_time,proto3" json:"created_time,omitempty"`
	UpdatedTime           string                  `protobuf:"bytes,7,opt,name=updated_time,proto3" json:"updated_time,omitempty"`
	Status                string                  `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	SubClusters           []*FederationSubCluster `protobuf:"bytes,9,rep,name=sub_clusters,proto3" json:"sub_clusters,omitempty"`
	FederationNamespaces  []*FederationNamespace  `protobuf:"bytes,10,rep,name=federation_namespaces,proto3" json:"federation_namespaces,omitempty"`
}

func (x *FederationCluster) Reset() {
	*x = FederationCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederationCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederationCluster) ProtoMessage() {}

func (x *FederationCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederationCluster.ProtoReflect.Descriptor instead.
func (*FederationCluster) Descriptor() ([]byte, []int) {
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP(), []int{66}
}

func (x *FederationCluster) GetFederationClusterId() string {
	if x != nil {
		return x.FederationClusterId
	}
	return ""
}

func (x *FederationCluster) GetFederationClusterName() string {
	if x != nil {
		return x.FederationClusterName
	}
	return ""
}

func (x *FederationCluster) GetHostClusterId() string {
	if x != nil {
		return x.HostClusterId
	}
	return ""
}

func (x *FederationCluster) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *FederationCluster) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FederationCluster) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *FederationCluster) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *FederationCluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FederationCluster) GetSubClusters() []*FederationSubCluster {
	if x != nil {
		return x.SubClusters
	}
	return nil
}

func (x *FederationCluster) GetFederationNamespaces() []*FederationNamespace {
	if x != nil {
		return x.FederationNamespaces
	}
	return nil
}

var File_proto_bcs_federation_manager_bcs_federation_manager_proto protoreflect.FileDescriptor

var file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x62,
	0x63, 0x73, 0x2d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x06, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0x92, 0x41, 0x2b, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30,
	0x92, 0x41, 0x2d, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x32, 0x21, 0xe8,
	0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe4, 0xba, 0xb2, 0xe5, 0x92, 0x8c, 0xe6, 0x80, 0xa7,
	0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x12, 0x66, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x2a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x1e,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0x52, 0x09,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x6c, 0x92, 0x41, 0x69, 0x0a,
	0x67, 0x2a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x1b, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x52, 0x2a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x32, 0x4a, 0xe4, 0xba, 0xb2, 0xe5, 0x92, 0x8c, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0x2c,
	0x20, 0x61, 0x6c, 0x6c, 0x3a, 0x20, 0xe5, 0x85, 0xa8, 0xe9, 0x83, 0xa8, 0x2c, 0x20, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x20, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe4, 0xba, 0xb2,
	0xe5, 0x92, 0x8c, 0x2c, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0xe4, 0xb8, 0x8d, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x29, 0x92, 0x41,
	0x26, 0x2a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x32, 0x15, 0xe4, 0xba, 0xb2, 0xe5, 0x92, 0x8c, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0x80,
	0x89, 0xe6, 0x8b, 0xa9, 0xe5, 0x99, 0xa8, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xc5, 0x02,
	0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x73, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x0c, 0xe5, 0x8c, 0xb9, 0xe9, 0x85,
	0x8d, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x7f, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x26, 0x92, 0x41, 0x23,
	0x2a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x0f, 0xe5, 0x8c, 0xb9, 0xe9, 0x85, 0x8d, 0xe8, 0xa1, 0xa8, 0xe8, 0xbe, 0xbe,
	0xe5, 0xbc, 0x8f, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x2a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x09, 0xe6, 0xa0, 0x87, 0xe7, 0xad,
	0xbe, 0xe9, 0x94, 0xae, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x93, 0x01, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x77, 0x92, 0x41,
	0x74, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x68, 0xe6, 0x93, 0x8d,
	0xe4, 0xbd, 0x9c, 0xe7, 0xac, 0xa6, 0x2c, 0x20, 0x49, 0x6e, 0x3a, 0x20, 0xe5, 0x8c, 0x85, 0xe5,
	0x90, 0xab, 0x2c, 0x20, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x3a, 0x20, 0xe4, 0xb8, 0x8d, 0xe5, 0x8c,
	0x85, 0xe5, 0x90, 0xab, 0x2c, 0x20, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x3a, 0x20, 0xe5, 0xad,
	0x98, 0xe5, 0x9c, 0xa8, 0x2c, 0x20, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x3a, 0x20, 0xe4, 0xb8, 0x8d, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0x2c, 0x20, 0x47,
	0x74, 0x3a, 0x20, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0x2c, 0x20, 0x4c, 0x74, 0x3a, 0x20, 0xe5,
	0xb0, 0x8f, 0xe4, 0xba, 0x8e, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x4b, 0x38, 0x53, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32, 0x0c, 0xe8,
	0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xe1, 0x04,
	0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4b, 0x38, 0x53, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x0c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x38, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x74, 0x61, 0x32, 0x0f, 0xe5, 0x8e,
	0x9f, 0xe5, 0xa7, 0x8b, 0x6b, 0x38, 0x73, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x48, 0x00, 0x52,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x7d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3, 0xa8,
	0xe8, 0xa7, 0xa3, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xf6, 0x02, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x1e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xbc, 0x05, 0x0a, 0x27, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1e, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3, 0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x32, 0x21, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xe4, 0xba, 0xb2, 0xe5, 0x92, 0x8c, 0xe6, 0x80, 0xa7, 0x52, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x28, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a, 0x5b, 0x2a, 0x28,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32,
	0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x09, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe4, 0xba, 0xba, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x3a, 0x66, 0x92, 0x41, 0x63, 0x0a, 0x61, 0x2a, 0x27, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x81, 0x94, 0xe9,
	0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xf6, 0x02, 0x0a,
	0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x60, 0x92, 0x41, 0x5d, 0x0a,
	0x5b, 0x2a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe5, 0x88, 0xa0,
	0xe9, 0x99, 0xa4, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf3, 0x06, 0x0a, 0x1e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b,
	0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0xb3,
	0xa8, 0xe8, 0xa7, 0xa3, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x37, 0x92, 0x41, 0x34,
	0x2a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x32, 0x21, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe4, 0xba, 0xb2, 0xe5, 0x92,
	0x8c, 0xe6, 0x80, 0xa7, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b,
	0x38, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x32, 0x0c, 0xe5, 0x8e, 0x9f, 0xe5, 0xa7, 0x8b, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x48, 0x00,
	0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x1e, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x4b, 0x38, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x02, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x3a, 0x63, 0x92, 0x41, 0x60, 0x0a, 0x5e, 0x2a, 0x24, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xe8, 0x03, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x69, 0x92, 0x41, 0x66, 0x0a, 0x64, 0x2a, 0x25, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe8, 0x81, 0x94, 0xe9,
	0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x5e, 0x92, 0x41,
	0x5b, 0x0a, 0x59, 0x2a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf0, 0x03, 0x0a,
	0x26, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0,
	0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x29, 0x92, 0x41, 0x26, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x6a, 0x92, 0x41, 0x67, 0x0a,
	0x65, 0x2a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xb1, 0x03, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x32, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x7c, 0x92, 0x41, 0x79, 0x0a, 0x77, 0x2a, 0x2c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x51, 0x75, 0x6f, 0x74, 0x61, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x71, 0x92, 0x41, 0x6e, 0x0a, 0x6c, 0x2a, 0x2d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d, 0xe9,
	0xa2, 0x9d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe5, 0x90,
	0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x2a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x32,
	0x06, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x3a, 0x7f, 0x92, 0x41, 0x7c, 0x0a, 0x7a, 0x2a, 0x2c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0x51, 0x75, 0x6f, 0x74, 0x61, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x22, 0x8c, 0x03, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x71, 0x92, 0x41, 0x6e, 0x0a, 0x6c, 0x2a, 0x2d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d,
	0xe9, 0xa2, 0x9d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x77, 0x92, 0x41, 0x74,
	0x0a, 0x72, 0x2a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x23, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x51, 0x75, 0x6f, 0x74, 0x61, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x2d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x71, 0x92, 0x41, 0x6e, 0x0a, 0x6c, 0x2a, 0x2d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d,
	0xe9, 0xa2, 0x9d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x74, 0x92, 0x41, 0x71, 0x0a, 0x6f, 0x2a,
	0x29, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x51, 0x75, 0x6f, 0x74, 0x61, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4,
	0x03, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x75, 0x92, 0x41, 0x72, 0x0a, 0x70, 0x2a, 0x2a, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x0c, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x74,
	0x92, 0x41, 0x71, 0x0a, 0x6f, 0x2a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x29, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xd6, 0x03, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77,
	0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x76, 0x92, 0x41,
	0x73, 0x0a, 0x71, 0x2a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x2a, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0xe9, 0x85, 0x8d, 0xe9, 0xa2, 0x9d, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a,
	0x0e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x47, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x22, 0xcb, 0x04, 0x0a, 0x2a, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x15, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x67, 0x92,
	0x41, 0x64, 0x0a, 0x62, 0x2a, 0x1f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x3f, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8,
	0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x8c, 0xe7, 0xba, 0xa7, 0xe7, 0x9b,
	0xae, 0xe5, 0xbd, 0x95, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0xad, 0x90,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x22, 0xd9, 0x03, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81,
	0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9,
	0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a,
	0x20, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x87, 0x06, 0x0a, 0x1f, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x2a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32,
	0x0a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x2a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x32,
	0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52,
	0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x17, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25,
	0x2a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9,
	0x97, 0xb4, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x6f, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42,
	0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x32, 0x0f, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x1f, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x21, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe5, 0xad, 0x90,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0xf7, 0x09, 0x0a,
	0x14, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a,
	0x2a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0a,
	0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x2a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe9,
	0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x32, 0x0b, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x52, 0x0a,
	0x10, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x10, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0f,
	0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52,
	0x10, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x69, 0x0a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x33, 0x92, 0x41, 0x30, 0x2a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x17, 0xe6, 0x89,
	0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x2a, 0x0f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x1b, 0xe6, 0x89, 0x80,
	0xe5, 0xb1, 0x9e, 0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x17, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48,
	0x2a, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x2d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xef, 0xbc,
	0x8c, 0xe9, 0x80, 0x9a, 0xe5, 0xb8, 0xb8, 0xe6, 0x98, 0xaf, 0xe5, 0xb0, 0x8f, 0xe5, 0x86, 0x99,
	0xe7, 0x9a, 0x84, 0x62, 0x63, 0x73, 0x49, 0x44, 0x52, 0x17, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x7d, 0x0a, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x2a, 0x1c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x16, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9,
	0x97, 0xb4, 0x52, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0f, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x69, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x2a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x32, 0x0f, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0xa0, 0x87,
	0xe7, 0xad, 0xbe, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a,
	0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x32, 0x18, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x52, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a, 0x1d, 0x2a, 0x0a, 0x53, 0x75, 0x62, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0xad, 0x90,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x22, 0xcb, 0x04, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2a, 0x92, 0x41,
	0x27, 0x2a, 0x0e, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x15, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x9f, 0xa5, 0xe8,
	0xaf, 0xa2, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x6a, 0x92, 0x41, 0x67, 0x0a, 0x65, 0x2a,
	0x1f, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x42, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xef, 0xbc, 0x8c, 0xe4, 0xba, 0x8c, 0xe7, 0xba, 0xa7, 0xe7, 0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe4,
	0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9,
	0xba, 0xe9, 0x97, 0xb4, 0x22, 0xd7, 0x03, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x20, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xaa,
	0x06, 0x0a, 0x1e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x60, 0x0a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x0e, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x15, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x12,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0a, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5,
	0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32,
	0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x15,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x32,
	0x18, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x1f, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75,
	0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x21, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x8c, 0x85, 0xe5, 0x90, 0xab, 0xe5, 0xad, 0x90, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x22, 0x84, 0x05, 0x0a, 0x13,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0a, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x08, 0xe9, 0xa1, 0xb9,
	0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x67, 0x0a, 0x14, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0x92, 0x41, 0x30, 0x2a, 0x14, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x32, 0x18, 0xe8, 0x81, 0x94, 0xe9,
	0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x90,
	0x8d, 0xe5, 0xad, 0x97, 0x52, 0x14, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x15,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x2a, 0x0f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x12, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52,
	0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x12, 0x43, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37,
	0x2a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x27,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0xaf, 0xe8,
	0xb0, 0x83, 0xe5, 0xba, 0xa6, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe8, 0x8c, 0x83, 0xe5, 0x9b, 0xb4, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x13, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x32, 0x0f, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x22, 0x70, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x3a, 0x2f, 0x92, 0x41, 0x2c, 0x0a, 0x2a, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xf3, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe5, 0x93, 0x8d, 0xe5, 0xba,
	0x94, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x27, 0x2a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x32, 0x1a, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95,
	0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x32, 0x09, 0xe5,
	0x81, 0x8f, 0xe7, 0xa7, 0xbb, 0xe9, 0x87, 0x8f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x15, 0x92, 0x41, 0x12, 0x2a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x09, 0xe9, 0x99, 0x90,
	0xe5, 0x88, 0xb6, 0xe9, 0x87, 0x8f, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x59, 0x92,
	0x41, 0x56, 0x0a, 0x54, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82,
	0xd2, 0x01, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0xd2, 0x01, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0xd2, 0x01, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x97, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x1b, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xef,
	0xbc, 0x8c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x43, 0x92, 0x41, 0x40, 0x0a, 0x3e, 0x2a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8,
	0xa1, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2,
	0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x2a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x12, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe8, 0xb5, 0xb7, 0xe5, 0xa7,
	0x8b, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0x52, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x10, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x12, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x22, 0xa7, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x26, 0x92, 0x41, 0x23, 0x2a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x1b, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xef, 0xbc, 0x8c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x11, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x12, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf7, 0x0b,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x56, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x2a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x27, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe7, 0xb4, 0xa2, 0xe5, 0xbc, 0x95, 0xef, 0xbc, 0x8c, 0xe5, 0xae, 0xa2, 0xe6, 0x88,
	0xb7, 0xe7, 0xab, 0xaf, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe6, 0xad, 0xa4, 0xe5, 0xad, 0x97,
	0xe6, 0xae, 0xb5, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x32, 0x08, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18,
	0x2a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x2a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x70, 0x32, 0x0c, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x2a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x32,
	0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0xba, 0x8f, 0xe5, 0x88, 0x97, 0x52, 0x0c, 0x73,
	0x74, 0x65, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x2a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x32, 0x0c, 0xe6, 0xad, 0xa5, 0xe9,
	0xaa, 0xa4, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x58, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41,
	0x26, 0x2a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0x12, 0xe5, 0x9b, 0x9e, 0xe8, 0xb0, 0x83, 0xe5, 0x87, 0xbd, 0xe6, 0x95,
	0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x46, 0x75, 0x6e, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x32, 0x0c,
	0xe9, 0x80, 0x9a, 0xe7, 0x94, 0xa8, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x32, 0x13,
	0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0x4a, 0x53, 0x4f, 0x4e, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x06, 0xe6, 0xb6, 0x88, 0xe6,
	0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x2a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x32, 0x0c, 0xe5, 0xbc, 0xba, 0xe5, 0x88,
	0xb6, 0xe7, 0xbb, 0x88, 0xe6, 0xad, 0xa2, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x32, 0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x03, 0x65, 0x6e, 0x64, 0x32, 0x0c,
	0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x47, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6,
	0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x13,
	0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x89, 0xa7, 0xe8, 0xa1,
	0x8c, 0xe7, 0xa7, 0x92, 0xe6, 0x95, 0xb0, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92,
	0x41, 0x14, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x44, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x32, 0x09, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x80, 0x85, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x1a, 0x51, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x19, 0x92, 0x41,
	0x16, 0x0a, 0x14, 0x2a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x22, 0x8b, 0x07, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa,
	0xa4, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x2a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x32, 0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4,
	0xe5, 0x88, 0xab, 0xe5, 0x90, 0x8d, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x56, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x19, 0x92, 0x41, 0x16, 0x2a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x32,
	0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x32, 0x12, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x0c, 0xe6, 0xad, 0xa5,
	0xe9, 0xaa, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x25, 0x92, 0x41, 0x22, 0x2a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x32, 0x12, 0xe5, 0x9c, 0xa8, 0xe5, 0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x97, 0xb6,
	0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x2a, 0x0a,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x0c, 0xe9, 0x87, 0x8d, 0xe8,
	0xaf, 0x95, 0xe6, 0xac, 0xa1, 0xe6, 0x95, 0xb0, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x32,
	0x0c, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x2a, 0x03, 0x65, 0x6e, 0x64, 0x32, 0x0c, 0xe7, 0xbb, 0x93,
	0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x47,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x0d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x89, 0xa7, 0xe8,
	0xa1, 0x8c, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x2a, 0x13, 0x6d, 0x61, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x32, 0x12, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x89, 0xa7, 0xe8, 0xa1, 0x8c, 0xe7, 0xa7,
	0x92, 0xe6, 0x95, 0xb0, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0x92, 0x41, 0x20, 0x2a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x32,
	0x12, 0xe6, 0x9c, 0x80, 0xe5, 0x90, 0x8e, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6,
	0xe9, 0x97, 0xb4, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x19, 0x92, 0x41, 0x16, 0x0a,
	0x14, 0x2a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x32, 0x0c, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5,
	0xae, 0x9a, 0xe4, 0xb9, 0x89, 0x22, 0x7c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92,
	0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x3a, 0x35, 0x92, 0x41,
	0x32, 0x0a, 0x30, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x22, 0x83, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a,
	0x2f, 0x2a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xbb,
	0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xa5,
	0xe5, 0xbf, 0x97, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5a, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x65, 0x70, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x32, 0x18, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe8, 0xaf, 0xa6, 0xe6, 0x83,
	0x85, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0xf7, 0x04,
	0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a,
	0xa1, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x1a, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x28, 0xe5,
	0x90, 0x8c, 0xe4, 0xb8, 0x8a, 0x29, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x32, 0x15, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xbc, 0x80, 0xe5, 0xa7, 0x8b, 0xe6,
	0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x15, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x23, 0x92, 0x41, 0x20, 0x2a, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x15, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe7, 0xbb, 0x93,
	0xe6, 0x9d, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x7b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x2a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69,
	0x70, 0x32, 0x31, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae,
	0xb8, 0xe8, 0xb7, 0xb3, 0xe8, 0xbf, 0x87, 0x2c, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x86,
	0x85, 0xe7, 0xbd, 0xae, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x12,
	0x95, 0x01, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x59, 0x92, 0x41, 0x56, 0x2a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x32, 0x48, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0xad, 0xa5, 0xe9, 0xaa, 0xa4, 0xe5,
	0xa4, 0xb1, 0xe8, 0xb4, 0xa5, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x85, 0x81, 0xe8, 0xae,
	0xb8, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x28, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0xe9, 0x83,
	0xbd, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe9, 0x87, 0x8d, 0xe8, 0xaf, 0x95, 0x29, 0x2c, 0xe7,
	0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe5, 0x86, 0x85, 0xe7, 0xbd, 0xae, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x74, 0x72, 0x79, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x2a, 0x03, 0x6c, 0x6f, 0x67, 0x32, 0x0f, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xa1, 0x8c,
	0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x09,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe6, 0x88, 0xb3, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x2a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x1f, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0x28, 0x49, 0x4e,
	0x46, 0x4f, 0x2c, 0x20, 0x57, 0x41, 0x52, 0x4e, 0x2c, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x29,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf9, 0x0c, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49,
	0x44, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x17, 0x2a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8,
	0x80, 0x85, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x68, 0x92, 0x41, 0x65,
	0x2a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x55, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba,
	0x8e, 0xe6, 0x9e, 0x84, 0xe5, 0xbb, 0xba, 0x62, 0x63, 0x73, 0x2d, 0x75, 0x6e, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe4,
	0xb8, 0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x88, 0x99, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0xe7, 0x9a, 0x84, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x80, 0x01, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0xc3, 0x01, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9a, 0x01, 0x92, 0x41, 0x96, 0x01,
	0x2a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x32, 0x83, 0x01, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49,
	0x64, 0x2c, 0x20, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x9e, 0x84, 0xe5, 0xbb, 0xba, 0x62,
	0x63, 0x73, 0x2d, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0xe7, 0x9a, 0x84, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2c, 0x20,
	0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0x6c, 0x62, 0x49, 0x64, 0xe5, 0x92, 0x8c, 0xe5, 0xad, 0x90,
	0xe7, 0xbd, 0x91, 0x49, 0x64, 0x2c, 0x20, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a,
	0xe5, 0x88, 0x99, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7,
	0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xbd, 0x91, 0x69, 0x64, 0xe8, 0xbf, 0x9b, 0xe8, 0xa1, 0x8c,
	0xe5, 0x88, 0x86, 0xe9, 0x85, 0x8d, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x3d, 0x2a, 0x13, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x32, 0x23, 0xe8,
	0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae,
	0x49, 0x64, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x13,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x41, 0x2a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x25, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80,
	0xe5, 0xb1, 0x9e, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xb9, 0xe7,
	0x9b, 0xae, 0x43, 0x6f, 0x64, 0x65, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x64, 0x52, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x79, 0x0a, 0x15, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x37, 0x2a, 0x15, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0x1b, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe4, 0xbb, 0xa3, 0xe7,
	0x90, 0x86, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90,
	0x8d, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x15, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x35, 0x2a, 0x14, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x32, 0x1a, 0xe8,
	0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1,
	0x9e, 0xe4, 0xb8, 0x9a, 0xe5, 0x8a, 0xa1, 0x49, 0x64, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x14, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x14, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x6e, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41, 0x33, 0x2a, 0x14,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x76, 0x32, 0x18, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe6, 0x89, 0x80, 0xe5, 0xb1, 0x9e, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0x80, 0x01,
	0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x14, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x76,
	0x12, 0x8f, 0x01, 0x0a, 0x1c, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x3e, 0x2a, 0x1c, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x1e, 0xe8, 0x81, 0x94, 0xe9,
	0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xae,
	0x80, 0xe8, 0xa6, 0x81, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x00, 0x18, 0x80, 0x08, 0x52, 0x1c, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xf7, 0x01, 0x0a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x73,
	0x92, 0x41, 0x68, 0x2a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x4d, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0x9a, 0x84, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x90, 0xba, 0xe5,
	0xb8, 0xa6, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a, 0x84, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97,
	0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0x31, 0x39, 0xe4, 0xb8, 0xaa, 0xfa, 0x42, 0x05, 0x9a, 0x01,
	0x02, 0x10, 0x13, 0x52, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x4a, 0x0a, 0x1c,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a,
	0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0xae, 0x89, 0xe8, 0xa3,
	0x85, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2, 0x01, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0xc2, 0x03, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e,
	0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e,
	0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5f,
	0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8,
	0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x1a, 0x55, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92,
	0x41, 0x18, 0x2a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5, 0x88,
	0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x49, 0x92,
	0x41, 0x46, 0x0a, 0x44, 0x2a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12,
	0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0xd2, 0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xc4, 0x03, 0x0a, 0x1b, 0x55, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7,
	0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x0c, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x20, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e,
	0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x4b, 0x0a, 0x1a, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92,
	0x41, 0x12, 0x2a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x32, 0x08, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xd5, 0x03, 0x0a,
	0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92,
	0x41, 0x18, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x08, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x17, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x09, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x64, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x86, 0x01,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x68, 0x92, 0x41, 0x65, 0x2a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x32, 0x55, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xef, 0xbc,
	0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe6, 0x9e, 0x84, 0xe5, 0xbb, 0xba, 0x62, 0x63, 0x73,
	0x2d, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0xef, 0xbc, 0x8c, 0xe4, 0xb8, 0x8d, 0xe6, 0x8c, 0x87, 0xe5, 0xae, 0x9a, 0xe5, 0x88,
	0x99, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0x80, 0x85,
	0xe7, 0x9a, 0x84, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x80, 0x01, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41,
	0x1e, 0x2a, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32,
	0x0b, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x80, 0x01, 0x01, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x19, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c,
	0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xd2,
	0x01, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0xd2, 0x01, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0xd2, 0x01, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x38, 0x92, 0x41, 0x35, 0x0a, 0x33, 0x2a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x15, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0xad, 0x90, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75,
	0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x18, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x32, 0x08, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x80, 0x01, 0x01, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1e, 0x2a, 0x0c,
	0x73, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x32, 0x0b, 0xe5, 0xad,
	0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0x92, 0x41, 0x2a, 0x2a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x32, 0x1f, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xb8, 0x8e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0xe7, 0x9b, 0xb8, 0xe5, 0x90, 0x8c, 0x80, 0x01, 0x01,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x3a,
	0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75,
	0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x15, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x98, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41,
	0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x2a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x15, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x1b, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x1b, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf,
	0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x94, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32,
	0x2a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x12,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x19, 0x2a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x32, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x3a, 0x90, 0x01, 0x92, 0x41, 0x8c, 0x01, 0x0a, 0x89, 0x01, 0x2a, 0x21,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x64, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d, 0xae, 0x68, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x9c, 0xa8, 0xe5, 0xae, 0x89,
	0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xad, 0xe5, 0x88, 0x99, 0xe4, 0xbc, 0x9a, 0xe5, 0x90, 0x8c, 0xe6,
	0x97, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a,
	0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x22, 0xbb, 0x03, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9,
	0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x59, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x17, 0x92, 0x41, 0x14,
	0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95,
	0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x50, 0x92, 0x41, 0x4d, 0x0a,
	0x4b, 0x2a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x25, 0xe6, 0x8d, 0xae, 0x68, 0x6f, 0x73, 0x74, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x32, 0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a,
	0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xae, 0x89, 0xe8,
	0xa3, 0x85, 0xe4, 0xb8, 0xad, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x22, 0xc4, 0x03, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x59,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x17, 0x92, 0x41, 0x14, 0x2a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f,
	0x2a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0xe5, 0x88, 0x97, 0xe5, 0x87,
	0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe4, 0xb8, 0xad,
	0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x15, 0x2a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x32, 0x08, 0xe9, 0xa1,
	0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x18, 0xe8,
	0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x9c, 0x03, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf,
	0xe7, 0xa0, 0x81, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81,
	0xaf, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x17,
	0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5, 0xba,
	0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6e, 0x0a,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77,
	0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x3e, 0x92,
	0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x18, 0xe5, 0x88, 0x97, 0xe5, 0x87, 0xba, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b,
	0xae, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x5a, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x2a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x2a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x32, 0x15, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94,
	0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0x98, 0x07, 0x0a, 0x11, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x2a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x32, 0x0e, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44,
	0x52, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x2a, 0x17, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97, 0x52, 0x17, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x2a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x32, 0x12, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0x49, 0x44, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92,
	0x41, 0x1a, 0x2a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x32, 0x0a, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x2a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x32,
	0x08, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x2a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x0c,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x2a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97,
	0xb4, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x06, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6f, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x2a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x32, 0x0f,
	0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x92, 0x01,
	0x0a, 0x15, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x34, 0x92, 0x41, 0x31, 0x2a, 0x15, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x32, 0x18, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x15, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x21, 0x2a, 0x11, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x32, 0x0c, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x32, 0xba, 0x35, 0x0a, 0x11, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0xb0, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75,
	0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x22, 0x2f, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6c, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4c, 0x12, 0x24, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8,
	0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe5, 0x8f, 0x8a, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x24, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x8f, 0x8a, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x12, 0xb7, 0x02, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x22, 0x2d, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6c, 0x6c, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x58, 0x12, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5,
	0x8f, 0x8a, 0xe5, 0x85, 0xb6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x1a, 0x2a, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x8f, 0x8a, 0xe5, 0x85,
	0xb6, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0x9d, 0x01,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x7d, 0x92, 0x41,
	0x1c, 0x12, 0x0c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a,
	0x0c, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0xa9, 0x01,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x23, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b,
	0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x28, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb,
	0xe5, 0x8a, 0xa1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0xac, 0x01, 0x0a, 0x09, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1c, 0x12, 0x0c, 0xe9, 0x87,
	0x8d, 0xe8, 0xaf, 0x95, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x0c, 0xe9, 0x87, 0x8d, 0xe8,
	0xaf, 0x95, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x12, 0xc1, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x7d, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4, 0xbb, 0xbb, 0xe5,
	0x8a, 0xa1, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x1a, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe8, 0xae, 0xb0, 0xe5, 0xbd, 0x95, 0x12, 0xe9, 0x01, 0x0a,
	0x11, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3a, 0x12, 0x1b,
	0xe4, 0xb8, 0xba, 0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x1a, 0x1b, 0xe4, 0xb8, 0xba,
	0xe7, 0x8b, 0xac, 0xe7, 0xab, 0x8b, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0xae, 0x89, 0xe8,
	0xa3, 0x85, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0x12, 0xeb, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x34, 0x12, 0x18, 0xe5, 0x8d, 0xb8, 0xe8, 0xbd, 0xbd, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x18, 0xe5, 0x8d,
	0xb8, 0xe8, 0xbd, 0xbd, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6,
	0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x12, 0x89, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x22, 0x47, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73,
	0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x40, 0x12, 0x1e, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x1a, 0x1e, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0x12, 0x83, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75,
	0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a, 0x4a, 0x2f, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x7b, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe5,
	0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x1e, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe7, 0xa7, 0xbb, 0xe9, 0x99, 0xa4, 0xe5,
	0xad, 0x90, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x12, 0xd5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x7d, 0x92, 0x41, 0x28, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x12, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x12, 0xb0, 0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x34, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x02, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x92, 0x41, 0xeb, 0x01, 0x12, 0xc1, 0x01, 0xe8, 0xaf, 0xb7, 0xe6, 0x9a,
	0x82, 0xe5, 0x8b, 0xbf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe4, 0xb8, 0x8d, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe4, 0xbc, 0x9a, 0xe6, 0x9f, 0xa5, 0xe6, 0x89, 0xbe, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe5, 0xa6,
	0x82, 0xe6, 0x9e, 0x9c, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8,
	0xef, 0xbc, 0x8c, 0xe5, 0x88, 0x99, 0xe4, 0xbc, 0x9a, 0xe6, 0x9e, 0x84, 0xe9, 0x80, 0xa0, 0xe4,
	0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xb9,
	0xb6, 0xe5, 0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x85, 0xb3,
	0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x25, 0xe6, 0x9f,
	0xa5, 0xe8, 0xaf, 0xa2, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85,
	0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86,
	0xe7, 0xbe, 0xa4, 0x12, 0x96, 0x03, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x92, 0x41, 0xb2, 0x01, 0x12, 0x88, 0x01, 0xe8, 0xaf, 0xb7,
	0xe6, 0x9a, 0x82, 0xe5, 0x8b, 0xbf, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xef, 0xbc, 0x8c, 0xe4,
	0xbb, 0x8e, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe4, 0xb8,
	0xad, 0xe6, 0x9f, 0xa5, 0xe6, 0x89, 0xbe, 0xe6, 0x9c, 0xaa, 0xe5, 0xae, 0x8c, 0xe6, 0xb5, 0x81,
	0xe7, 0xa8, 0x8b, 0xe7, 0x9a, 0x84, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xef, 0xbc, 0x8c, 0xe6,
	0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0xb9, 0xb6, 0xe5, 0x90, 0x8c, 0xe6, 0x97, 0xb6,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe4,
	0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0x1a, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x48, 0x6f, 0x73,
	0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x12, 0x88, 0x02, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x12, 0x32, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x92, 0x41, 0x4e, 0x12, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81,
	0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0x1a, 0x25, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0x48, 0x6f, 0x73, 0x74, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x85, 0xb3, 0xe8, 0x81, 0x94, 0xe7, 0x9a, 0x84, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x12, 0xa5, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33,
	0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x46, 0x12, 0x21, 0xe4, 0xb8, 0xba, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x21, 0xe4, 0xb8,
	0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12,
	0xab, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x1a, 0x3f, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x1e, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0xa8, 0x02,
	0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x3a, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x41, 0x2a, 0x3f, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x1e, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4,
	0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5,
	0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0x9f, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x92, 0x41, 0x40, 0x12, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x1a, 0x1e, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91,
	0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x12, 0xa6, 0x02, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x34, 0x2f, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4c, 0x12, 0x24, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8,
	0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x24, 0xe8,
	0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x12, 0xd0, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x3f, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa3, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x45, 0x2f, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x50, 0x12, 0x26, 0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82,
	0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba,
	0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0x26,
	0xe4, 0xb8, 0xba, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5,
	0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0xd1, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x12, 0x3f, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x1a, 0x4c, 0x2f, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x4a,
	0x12, 0x23, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b,
	0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0x23, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0x81, 0x94,
	0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7,
	0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0xce, 0x02, 0x0a, 0x25, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x3f, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e,
	0x2a, 0x4c, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x7d, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41,
	0x4a, 0x12, 0x23, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0x23, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0x81,
	0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d,
	0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0xc5, 0x02, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x3c, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x7d, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x4a, 0x12, 0x23, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f,
	0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd,
	0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x1a, 0x23,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7,
	0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0xd1, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x3d, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4b, 0x22, 0x46, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x7d, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x56, 0x12, 0x29, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9,
	0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97,
	0xb4, 0x71, 0x75, 0x6f, 0x74, 0x61, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x1a, 0x29, 0xe8, 0x8e,
	0xb7, 0xe5, 0x8f, 0x96, 0xe8, 0x81, 0x94, 0xe9, 0x82, 0xa6, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4,
	0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xe7, 0xa9, 0xba, 0xe9, 0x97, 0xb4, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x42, 0x81, 0x01, 0x5a, 0x30, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x73, 0x2d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3b, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x92, 0x41, 0x4c, 0x12,
	0x23, 0x0a, 0x1a, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05, 0x30,
	0x2e, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescOnce sync.Once
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescData = file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDesc
)

func file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescGZIP() []byte {
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescOnce.Do(func() {
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescData)
	})
	return file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDescData
}

var file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_proto_bcs_federation_manager_bcs_federation_manager_proto_goTypes = []interface{}{
	(*CreateFederationClusterNamespaceRequest)(nil),       // 0: federationmanager.CreateFederationClusterNamespaceRequest
	(*NamespaceSubClusterAffinity)(nil),                   // 1: federationmanager.NamespaceSubClusterAffinity
	(*LabelSelector)(nil),                                 // 2: federationmanager.LabelSelector
	(*LabelSelectorRequirement)(nil),                      // 3: federationmanager.LabelSelectorRequirement
	(*K8SResource)(nil),                                   // 4: federationmanager.K8SResource
	(*Quota)(nil),                                         // 5: federationmanager.Quota
	(*CreateFederationClusterNamespaceResponse)(nil),      // 6: federationmanager.CreateFederationClusterNamespaceResponse
	(*UpdateFederationClusterNamespaceRequest)(nil),       // 7: federationmanager.UpdateFederationClusterNamespaceRequest
	(*UpdateFederationClusterNamespaceResponse)(nil),      // 8: federationmanager.UpdateFederationClusterNamespaceResponse
	(*DeleteFederationClusterNamespaceRequest)(nil),       // 9: federationmanager.DeleteFederationClusterNamespaceRequest
	(*DeleteFederationClusterNamespaceResponse)(nil),      // 10: federationmanager.DeleteFederationClusterNamespaceResponse
	(*FederationClusterNamespaceData)(nil),                // 11: federationmanager.FederationClusterNamespaceData
	(*GetFederationClusterNamespaceRequest)(nil),          // 12: federationmanager.GetFederationClusterNamespaceRequest
	(*GetFederationClusterNamespaceResponse)(nil),         // 13: federationmanager.GetFederationClusterNamespaceResponse
	(*ListFederationClusterNamespaceRequest)(nil),         // 14: federationmanager.ListFederationClusterNamespaceRequest
	(*ListFederationClusterNamespaceResponse)(nil),        // 15: federationmanager.ListFederationClusterNamespaceResponse
	(*CreateFederationClusterNamespaceQuotaRequest)(nil),  // 16: federationmanager.CreateFederationClusterNamespaceQuotaRequest
	(*CreateFederationClusterNamespaceQuotaResponse)(nil), // 17: federationmanager.CreateFederationClusterNamespaceQuotaResponse
	(*UpdateFederationClusterNamespaceQuotaRequest)(nil),  // 18: federationmanager.UpdateFederationClusterNamespaceQuotaRequest
	(*UpdateFederationClusterNamespaceQuotaResponse)(nil), // 19: federationmanager.UpdateFederationClusterNamespaceQuotaResponse
	(*DeleteFederationClusterNamespaceQuotaRequest)(nil),  // 20: federationmanager.DeleteFederationClusterNamespaceQuotaRequest
	(*DeleteFederationClusterNamespaceQuotaResponse)(nil), // 21: federationmanager.DeleteFederationClusterNamespaceQuotaResponse
	(*GetFederationClusterNamespaceQuotaRequest)(nil),     // 22: federationmanager.GetFederationClusterNamespaceQuotaRequest
	(*GetFederationClusterNamespaceQuotaResponse)(nil),    // 23: federationmanager.GetFederationClusterNamespaceQuotaResponse
	(*ListFederationClusterNamespaceQuotaRequest)(nil),    // 24: federationmanager.ListFederationClusterNamespaceQuotaRequest
	(*ListFederationClusterNamespaceQuotaResponse)(nil),   // 25: federationmanager.ListFederationClusterNamespaceQuotaResponse
	(*WebAnnotations)(nil),                                // 26: federationmanager.WebAnnotations
	(*ListFederationClusterWithSubclusterRequest)(nil),    // 27: federationmanager.ListFederationClusterWithSubclusterRequest
	(*ListFederationClusterWithSubclusterResponse)(nil),   // 28: federationmanager.ListFederationClusterWithSubclusterResponse
	(*FederationClusterWithSubcluster)(nil),               // 29: federationmanager.FederationClusterWithSubcluster
	(*FederationSubCluster)(nil),                          // 30: federationmanager.FederationSubCluster
	(*ListFederationClusterWithNamespaceRequest)(nil),     // 31: federationmanager.ListFederationClusterWithNamespaceRequest
	(*ListFederationClusterWithNamespaceResponse)(nil),    // 32: federationmanager.ListFederationClusterWithNamespaceResponse
	(*FederationClusterWithNamespace)(nil),                // 33: federationmanager.FederationClusterWithNamespace
	(*FederationNamespace)(nil),                           // 34: federationmanager.FederationNamespace
	(*GetTaskRequest)(nil),                                // 35: federationmanager.GetTaskRequest
	(*GetTaskResponse)(nil),                               // 36: federationmanager.GetTaskResponse
	(*ListTasksRequest)(nil),                              // 37: federationmanager.ListTasksRequest
	(*ListTasksResponse)(nil),                             // 38: federationmanager.ListTasksResponse
	(*RetryTaskRequest)(nil),                              // 39: federationmanager.RetryTaskRequest
	(*RetryTaskResponse)(nil),                             // 40: federationmanager.RetryTaskResponse
	(*Task)(nil),                                          // 41: federationmanager.Task
	(*Step)(nil),                                          // 42: federationmanager.Step
	(*GetTaskRecordRequest)(nil),                          // 43: federationmanager.GetTaskRecordRequest
	(*GetTaskRecordResponse)(nil),                         // 44: federationmanager.GetTaskRecordResponse
	(*TaskRecord)(nil),                                    // 45: federationmanager.TaskRecord
	(*TaskRecordStep)(nil),                                // 46: federationmanager.TaskRecordStep
	(*TaskRecordStepData)(nil),                            // 47: federationmanager.TaskRecordStepData
	(*InstallFederationRequest)(nil),                      // 48: federationmanager.InstallFederationRequest
	(*InstallFederationResponse)(nil),                     // 49: federationmanager.InstallFederationResponse
	(*UnInstallFederationRequest)(nil),                    // 50: federationmanager.UnInstallFederationRequest
	(*UnInstallFederationResponse)(nil),                   // 51: federationmanager.UnInstallFederationResponse
	(*TaskDistributeResponseData)(nil),                    // 52: federationmanager.TaskDistributeResponseData
	(*RegisterSubclusterRequest)(nil),                     // 53: federationmanager.RegisterSubclusterRequest
	(*RegisterSubclusterResponse)(nil),                    // 54: federationmanager.RegisterSubclusterResponse
	(*RemoveSubclusterRequest)(nil),                       // 55: federationmanager.RemoveSubclusterRequest
	(*RemoveSubclusterResponse)(nil),                      // 56: federationmanager.RemoveSubclusterResponse
	(*GetFederationClusterRequest)(nil),                   // 57: federationmanager.GetFederationClusterRequest
	(*GetFederationClusterResponse)(nil),                  // 58: federationmanager.GetFederationClusterResponse
	(*GetFederationByHostClusterRequest)(nil),             // 59: federationmanager.GetFederationByHostClusterRequest
	(*GetFederationByHostClusterResponse)(nil),            // 60: federationmanager.GetFederationByHostClusterResponse
	(*ListProjectInstallingFederationRequest)(nil),        // 61: federationmanager.ListProjectInstallingFederationRequest
	(*ListProjectInstallingFederationResponse)(nil),       // 62: federationmanager.ListProjectInstallingFederationResponse
	(*ListProjectFederationRequest)(nil),                  // 63: federationmanager.ListProjectFederationRequest
	(*ListProjectFederationResponse)(nil),                 // 64: federationmanager.ListProjectFederationResponse
	(*FederationClusterWithTask)(nil),                     // 65: federationmanager.FederationClusterWithTask
	(*FederationCluster)(nil),                             // 66: federationmanager.FederationCluster
	nil,                                                   // 67: federationmanager.CreateFederationClusterNamespaceRequest.AnnotationsEntry
	nil,                                                   // 68: federationmanager.LabelSelector.MatchLabelsEntry
	nil,                                                   // 69: federationmanager.Quota.AttributesEntry
	nil,                                                   // 70: federationmanager.Quota.AnnotationsEntry
	nil,                                                   // 71: federationmanager.UpdateFederationClusterNamespaceRequest.AnnotationsEntry
	nil,                                                   // 72: federationmanager.FederationClusterNamespaceData.AnnotationsEntry
	nil,                                                   // 73: federationmanager.ListFederationClusterWithSubclusterRequest.ConditionsEntry
	nil,                                                   // 74: federationmanager.ListFederationClusterWithSubclusterRequest.SubConditionsEntry
	nil,                                                   // 75: federationmanager.FederationSubCluster.LabelsEntry
	nil,                                                   // 76: federationmanager.ListFederationClusterWithNamespaceRequest.ConditionsEntry
	nil,                                                   // 77: federationmanager.ListFederationClusterWithNamespaceRequest.SubConditionsEntry
	nil,                                                   // 78: federationmanager.Task.StepsEntry
	nil,                                                   // 79: federationmanager.Task.CommonParamsEntry
	nil,                                                   // 80: federationmanager.Step.ParamsEntry
	nil,                                                   // 81: federationmanager.InstallFederationRequest.FederationClusterLabelsEntry
	(*_struct.Struct)(nil),                                // 82: google.protobuf.Struct
	(*wrappers.BoolValue)(nil),                            // 83: google.protobuf.BoolValue
}
var file_proto_bcs_federation_manager_bcs_federation_manager_proto_depIdxs = []int32{
	67,  // 0: federationmanager.CreateFederationClusterNamespaceRequest.annotations:type_name -> federationmanager.CreateFederationClusterNamespaceRequest.AnnotationsEntry
	1,   // 1: federationmanager.CreateFederationClusterNamespaceRequest.clusterAffinity:type_name -> federationmanager.NamespaceSubClusterAffinity
	5,   // 2: federationmanager.CreateFederationClusterNamespaceRequest.quotaList:type_name -> federationmanager.Quota
	2,   // 3: federationmanager.NamespaceSubClusterAffinity.labelSelector:type_name -> federationmanager.LabelSelector
	68,  // 4: federationmanager.LabelSelector.matchLabels:type_name -> federationmanager.LabelSelector.MatchLabelsEntry
	3,   // 5: federationmanager.LabelSelector.matchExpressions:type_name -> federationmanager.LabelSelectorRequirement
	69,  // 6: federationmanager.Quota.Attributes:type_name -> federationmanager.Quota.AttributesEntry
	4,   // 7: federationmanager.Quota.ResourceList:type_name -> federationmanager.K8SResource
	70,  // 8: federationmanager.Quota.annotations:type_name -> federationmanager.Quota.AnnotationsEntry
	26,  // 9: federationmanager.CreateFederationClusterNamespaceResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	71,  // 10: federationmanager.UpdateFederationClusterNamespaceRequest.annotations:type_name -> federationmanager.UpdateFederationClusterNamespaceRequest.AnnotationsEntry
	1,   // 11: federationmanager.UpdateFederationClusterNamespaceRequest.clusterAffinity:type_name -> federationmanager.NamespaceSubClusterAffinity
	26,  // 12: federationmanager.UpdateFederationClusterNamespaceResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	26,  // 13: federationmanager.DeleteFederationClusterNamespaceResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	72,  // 14: federationmanager.FederationClusterNamespaceData.annotations:type_name -> federationmanager.FederationClusterNamespaceData.AnnotationsEntry
	1,   // 15: federationmanager.FederationClusterNamespaceData.clusterAffinity:type_name -> federationmanager.NamespaceSubClusterAffinity
	11,  // 16: federationmanager.GetFederationClusterNamespaceResponse.data:type_name -> federationmanager.FederationClusterNamespaceData
	26,  // 17: federationmanager.GetFederationClusterNamespaceResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	11,  // 18: federationmanager.ListFederationClusterNamespaceResponse.data:type_name -> federationmanager.FederationClusterNamespaceData
	26,  // 19: federationmanager.ListFederationClusterNamespaceResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	5,   // 20: federationmanager.CreateFederationClusterNamespaceQuotaRequest.quotaList:type_name -> federationmanager.Quota
	26,  // 21: federationmanager.CreateFederationClusterNamespaceQuotaResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	5,   // 22: federationmanager.UpdateFederationClusterNamespaceQuotaRequest.quota:type_name -> federationmanager.Quota
	26,  // 23: federationmanager.UpdateFederationClusterNamespaceQuotaResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	26,  // 24: federationmanager.DeleteFederationClusterNamespaceQuotaResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	5,   // 25: federationmanager.GetFederationClusterNamespaceQuotaResponse.data:type_name -> federationmanager.Quota
	26,  // 26: federationmanager.GetFederationClusterNamespaceQuotaResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	5,   // 27: federationmanager.ListFederationClusterNamespaceQuotaResponse.data:type_name -> federationmanager.Quota
	26,  // 28: federationmanager.ListFederationClusterNamespaceQuotaResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	82,  // 29: federationmanager.WebAnnotations.perms:type_name -> google.protobuf.Struct
	73,  // 30: federationmanager.ListFederationClusterWithSubclusterRequest.conditions:type_name -> federationmanager.ListFederationClusterWithSubclusterRequest.ConditionsEntry
	74,  // 31: federationmanager.ListFederationClusterWithSubclusterRequest.sub_conditions:type_name -> federationmanager.ListFederationClusterWithSubclusterRequest.SubConditionsEntry
	29,  // 32: federationmanager.ListFederationClusterWithSubclusterResponse.data:type_name -> federationmanager.FederationClusterWithSubcluster
	26,  // 33: federationmanager.ListFederationClusterWithSubclusterResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	30,  // 34: federationmanager.FederationClusterWithSubcluster.sub_clusters:type_name -> federationmanager.FederationSubCluster
	75,  // 35: federationmanager.FederationSubCluster.labels:type_name -> federationmanager.FederationSubCluster.LabelsEntry
	76,  // 36: federationmanager.ListFederationClusterWithNamespaceRequest.conditions:type_name -> federationmanager.ListFederationClusterWithNamespaceRequest.ConditionsEntry
	77,  // 37: federationmanager.ListFederationClusterWithNamespaceRequest.sub_conditions:type_name -> federationmanager.ListFederationClusterWithNamespaceRequest.SubConditionsEntry
	33,  // 38: federationmanager.ListFederationClusterWithNamespaceResponse.data:type_name -> federationmanager.FederationClusterWithNamespace
	26,  // 39: federationmanager.ListFederationClusterWithNamespaceResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	34,  // 40: federationmanager.FederationClusterWithNamespace.federation_namespaces:type_name -> federationmanager.FederationNamespace
	41,  // 41: federationmanager.GetTaskResponse.data:type_name -> federationmanager.Task
	26,  // 42: federationmanager.GetTaskResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	41,  // 43: federationmanager.ListTasksResponse.data:type_name -> federationmanager.Task
	26,  // 44: federationmanager.ListTasksResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	52,  // 45: federationmanager.RetryTaskResponse.data:type_name -> federationmanager.TaskDistributeResponseData
	26,  // 46: federationmanager.RetryTaskResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	78,  // 47: federationmanager.Task.steps:type_name -> federationmanager.Task.StepsEntry
	79,  // 48: federationmanager.Task.common_params:type_name -> federationmanager.Task.CommonParamsEntry
	80,  // 49: federationmanager.Step.params:type_name -> federationmanager.Step.ParamsEntry
	45,  // 50: federationmanager.GetTaskRecordResponse.data:type_name -> federationmanager.TaskRecord
	26,  // 51: federationmanager.GetTaskRecordResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	46,  // 52: federationmanager.TaskRecord.step:type_name -> federationmanager.TaskRecordStep
	47,  // 53: federationmanager.TaskRecordStep.data:type_name -> federationmanager.TaskRecordStepData
	83,  // 54: federationmanager.TaskRecordStep.allowSkip:type_name -> google.protobuf.BoolValue
	83,  // 55: federationmanager.TaskRecordStep.allowRetry:type_name -> google.protobuf.BoolValue
	81,  // 56: federationmanager.InstallFederationRequest.federationClusterLabels:type_name -> federationmanager.InstallFederationRequest.FederationClusterLabelsEntry
	52,  // 57: federationmanager.InstallFederationResponse.data:type_name -> federationmanager.TaskDistributeResponseData
	26,  // 58: federationmanager.InstallFederationResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	52,  // 59: federationmanager.UnInstallFederationResponse.data:type_name -> federationmanager.TaskDistributeResponseData
	26,  // 60: federationmanager.UnInstallFederationResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	52,  // 61: federationmanager.RegisterSubclusterResponse.data:type_name -> federationmanager.TaskDistributeResponseData
	26,  // 62: federationmanager.RegisterSubclusterResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	52,  // 63: federationmanager.RemoveSubclusterResponse.data:type_name -> federationmanager.TaskDistributeResponseData
	26,  // 64: federationmanager.RemoveSubclusterResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	66,  // 65: federationmanager.GetFederationClusterResponse.data:type_name -> federationmanager.FederationCluster
	26,  // 66: federationmanager.GetFederationClusterResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	65,  // 67: federationmanager.GetFederationByHostClusterResponse.data:type_name -> federationmanager.FederationClusterWithTask
	26,  // 68: federationmanager.GetFederationByHostClusterResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	65,  // 69: federationmanager.ListProjectInstallingFederationResponse.data:type_name -> federationmanager.FederationClusterWithTask
	26,  // 70: federationmanager.ListProjectInstallingFederationResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	66,  // 71: federationmanager.ListProjectFederationResponse.data:type_name -> federationmanager.FederationCluster
	26,  // 72: federationmanager.ListProjectFederationResponse.web_annotations:type_name -> federationmanager.WebAnnotations
	66,  // 73: federationmanager.FederationClusterWithTask.cluster:type_name -> federationmanager.FederationCluster
	41,  // 74: federationmanager.FederationClusterWithTask.task:type_name -> federationmanager.Task
	30,  // 75: federationmanager.FederationCluster.sub_clusters:type_name -> federationmanager.FederationSubCluster
	34,  // 76: federationmanager.FederationCluster.federation_namespaces:type_name -> federationmanager.FederationNamespace
	42,  // 77: federationmanager.Task.StepsEntry.value:type_name -> federationmanager.Step
	27,  // 78: federationmanager.FederationManager.ListFederationClusterWithSubcluster:input_type -> federationmanager.ListFederationClusterWithSubclusterRequest
	31,  // 79: federationmanager.FederationManager.ListFederationClusterWithNamespace:input_type -> federationmanager.ListFederationClusterWithNamespaceRequest
	35,  // 80: federationmanager.FederationManager.GetTask:input_type -> federationmanager.GetTaskRequest
	37,  // 81: federationmanager.FederationManager.ListTasks:input_type -> federationmanager.ListTasksRequest
	39,  // 82: federationmanager.FederationManager.RetryTask:input_type -> federationmanager.RetryTaskRequest
	43,  // 83: federationmanager.FederationManager.GetTaskRecord:input_type -> federationmanager.GetTaskRecordRequest
	48,  // 84: federationmanager.FederationManager.InstallFederation:input_type -> federationmanager.InstallFederationRequest
	50,  // 85: federationmanager.FederationManager.UnInstallFederation:input_type -> federationmanager.UnInstallFederationRequest
	53,  // 86: federationmanager.FederationManager.RegisterSubcluster:input_type -> federationmanager.RegisterSubclusterRequest
	55,  // 87: federationmanager.FederationManager.RemoveSubcluster:input_type -> federationmanager.RemoveSubclusterRequest
	57,  // 88: federationmanager.FederationManager.GetFederationCluster:input_type -> federationmanager.GetFederationClusterRequest
	59,  // 89: federationmanager.FederationManager.GetFederationByHostCluster:input_type -> federationmanager.GetFederationByHostClusterRequest
	61,  // 90: federationmanager.FederationManager.ListProjectInstallingFederation:input_type -> federationmanager.ListProjectInstallingFederationRequest
	63,  // 91: federationmanager.FederationManager.ListProjectFederation:input_type -> federationmanager.ListProjectFederationRequest
	0,   // 92: federationmanager.FederationManager.CreateFederationClusterNamespace:input_type -> federationmanager.CreateFederationClusterNamespaceRequest
	7,   // 93: federationmanager.FederationManager.UpdateFederationClusterNamespace:input_type -> federationmanager.UpdateFederationClusterNamespaceRequest
	9,   // 94: federationmanager.FederationManager.DeleteFederationClusterNamespace:input_type -> federationmanager.DeleteFederationClusterNamespaceRequest
	12,  // 95: federationmanager.FederationManager.GetFederationClusterNamespace:input_type -> federationmanager.GetFederationClusterNamespaceRequest
	14,  // 96: federationmanager.FederationManager.ListFederationClusterNamespace:input_type -> federationmanager.ListFederationClusterNamespaceRequest
	16,  // 97: federationmanager.FederationManager.CreateFederationClusterNamespaceQuota:input_type -> federationmanager.CreateFederationClusterNamespaceQuotaRequest
	18,  // 98: federationmanager.FederationManager.UpdateFederationClusterNamespaceQuota:input_type -> federationmanager.UpdateFederationClusterNamespaceQuotaRequest
	20,  // 99: federationmanager.FederationManager.DeleteFederationClusterNamespaceQuota:input_type -> federationmanager.DeleteFederationClusterNamespaceQuotaRequest
	22,  // 100: federationmanager.FederationManager.GetFederationClusterNamespaceQuota:input_type -> federationmanager.GetFederationClusterNamespaceQuotaRequest
	24,  // 101: federationmanager.FederationManager.ListFederationClusterNamespaceQuota:input_type -> federationmanager.ListFederationClusterNamespaceQuotaRequest
	28,  // 102: federationmanager.FederationManager.ListFederationClusterWithSubcluster:output_type -> federationmanager.ListFederationClusterWithSubclusterResponse
	32,  // 103: federationmanager.FederationManager.ListFederationClusterWithNamespace:output_type -> federationmanager.ListFederationClusterWithNamespaceResponse
	36,  // 104: federationmanager.FederationManager.GetTask:output_type -> federationmanager.GetTaskResponse
	38,  // 105: federationmanager.FederationManager.ListTasks:output_type -> federationmanager.ListTasksResponse
	40,  // 106: federationmanager.FederationManager.RetryTask:output_type -> federationmanager.RetryTaskResponse
	44,  // 107: federationmanager.FederationManager.GetTaskRecord:output_type -> federationmanager.GetTaskRecordResponse
	49,  // 108: federationmanager.FederationManager.InstallFederation:output_type -> federationmanager.InstallFederationResponse
	51,  // 109: federationmanager.FederationManager.UnInstallFederation:output_type -> federationmanager.UnInstallFederationResponse
	54,  // 110: federationmanager.FederationManager.RegisterSubcluster:output_type -> federationmanager.RegisterSubclusterResponse
	56,  // 111: federationmanager.FederationManager.RemoveSubcluster:output_type -> federationmanager.RemoveSubclusterResponse
	58,  // 112: federationmanager.FederationManager.GetFederationCluster:output_type -> federationmanager.GetFederationClusterResponse
	60,  // 113: federationmanager.FederationManager.GetFederationByHostCluster:output_type -> federationmanager.GetFederationByHostClusterResponse
	62,  // 114: federationmanager.FederationManager.ListProjectInstallingFederation:output_type -> federationmanager.ListProjectInstallingFederationResponse
	64,  // 115: federationmanager.FederationManager.ListProjectFederation:output_type -> federationmanager.ListProjectFederationResponse
	6,   // 116: federationmanager.FederationManager.CreateFederationClusterNamespace:output_type -> federationmanager.CreateFederationClusterNamespaceResponse
	8,   // 117: federationmanager.FederationManager.UpdateFederationClusterNamespace:output_type -> federationmanager.UpdateFederationClusterNamespaceResponse
	10,  // 118: federationmanager.FederationManager.DeleteFederationClusterNamespace:output_type -> federationmanager.DeleteFederationClusterNamespaceResponse
	13,  // 119: federationmanager.FederationManager.GetFederationClusterNamespace:output_type -> federationmanager.GetFederationClusterNamespaceResponse
	15,  // 120: federationmanager.FederationManager.ListFederationClusterNamespace:output_type -> federationmanager.ListFederationClusterNamespaceResponse
	17,  // 121: federationmanager.FederationManager.CreateFederationClusterNamespaceQuota:output_type -> federationmanager.CreateFederationClusterNamespaceQuotaResponse
	19,  // 122: federationmanager.FederationManager.UpdateFederationClusterNamespaceQuota:output_type -> federationmanager.UpdateFederationClusterNamespaceQuotaResponse
	21,  // 123: federationmanager.FederationManager.DeleteFederationClusterNamespaceQuota:output_type -> federationmanager.DeleteFederationClusterNamespaceQuotaResponse
	23,  // 124: federationmanager.FederationManager.GetFederationClusterNamespaceQuota:output_type -> federationmanager.GetFederationClusterNamespaceQuotaResponse
	25,  // 125: federationmanager.FederationManager.ListFederationClusterNamespaceQuota:output_type -> federationmanager.ListFederationClusterNamespaceQuotaResponse
	102, // [102:126] is the sub-list for method output_type
	78,  // [78:102] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_proto_bcs_federation_manager_bcs_federation_manager_proto_init() }
func file_proto_bcs_federation_manager_bcs_federation_manager_proto_init() {
	if File_proto_bcs_federation_manager_bcs_federation_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFederationClusterNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceSubClusterAffinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelectorRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFederationClusterNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFederationClusterNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFederationClusterNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFederationClusterNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFederationClusterNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederationClusterNamespaceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationClusterNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationClusterNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFederationClusterNamespaceQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFederationClusterNamespaceQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFederationClusterNamespaceQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFederationClusterNamespaceQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFederationClusterNamespaceQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFederationClusterNamespaceQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationClusterNamespaceQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationClusterNamespaceQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterNamespaceQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterNamespaceQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterWithSubclusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterWithSubclusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederationClusterWithSubcluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederationSubCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterWithNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFederationClusterWithNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederationClusterWithNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederationNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRecordStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRecordStepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallFederationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallFederationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnInstallFederationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnInstallFederationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDistributeResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSubclusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSubclusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubclusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubclusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationByHostClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFederationByHostClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectInstallingFederationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectInstallingFederationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectFederationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectFederationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederationClusterWithTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederationCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes[64].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bcs_federation_manager_bcs_federation_manager_proto_goTypes,
		DependencyIndexes: file_proto_bcs_federation_manager_bcs_federation_manager_proto_depIdxs,
		MessageInfos:      file_proto_bcs_federation_manager_bcs_federation_manager_proto_msgTypes,
	}.Build()
	File_proto_bcs_federation_manager_bcs_federation_manager_proto = out.File
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_rawDesc = nil
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_goTypes = nil
	file_proto_bcs_federation_manager_bcs_federation_manager_proto_depIdxs = nil
}
