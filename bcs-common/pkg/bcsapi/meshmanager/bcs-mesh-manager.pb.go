// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: bcs-mesh-manager.proto

package meshmanager

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Mesh status enum
type MeshStatus int32

const (
	MeshStatus_MESH_STATUS_UNSPECIFIED MeshStatus = 0
	MeshStatus_MESH_STATUS_INSTALLING  MeshStatus = 1 // 安装中
	MeshStatus_MESH_STATUS_RUNNING     MeshStatus = 2 // 运行中
	MeshStatus_MESH_STATUS_FAILED      MeshStatus = 3 // 安装失败
	MeshStatus_MESH_STATUS_DELETING    MeshStatus = 4 // 删除中
)

// Enum value maps for MeshStatus.
var (
	MeshStatus_name = map[int32]string{
		0: "MESH_STATUS_UNSPECIFIED",
		1: "MESH_STATUS_INSTALLING",
		2: "MESH_STATUS_RUNNING",
		3: "MESH_STATUS_FAILED",
		4: "MESH_STATUS_DELETING",
	}
	MeshStatus_value = map[string]int32{
		"MESH_STATUS_UNSPECIFIED": 0,
		"MESH_STATUS_INSTALLING":  1,
		"MESH_STATUS_RUNNING":     2,
		"MESH_STATUS_FAILED":      3,
		"MESH_STATUS_DELETING":    4,
	}
)

func (x MeshStatus) Enum() *MeshStatus {
	p := new(MeshStatus)
	*p = x
	return p
}

func (x MeshStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_mesh_manager_proto_enumTypes[0].Descriptor()
}

func (MeshStatus) Type() protoreflect.EnumType {
	return &file_bcs_mesh_manager_proto_enumTypes[0]
}

func (x MeshStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshStatus.Descriptor instead.
func (MeshStatus) EnumDescriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{0}
}

// 安装模式
type ControlPlaneMode int32

const (
	ControlPlaneMode_CONTROL_PLANE_MODE_UNSPECIFIED ControlPlaneMode = 0
	ControlPlaneMode_CONTROL_PLANE_MODE_STANDALONE  ControlPlaneMode = 1
	ControlPlaneMode_CONTROL_PLANE_MODE_HOSTING     ControlPlaneMode = 2
)

// Enum value maps for ControlPlaneMode.
var (
	ControlPlaneMode_name = map[int32]string{
		0: "CONTROL_PLANE_MODE_UNSPECIFIED",
		1: "CONTROL_PLANE_MODE_STANDALONE",
		2: "CONTROL_PLANE_MODE_HOSTING",
	}
	ControlPlaneMode_value = map[string]int32{
		"CONTROL_PLANE_MODE_UNSPECIFIED": 0,
		"CONTROL_PLANE_MODE_STANDALONE":  1,
		"CONTROL_PLANE_MODE_HOSTING":     2,
	}
)

func (x ControlPlaneMode) Enum() *ControlPlaneMode {
	p := new(ControlPlaneMode)
	*p = x
	return p
}

func (x ControlPlaneMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlPlaneMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_mesh_manager_proto_enumTypes[1].Descriptor()
}

func (ControlPlaneMode) Type() protoreflect.EnumType {
	return &file_bcs_mesh_manager_proto_enumTypes[1]
}

func (x ControlPlaneMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlPlaneMode.Descriptor instead.
func (ControlPlaneMode) EnumDescriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{1}
}

// 多集群集群模式
type ClusterMode int32

const (
	ClusterMode_CLUSTER_MODE_UNSPECIFIED    ClusterMode = 0
	ClusterMode_CLUSTER_MODE_PRIMARY_REMOTE ClusterMode = 1
	ClusterMode_CLUSTER_MODE_MULTI_PRIMARY  ClusterMode = 2
)

// Enum value maps for ClusterMode.
var (
	ClusterMode_name = map[int32]string{
		0: "CLUSTER_MODE_UNSPECIFIED",
		1: "CLUSTER_MODE_PRIMARY_REMOTE",
		2: "CLUSTER_MODE_MULTI_PRIMARY",
	}
	ClusterMode_value = map[string]int32{
		"CLUSTER_MODE_UNSPECIFIED":    0,
		"CLUSTER_MODE_PRIMARY_REMOTE": 1,
		"CLUSTER_MODE_MULTI_PRIMARY":  2,
	}
)

func (x ClusterMode) Enum() *ClusterMode {
	p := new(ClusterMode)
	*p = x
	return p
}

func (x ClusterMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_mesh_manager_proto_enumTypes[2].Descriptor()
}

func (ClusterMode) Type() protoreflect.EnumType {
	return &file_bcs_mesh_manager_proto_enumTypes[2]
}

func (x ClusterMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterMode.Descriptor instead.
func (ClusterMode) EnumDescriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{2}
}

// 日志编码[json, text]
type AccessLogEncoding int32

const (
	AccessLogEncoding_ACCESS_LOG_ENCODING_UNSPECIFIED AccessLogEncoding = 0
	AccessLogEncoding_ACCESS_LOG_ENCODING_JSON        AccessLogEncoding = 1
	AccessLogEncoding_ACCESS_LOG_ENCODING_TEXT        AccessLogEncoding = 2
)

// Enum value maps for AccessLogEncoding.
var (
	AccessLogEncoding_name = map[int32]string{
		0: "ACCESS_LOG_ENCODING_UNSPECIFIED",
		1: "ACCESS_LOG_ENCODING_JSON",
		2: "ACCESS_LOG_ENCODING_TEXT",
	}
	AccessLogEncoding_value = map[string]int32{
		"ACCESS_LOG_ENCODING_UNSPECIFIED": 0,
		"ACCESS_LOG_ENCODING_JSON":        1,
		"ACCESS_LOG_ENCODING_TEXT":        2,
	}
)

func (x AccessLogEncoding) Enum() *AccessLogEncoding {
	p := new(AccessLogEncoding)
	*p = x
	return p
}

func (x AccessLogEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLogEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_bcs_mesh_manager_proto_enumTypes[3].Descriptor()
}

func (AccessLogEncoding) Type() protoreflect.EnumType {
	return &file_bcs_mesh_manager_proto_enumTypes[3]
}

func (x AccessLogEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLogEncoding.Descriptor instead.
func (AccessLogEncoding) EnumDescriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{3}
}

type WebAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perms *_struct.Struct `protobuf:"bytes,1,opt,name=perms,proto3" json:"perms,omitempty"`
}

func (x *WebAnnotations) Reset() {
	*x = WebAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAnnotations) ProtoMessage() {}

func (x *WebAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAnnotations.ProtoReflect.Descriptor instead.
func (*WebAnnotations) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{0}
}

func (x *WebAnnotations) GetPerms() *_struct.Struct {
	if x != nil {
		return x.Perms
	}
	return nil
}

// 获取当前开放的istio版本请求
type ListIstioVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListIstioVersionRequest) Reset() {
	*x = ListIstioVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioVersionRequest) ProtoMessage() {}

func (x *ListIstioVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioVersionRequest.ProtoReflect.Descriptor instead.
func (*ListIstioVersionRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{1}
}

// 获取当前开放的istio版本响应
type ListIstioVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string                   `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations          `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	Data           *IstioVersionAndFeatures `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListIstioVersionResponse) Reset() {
	*x = ListIstioVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIstioVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIstioVersionResponse) ProtoMessage() {}

func (x *ListIstioVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIstioVersionResponse.ProtoReflect.Descriptor instead.
func (*ListIstioVersionResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{2}
}

func (x *ListIstioVersionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListIstioVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListIstioVersionResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListIstioVersionResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListIstioVersionResponse) GetData() *IstioVersionAndFeatures {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取istio版本列表响应
type IstioVersionAndFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IstioVersions  []*IstioVersion  `protobuf:"bytes,1,rep,name=istioVersions,proto3" json:"istioVersions,omitempty"`
	FeatureConfigs []*FeatureConfig `protobuf:"bytes,2,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty"`
}

func (x *IstioVersionAndFeatures) Reset() {
	*x = IstioVersionAndFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioVersionAndFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioVersionAndFeatures) ProtoMessage() {}

func (x *IstioVersionAndFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioVersionAndFeatures.ProtoReflect.Descriptor instead.
func (*IstioVersionAndFeatures) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{3}
}

func (x *IstioVersionAndFeatures) GetIstioVersions() []*IstioVersion {
	if x != nil {
		return x.IstioVersions
	}
	return nil
}

func (x *IstioVersionAndFeatures) GetFeatureConfigs() []*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// 获取istio版本列表响应
type IstioVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version      string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	ChartVersion string `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	KubeVersion  string `protobuf:"bytes,4,opt,name=kubeVersion,proto3" json:"kubeVersion,omitempty"`
}

func (x *IstioVersion) Reset() {
	*x = IstioVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IstioVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IstioVersion) ProtoMessage() {}

func (x *IstioVersion) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IstioVersion.ProtoReflect.Descriptor instead.
func (*IstioVersion) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{4}
}

func (x *IstioVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IstioVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *IstioVersion) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IstioVersion) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

// 功能特性配置
type FeatureConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DefaultValue    string   `protobuf:"bytes,3,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	AvailableValues []string `protobuf:"bytes,4,rep,name=availableValues,proto3" json:"availableValues,omitempty"`
	SupportVersions []string `protobuf:"bytes,5,rep,name=supportVersions,proto3" json:"supportVersions,omitempty"`
}

func (x *FeatureConfig) Reset() {
	*x = FeatureConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureConfig) ProtoMessage() {}

func (x *FeatureConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureConfig.ProtoReflect.Descriptor instead.
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureConfig) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *FeatureConfig) GetAvailableValues() []string {
	if x != nil {
		return x.AvailableValues
	}
	return nil
}

func (x *FeatureConfig) GetSupportVersions() []string {
	if x != nil {
		return x.SupportVersions
	}
	return nil
}

// 获取网格列表请求
type ListMeshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Page      int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *ListMeshRequest) Reset() {
	*x = ListMeshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMeshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeshRequest) ProtoMessage() {}

func (x *ListMeshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeshRequest.ProtoReflect.Descriptor instead.
func (*ListMeshRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{6}
}

func (x *ListMeshRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *ListMeshRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListMeshRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMeshRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取网格列表响应
type ListMeshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
	Data           *ListMeshData   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListMeshResponse) Reset() {
	*x = ListMeshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMeshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeshResponse) ProtoMessage() {}

func (x *ListMeshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeshResponse.ProtoReflect.Descriptor instead.
func (*ListMeshResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{7}
}

func (x *ListMeshResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListMeshResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListMeshResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *ListMeshResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

func (x *ListMeshResponse) GetData() *ListMeshData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListMeshData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*MeshListItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListMeshData) Reset() {
	*x = ListMeshData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMeshData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeshData) ProtoMessage() {}

func (x *ListMeshData) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeshData.ProtoReflect.Descriptor instead.
func (*ListMeshData) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{8}
}

func (x *ListMeshData) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMeshData) GetItems() []*MeshListItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type MeshListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID                string                    `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	MeshName              string                    `protobuf:"bytes,2,opt,name=meshName,proto3" json:"meshName,omitempty"`
	ProjectID             string                    `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectCode           string                    `protobuf:"bytes,4,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Description           string                    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ChartVersion          string                    `protobuf:"bytes,6,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	Status                MeshStatus                `protobuf:"varint,7,opt,name=status,proto3,enum=meshmanager.MeshStatus" json:"status,omitempty"`
	CreateTime            int64                     `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime            int64                     `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreateBy              string                    `protobuf:"bytes,10,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy              string                    `protobuf:"bytes,11,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	ControlPlaneMode      ControlPlaneMode          `protobuf:"varint,12,opt,name=controlPlaneMode,proto3,enum=meshmanager.ControlPlaneMode" json:"controlPlaneMode,omitempty"`
	ClusterMode           ClusterMode               `protobuf:"varint,13,opt,name=clusterMode,proto3,enum=meshmanager.ClusterMode" json:"clusterMode,omitempty"`
	PrimaryClusters       []string                  `protobuf:"bytes,14,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`
	RemoteClusters        []string                  `protobuf:"bytes,15,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	DifferentNetwork      bool                      `protobuf:"varint,16,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`
	ServiceDiscovery      *ServiceDiscovery         `protobuf:"bytes,17,opt,name=serviceDiscovery,proto3" json:"serviceDiscovery,omitempty"`
	SidecarResourceConfig *ResourceConfig           `protobuf:"bytes,18,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	HighAvailability      *HighAvailability         `protobuf:"bytes,19,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	LogCollectorConfig    *LogCollectorConfig       `protobuf:"bytes,20,opt,name=logCollectorConfig,proto3" json:"logCollectorConfig,omitempty"`
	TracingConfig         *TracingConfig            `protobuf:"bytes,21,opt,name=tracingConfig,proto3" json:"tracingConfig,omitempty"`
	FeatureConfigs        map[string]*FeatureConfig `protobuf:"bytes,22,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MeshListItem) Reset() {
	*x = MeshListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshListItem) ProtoMessage() {}

func (x *MeshListItem) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshListItem.ProtoReflect.Descriptor instead.
func (*MeshListItem) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{9}
}

func (x *MeshListItem) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *MeshListItem) GetMeshName() string {
	if x != nil {
		return x.MeshName
	}
	return ""
}

func (x *MeshListItem) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *MeshListItem) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *MeshListItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MeshListItem) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *MeshListItem) GetStatus() MeshStatus {
	if x != nil {
		return x.Status
	}
	return MeshStatus_MESH_STATUS_UNSPECIFIED
}

func (x *MeshListItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MeshListItem) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *MeshListItem) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *MeshListItem) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *MeshListItem) GetControlPlaneMode() ControlPlaneMode {
	if x != nil {
		return x.ControlPlaneMode
	}
	return ControlPlaneMode_CONTROL_PLANE_MODE_UNSPECIFIED
}

func (x *MeshListItem) GetClusterMode() ClusterMode {
	if x != nil {
		return x.ClusterMode
	}
	return ClusterMode_CLUSTER_MODE_UNSPECIFIED
}

func (x *MeshListItem) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *MeshListItem) GetRemoteClusters() []string {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *MeshListItem) GetDifferentNetwork() bool {
	if x != nil {
		return x.DifferentNetwork
	}
	return false
}

func (x *MeshListItem) GetServiceDiscovery() *ServiceDiscovery {
	if x != nil {
		return x.ServiceDiscovery
	}
	return nil
}

func (x *MeshListItem) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *MeshListItem) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *MeshListItem) GetLogCollectorConfig() *LogCollectorConfig {
	if x != nil {
		return x.LogCollectorConfig
	}
	return nil
}

func (x *MeshListItem) GetTracingConfig() *TracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

func (x *MeshListItem) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// 更新网格请求
type UpdateMeshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID                string                    `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	MeshName              string                    `protobuf:"bytes,2,opt,name=meshName,proto3" json:"meshName,omitempty"`
	ChartVersion          string                    `protobuf:"bytes,3,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	Description           string                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	PrimaryClusters       []string                  `protobuf:"bytes,5,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`
	RemoteClusters        []string                  `protobuf:"bytes,6,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	DifferentNetwork      bool                      `protobuf:"varint,7,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`
	ServiceDiscovery      *ServiceDiscovery         `protobuf:"bytes,8,opt,name=serviceDiscovery,proto3" json:"serviceDiscovery,omitempty"`
	SidecarResourceConfig *ResourceConfig           `protobuf:"bytes,9,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	HighAvailability      *HighAvailability         `protobuf:"bytes,10,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	LogCollectorConfig    *LogCollectorConfig       `protobuf:"bytes,11,opt,name=logCollectorConfig,proto3" json:"logCollectorConfig,omitempty"`
	TracingConfig         *TracingConfig            `protobuf:"bytes,12,opt,name=tracingConfig,proto3" json:"tracingConfig,omitempty"`
	FeatureConfigs        map[string]*FeatureConfig `protobuf:"bytes,13,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMeshRequest) Reset() {
	*x = UpdateMeshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeshRequest) ProtoMessage() {}

func (x *UpdateMeshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeshRequest.ProtoReflect.Descriptor instead.
func (*UpdateMeshRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateMeshRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *UpdateMeshRequest) GetMeshName() string {
	if x != nil {
		return x.MeshName
	}
	return ""
}

func (x *UpdateMeshRequest) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *UpdateMeshRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateMeshRequest) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *UpdateMeshRequest) GetRemoteClusters() []string {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *UpdateMeshRequest) GetDifferentNetwork() bool {
	if x != nil {
		return x.DifferentNetwork
	}
	return false
}

func (x *UpdateMeshRequest) GetServiceDiscovery() *ServiceDiscovery {
	if x != nil {
		return x.ServiceDiscovery
	}
	return nil
}

func (x *UpdateMeshRequest) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *UpdateMeshRequest) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *UpdateMeshRequest) GetLogCollectorConfig() *LogCollectorConfig {
	if x != nil {
		return x.LogCollectorConfig
	}
	return nil
}

func (x *UpdateMeshRequest) GetTracingConfig() *TracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

func (x *UpdateMeshRequest) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// 更新网格响应
type UpdateMeshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *UpdateMeshResponse) Reset() {
	*x = UpdateMeshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeshResponse) ProtoMessage() {}

func (x *UpdateMeshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeshResponse.ProtoReflect.Descriptor instead.
func (*UpdateMeshResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMeshResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateMeshResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateMeshResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UpdateMeshResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// 删除网格请求
type DeleteMeshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeshID string `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
}

func (x *DeleteMeshRequest) Reset() {
	*x = DeleteMeshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMeshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMeshRequest) ProtoMessage() {}

func (x *DeleteMeshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMeshRequest.ProtoReflect.Descriptor instead.
func (*DeleteMeshRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteMeshRequest) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

// 删除网格响应
type DeleteMeshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *DeleteMeshResponse) Reset() {
	*x = DeleteMeshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMeshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMeshResponse) ProtoMessage() {}

func (x *DeleteMeshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMeshResponse.ProtoReflect.Descriptor instead.
func (*DeleteMeshResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteMeshResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteMeshResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteMeshResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DeleteMeshResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// 安装istio请求
type InstallIstioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	ProjectID string `protobuf:"bytes,1,opt,name=projectID,proto3" json:"projectID,omitempty"`
	// 项目编码
	ProjectCode string `protobuf:"bytes,2,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	// 名称
	MeshName string `protobuf:"bytes,3,opt,name=meshName,proto3" json:"meshName,omitempty"`
	// 描述
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// 使用的版本
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// 安装模式
	ControlPlaneMode ControlPlaneMode `protobuf:"varint,6,opt,name=controlPlaneMode,proto3,enum=meshmanager.ControlPlaneMode" json:"controlPlaneMode,omitempty"`
	// 多集群集群模式： 主从[primaryRemote]，多主[multiPrimary]
	ClusterMode ClusterMode `protobuf:"varint,7,opt,name=clusterMode,proto3,enum=meshmanager.ClusterMode" json:"clusterMode,omitempty"`
	// 主集群列表：安装istio控制面，存在多主的情况
	PrimaryClusters []string `protobuf:"bytes,8,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`
	// 远程集群列表：适用于多集群的情况，从集群
	RemoteClusters []string `protobuf:"bytes,9,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	// 网络是否一致：关乎是否默认安装egress gateway
	DifferentNetwork bool `protobuf:"varint,10,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`
	// chart版本
	ChartVersion string `protobuf:"bytes,11,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	// sidecar资源配置
	SidecarResourceConfig *ResourceConfig `protobuf:"bytes,12,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	// 高可用配置
	HighAvailability *HighAvailability `protobuf:"bytes,13,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	// 日志采集配置
	LogCollectorConfig *LogCollectorConfig `protobuf:"bytes,14,opt,name=logCollectorConfig,proto3" json:"logCollectorConfig,omitempty"`
	// tracing配置
	TracingConfig *TracingConfig `protobuf:"bytes,15,opt,name=tracingConfig,proto3" json:"tracingConfig,omitempty"`
	// 功能特性[跟随版本关联的特性]
	FeatureConfigs map[string]*FeatureConfig `protobuf:"bytes,16,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InstallIstioRequest) Reset() {
	*x = InstallIstioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallIstioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallIstioRequest) ProtoMessage() {}

func (x *InstallIstioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallIstioRequest.ProtoReflect.Descriptor instead.
func (*InstallIstioRequest) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{14}
}

func (x *InstallIstioRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *InstallIstioRequest) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *InstallIstioRequest) GetMeshName() string {
	if x != nil {
		return x.MeshName
	}
	return ""
}

func (x *InstallIstioRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstallIstioRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallIstioRequest) GetControlPlaneMode() ControlPlaneMode {
	if x != nil {
		return x.ControlPlaneMode
	}
	return ControlPlaneMode_CONTROL_PLANE_MODE_UNSPECIFIED
}

func (x *InstallIstioRequest) GetClusterMode() ClusterMode {
	if x != nil {
		return x.ClusterMode
	}
	return ClusterMode_CLUSTER_MODE_UNSPECIFIED
}

func (x *InstallIstioRequest) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *InstallIstioRequest) GetRemoteClusters() []string {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *InstallIstioRequest) GetDifferentNetwork() bool {
	if x != nil {
		return x.DifferentNetwork
	}
	return false
}

func (x *InstallIstioRequest) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *InstallIstioRequest) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *InstallIstioRequest) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *InstallIstioRequest) GetLogCollectorConfig() *LogCollectorConfig {
	if x != nil {
		return x.LogCollectorConfig
	}
	return nil
}

func (x *InstallIstioRequest) GetTracingConfig() *TracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

func (x *InstallIstioRequest) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// 安装istio响应
type InstallIstioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message        string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestID      string          `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	WebAnnotations *WebAnnotations `protobuf:"bytes,4,opt,name=web_annotations,json=webAnnotations,proto3" json:"web_annotations,omitempty"`
}

func (x *InstallIstioResponse) Reset() {
	*x = InstallIstioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallIstioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallIstioResponse) ProtoMessage() {}

func (x *InstallIstioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallIstioResponse.ProtoReflect.Descriptor instead.
func (*InstallIstioResponse) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{15}
}

func (x *InstallIstioResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstallIstioResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstallIstioResponse) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *InstallIstioResponse) GetWebAnnotations() *WebAnnotations {
	if x != nil {
		return x.WebAnnotations
	}
	return nil
}

// resource配置
type ResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequest    string `protobuf:"bytes,1,opt,name=cpuRequest,proto3" json:"cpuRequest,omitempty"`
	CpuLimit      string `protobuf:"bytes,2,opt,name=cpuLimit,proto3" json:"cpuLimit,omitempty"`
	MemoryRequest string `protobuf:"bytes,3,opt,name=memoryRequest,proto3" json:"memoryRequest,omitempty"`
	MemoryLimit   string `protobuf:"bytes,4,opt,name=memoryLimit,proto3" json:"memoryLimit,omitempty"`
}

func (x *ResourceConfig) Reset() {
	*x = ResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConfig) ProtoMessage() {}

func (x *ResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConfig.ProtoReflect.Descriptor instead.
func (*ResourceConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceConfig) GetCpuRequest() string {
	if x != nil {
		return x.CpuRequest
	}
	return ""
}

func (x *ResourceConfig) GetCpuLimit() string {
	if x != nil {
		return x.CpuLimit
	}
	return ""
}

func (x *ResourceConfig) GetMemoryRequest() string {
	if x != nil {
		return x.MemoryRequest
	}
	return ""
}

func (x *ResourceConfig) GetMemoryLimit() string {
	if x != nil {
		return x.MemoryLimit
	}
	return ""
}

// 专属调度标签
type DedicatedNodeLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DedicatedNodeLabel) Reset() {
	*x = DedicatedNodeLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DedicatedNodeLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DedicatedNodeLabel) ProtoMessage() {}

func (x *DedicatedNodeLabel) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DedicatedNodeLabel.ProtoReflect.Descriptor instead.
func (*DedicatedNodeLabel) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{17}
}

func (x *DedicatedNodeLabel) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DedicatedNodeLabel) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// 高可用配置，hpa，副本数设置等
type HighAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否开启hpa
	AutoscaleEnabled bool `protobuf:"varint,1,opt,name=autoscaleEnabled,proto3" json:"autoscaleEnabled,omitempty"`
	// hpa最小副本数
	AutoscaleMin int32 `protobuf:"varint,2,opt,name=autoscaleMin,proto3" json:"autoscaleMin,omitempty"`
	// hpa最大副本数
	AutoscaleMax int32 `protobuf:"varint,3,opt,name=autoscaleMax,proto3" json:"autoscaleMax,omitempty"`
	// 副本数
	ReplicaCount int32 `protobuf:"varint,4,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
	// resource配置
	ResourceConfig *ResourceConfig `protobuf:"bytes,5,opt,name=resourceConfig,proto3" json:"resourceConfig,omitempty"`
	// 专属节点（专用节点标签），默认会加上容忍
	DedicatedNodeLabel *DedicatedNodeLabel `protobuf:"bytes,6,opt,name=dedicatedNodeLabel,proto3" json:"dedicatedNodeLabel,omitempty"`
}

func (x *HighAvailability) Reset() {
	*x = HighAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighAvailability) ProtoMessage() {}

func (x *HighAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighAvailability.ProtoReflect.Descriptor instead.
func (*HighAvailability) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{18}
}

func (x *HighAvailability) GetAutoscaleEnabled() bool {
	if x != nil {
		return x.AutoscaleEnabled
	}
	return false
}

func (x *HighAvailability) GetAutoscaleMin() int32 {
	if x != nil {
		return x.AutoscaleMin
	}
	return 0
}

func (x *HighAvailability) GetAutoscaleMax() int32 {
	if x != nil {
		return x.AutoscaleMax
	}
	return 0
}

func (x *HighAvailability) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *HighAvailability) GetResourceConfig() *ResourceConfig {
	if x != nil {
		return x.ResourceConfig
	}
	return nil
}

func (x *HighAvailability) GetDedicatedNodeLabel() *DedicatedNodeLabel {
	if x != nil {
		return x.DedicatedNodeLabel
	}
	return nil
}

// 日志采集配置
type LogCollectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessLogEncoding AccessLogEncoding `protobuf:"varint,2,opt,name=accessLogEncoding,proto3,enum=meshmanager.AccessLogEncoding" json:"accessLogEncoding,omitempty"`
	AccessLogFormat   string            `protobuf:"bytes,3,opt,name=accessLogFormat,proto3" json:"accessLogFormat,omitempty"`
}

func (x *LogCollectorConfig) Reset() {
	*x = LogCollectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogCollectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCollectorConfig) ProtoMessage() {}

func (x *LogCollectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCollectorConfig.ProtoReflect.Descriptor instead.
func (*LogCollectorConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{19}
}

func (x *LogCollectorConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LogCollectorConfig) GetAccessLogEncoding() AccessLogEncoding {
	if x != nil {
		return x.AccessLogEncoding
	}
	return AccessLogEncoding_ACCESS_LOG_ENCODING_UNSPECIFIED
}

func (x *LogCollectorConfig) GetAccessLogFormat() string {
	if x != nil {
		return x.AccessLogFormat
	}
	return ""
}

// tracing配置
type TracingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	BkToken  string `protobuf:"bytes,3,opt,name=bkToken,proto3" json:"bkToken,omitempty"`
}

func (x *TracingConfig) Reset() {
	*x = TracingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig) ProtoMessage() {}

func (x *TracingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig.ProtoReflect.Descriptor instead.
func (*TracingConfig) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{20}
}

func (x *TracingConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TracingConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TracingConfig) GetBkToken() string {
	if x != nil {
		return x.BkToken
	}
	return ""
}

// Mesh message definition
type Mesh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic information
	MeshID       string     `protobuf:"bytes,1,opt,name=meshID,proto3" json:"meshID,omitempty"`
	MeshName     string     `protobuf:"bytes,2,opt,name=meshName,proto3" json:"meshName,omitempty"`
	ProjectID    string     `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	ProjectCode  string     `protobuf:"bytes,4,opt,name=projectCode,proto3" json:"projectCode,omitempty"`
	Description  string     `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ChartVersion string     `protobuf:"bytes,6,opt,name=chartVersion,proto3" json:"chartVersion,omitempty"`
	Status       MeshStatus `protobuf:"varint,7,opt,name=status,proto3,enum=meshmanager.MeshStatus" json:"status,omitempty"`
	CreateTime   int64      `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   int64      `protobuf:"varint,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	CreateBy     string     `protobuf:"bytes,10,opt,name=createBy,proto3" json:"createBy,omitempty"`
	UpdateBy     string     `protobuf:"bytes,11,opt,name=updateBy,proto3" json:"updateBy,omitempty"`
	// Mesh configuration
	ControlPlaneMode ControlPlaneMode `protobuf:"varint,12,opt,name=controlPlaneMode,proto3,enum=meshmanager.ControlPlaneMode" json:"controlPlaneMode,omitempty"`
	ClusterMode      ClusterMode      `protobuf:"varint,13,opt,name=clusterMode,proto3,enum=meshmanager.ClusterMode" json:"clusterMode,omitempty"`
	PrimaryClusters  []string         `protobuf:"bytes,14,rep,name=primaryClusters,proto3" json:"primaryClusters,omitempty"`
	RemoteClusters   []string         `protobuf:"bytes,15,rep,name=remoteClusters,proto3" json:"remoteClusters,omitempty"`
	DifferentNetwork bool             `protobuf:"varint,16,opt,name=differentNetwork,proto3" json:"differentNetwork,omitempty"`
	// Service discovery information
	ServiceDiscovery *ServiceDiscovery `protobuf:"bytes,17,opt,name=serviceDiscovery,proto3" json:"serviceDiscovery,omitempty"`
	// Resource and observability configurations
	SidecarResourceConfig *ResourceConfig     `protobuf:"bytes,18,opt,name=sidecarResourceConfig,proto3" json:"sidecarResourceConfig,omitempty"`
	HighAvailability      *HighAvailability   `protobuf:"bytes,19,opt,name=highAvailability,proto3" json:"highAvailability,omitempty"`
	LogCollectorConfig    *LogCollectorConfig `protobuf:"bytes,20,opt,name=logCollectorConfig,proto3" json:"logCollectorConfig,omitempty"`
	TracingConfig         *TracingConfig      `protobuf:"bytes,21,opt,name=tracingConfig,proto3" json:"tracingConfig,omitempty"`
	// Feature configurations
	FeatureConfigs map[string]*FeatureConfig `protobuf:"bytes,22,rep,name=featureConfigs,proto3" json:"featureConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Mesh) Reset() {
	*x = Mesh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mesh) ProtoMessage() {}

func (x *Mesh) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mesh.ProtoReflect.Descriptor instead.
func (*Mesh) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{21}
}

func (x *Mesh) GetMeshID() string {
	if x != nil {
		return x.MeshID
	}
	return ""
}

func (x *Mesh) GetMeshName() string {
	if x != nil {
		return x.MeshName
	}
	return ""
}

func (x *Mesh) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *Mesh) GetProjectCode() string {
	if x != nil {
		return x.ProjectCode
	}
	return ""
}

func (x *Mesh) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Mesh) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *Mesh) GetStatus() MeshStatus {
	if x != nil {
		return x.Status
	}
	return MeshStatus_MESH_STATUS_UNSPECIFIED
}

func (x *Mesh) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Mesh) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Mesh) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *Mesh) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *Mesh) GetControlPlaneMode() ControlPlaneMode {
	if x != nil {
		return x.ControlPlaneMode
	}
	return ControlPlaneMode_CONTROL_PLANE_MODE_UNSPECIFIED
}

func (x *Mesh) GetClusterMode() ClusterMode {
	if x != nil {
		return x.ClusterMode
	}
	return ClusterMode_CLUSTER_MODE_UNSPECIFIED
}

func (x *Mesh) GetPrimaryClusters() []string {
	if x != nil {
		return x.PrimaryClusters
	}
	return nil
}

func (x *Mesh) GetRemoteClusters() []string {
	if x != nil {
		return x.RemoteClusters
	}
	return nil
}

func (x *Mesh) GetDifferentNetwork() bool {
	if x != nil {
		return x.DifferentNetwork
	}
	return false
}

func (x *Mesh) GetServiceDiscovery() *ServiceDiscovery {
	if x != nil {
		return x.ServiceDiscovery
	}
	return nil
}

func (x *Mesh) GetSidecarResourceConfig() *ResourceConfig {
	if x != nil {
		return x.SidecarResourceConfig
	}
	return nil
}

func (x *Mesh) GetHighAvailability() *HighAvailability {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *Mesh) GetLogCollectorConfig() *LogCollectorConfig {
	if x != nil {
		return x.LogCollectorConfig
	}
	return nil
}

func (x *Mesh) GetTracingConfig() *TracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

func (x *Mesh) GetFeatureConfigs() map[string]*FeatureConfig {
	if x != nil {
		return x.FeatureConfigs
	}
	return nil
}

// Service discovery configuration
type ServiceDiscovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters           []string                  `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	AutoInjectNS       map[string]*NamespaceList `protobuf:"bytes,2,rep,name=autoInjectNS,proto3" json:"autoInjectNS,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisabledInjectPods map[string]*NamespacePods `protobuf:"bytes,3,rep,name=disabledInjectPods,proto3" json:"disabledInjectPods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServiceDiscovery) Reset() {
	*x = ServiceDiscovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDiscovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDiscovery) ProtoMessage() {}

func (x *ServiceDiscovery) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDiscovery.ProtoReflect.Descriptor instead.
func (*ServiceDiscovery) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{22}
}

func (x *ServiceDiscovery) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ServiceDiscovery) GetAutoInjectNS() map[string]*NamespaceList {
	if x != nil {
		return x.AutoInjectNS
	}
	return nil
}

func (x *ServiceDiscovery) GetDisabledInjectPods() map[string]*NamespacePods {
	if x != nil {
		return x.DisabledInjectPods
	}
	return nil
}

// Namespace list message
type NamespaceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (x *NamespaceList) Reset() {
	*x = NamespaceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceList) ProtoMessage() {}

func (x *NamespaceList) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceList.ProtoReflect.Descriptor instead.
func (*NamespaceList) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{23}
}

func (x *NamespaceList) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

// Namespace pods message
type NamespacePods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespacePods map[string]*PodList `protobuf:"bytes,1,rep,name=namespacePods,proto3" json:"namespacePods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NamespacePods) Reset() {
	*x = NamespacePods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespacePods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacePods) ProtoMessage() {}

func (x *NamespacePods) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacePods.ProtoReflect.Descriptor instead.
func (*NamespacePods) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{24}
}

func (x *NamespacePods) GetNamespacePods() map[string]*PodList {
	if x != nil {
		return x.NamespacePods
	}
	return nil
}

// Pod list message
type PodList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pods []string `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (x *PodList) Reset() {
	*x = PodList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bcs_mesh_manager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodList) ProtoMessage() {}

func (x *PodList) ProtoReflect() protoreflect.Message {
	mi := &file_bcs_mesh_manager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodList.ProtoReflect.Descriptor instead.
func (*PodList) Descriptor() ([]byte, []int) {
	return file_bcs_mesh_manager_proto_rawDescGZIP(), []int{25}
}

func (x *PodList) GetPods() []string {
	if x != nil {
		return x.Pods
	}
	return nil
}

var File_bcs_mesh_manager_proto protoreflect.FileDescriptor

var file_bcs_mesh_manager_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x63, 0x73, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x18, 0x92, 0x41, 0x15, 0x2a, 0x05, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x32, 0x0c,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x70, 0x65,
	0x72, 0x6d, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf3,
	0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8,
	0xaf, 0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x1d, 0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x68, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42,
	0x17, 0x92, 0x41, 0x14, 0x2a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x0c, 0xe5, 0x93, 0x8d, 0xe5,
	0xba, 0x94, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x74,
	0x92, 0x41, 0x71, 0x0a, 0x6f, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x1d, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88, 0xe6,
	0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2,
	0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65,
	0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf6, 0x01, 0x0a, 0x17, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x66, 0x0a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x25, 0x92, 0x41, 0x22, 0x2a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x11, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe7, 0x89, 0x88,
	0xe6, 0x9c, 0xac, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x2f, 0x92, 0x41,
	0x2c, 0x2a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x32, 0x1a, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x28,
	0xe6, 0xb3, 0xa8, 0xe6, 0x84, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0x29, 0x52, 0x0e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x0c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x20, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b,
	0x2a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5,
	0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0xbc, 0x02, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x3a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x62, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe5, 0x93,
	0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xce, 0x09, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x5d, 0x0a,
	0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x24, 0x92, 0x41,
	0x21, 0x0a, 0x1f, 0x2a, 0x0c, 0x4d, 0x65, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x32, 0x0f, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe9,
	0xa1, 0xb9, 0x22, 0xf9, 0x06, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x1a, 0x5d, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6,
	0x96, 0xb0, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x84,
	0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x44, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc,
	0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65,
	0x73, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x3a, 0x2c, 0x92, 0x41, 0x29,
	0x0a, 0x27, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbd, 0x91,
	0xe6, 0xa0, 0xbc, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0x22, 0x84, 0x02, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x12, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe7, 0xbd, 0x91, 0xe6, 0xa0, 0xbc, 0xe5, 0x93, 0x8d, 0xe5, 0xba,
	0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64, 0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01,
	0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xce, 0x08, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x02,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01,
	0x04, 0x18, 0x01, 0x18, 0x02, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x18, 0x01,
	0x18, 0x02, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x1a, 0x5d, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x11,
	0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0x69, 0x73, 0x74, 0x69, 0x6f, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1,
	0x82, 0x22, 0x85, 0x03, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x32, 0x0f, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf,
	0xaf, 0xe7, 0xa0, 0x81, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d,
	0x2a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x2a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x32, 0x09, 0xe8, 0xaf, 0xb7, 0xe6,
	0xb1, 0x82, 0x20, 0x49, 0x44, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x68, 0x0a, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x2a, 0x0f, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x0c, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a,
	0x58, 0x2a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x11, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0x69,
	0x73, 0x74, 0x69, 0x6f, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xd2, 0x01, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0xd2, 0x01, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0xd2, 0x01, 0x0f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x3c, 0x0a, 0x12, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0,
	0x02, 0x0a, 0x10, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x4d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4f, 0x0a, 0x12, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x12, 0x64,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x5f, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x09, 0x0a, 0x04,
	0x4d, 0x65, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x49, 0x0a, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x10, 0x68, 0x69,
	0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x73, 0x68, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x5d, 0x0a, 0x13, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7, 0x03, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x53, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x53, 0x12, 0x65, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x6f, 0x64, 0x73, 0x1a, 0x5b, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x61, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x2b, 0x92, 0x41, 0x28, 0x0a, 0x26, 0x2a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x32, 0x12, 0xe6, 0x9c,
	0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x8f, 0x91, 0xe7, 0x8e, 0xb0, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae,
	0x22, 0x2f, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x6f, 0x64, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x1a, 0x56, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x1d, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x2a,
	0x90, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x2a, 0x79, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x6c, 0x0a,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4a, 0x53, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x4f,
	0x47, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x02, 0x32, 0xbd, 0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x7f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73,
	0x74, 0x69, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74,
	0x69, 0x6f, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x1a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x7b, 0x6d, 0x65, 0x73,
	0x68, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x68, 0x49, 0x44,
	0x7d, 0x42, 0x59, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x6d, 0x65, 0x73, 0x68, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x92, 0x41, 0x46, 0x12, 0x1d, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x68, 0x20, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x44, 0x6f, 0x63, 0x32, 0x05,
	0x30, 0x2e, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bcs_mesh_manager_proto_rawDescOnce sync.Once
	file_bcs_mesh_manager_proto_rawDescData = file_bcs_mesh_manager_proto_rawDesc
)

func file_bcs_mesh_manager_proto_rawDescGZIP() []byte {
	file_bcs_mesh_manager_proto_rawDescOnce.Do(func() {
		file_bcs_mesh_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcs_mesh_manager_proto_rawDescData)
	})
	return file_bcs_mesh_manager_proto_rawDescData
}

var file_bcs_mesh_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bcs_mesh_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_bcs_mesh_manager_proto_goTypes = []interface{}{
	(MeshStatus)(0),                  // 0: meshmanager.MeshStatus
	(ControlPlaneMode)(0),            // 1: meshmanager.ControlPlaneMode
	(ClusterMode)(0),                 // 2: meshmanager.ClusterMode
	(AccessLogEncoding)(0),           // 3: meshmanager.AccessLogEncoding
	(*WebAnnotations)(nil),           // 4: meshmanager.WebAnnotations
	(*ListIstioVersionRequest)(nil),  // 5: meshmanager.ListIstioVersionRequest
	(*ListIstioVersionResponse)(nil), // 6: meshmanager.ListIstioVersionResponse
	(*IstioVersionAndFeatures)(nil),  // 7: meshmanager.IstioVersionAndFeatures
	(*IstioVersion)(nil),             // 8: meshmanager.IstioVersion
	(*FeatureConfig)(nil),            // 9: meshmanager.FeatureConfig
	(*ListMeshRequest)(nil),          // 10: meshmanager.ListMeshRequest
	(*ListMeshResponse)(nil),         // 11: meshmanager.ListMeshResponse
	(*ListMeshData)(nil),             // 12: meshmanager.ListMeshData
	(*MeshListItem)(nil),             // 13: meshmanager.MeshListItem
	(*UpdateMeshRequest)(nil),        // 14: meshmanager.UpdateMeshRequest
	(*UpdateMeshResponse)(nil),       // 15: meshmanager.UpdateMeshResponse
	(*DeleteMeshRequest)(nil),        // 16: meshmanager.DeleteMeshRequest
	(*DeleteMeshResponse)(nil),       // 17: meshmanager.DeleteMeshResponse
	(*InstallIstioRequest)(nil),      // 18: meshmanager.InstallIstioRequest
	(*InstallIstioResponse)(nil),     // 19: meshmanager.InstallIstioResponse
	(*ResourceConfig)(nil),           // 20: meshmanager.ResourceConfig
	(*DedicatedNodeLabel)(nil),       // 21: meshmanager.DedicatedNodeLabel
	(*HighAvailability)(nil),         // 22: meshmanager.HighAvailability
	(*LogCollectorConfig)(nil),       // 23: meshmanager.LogCollectorConfig
	(*TracingConfig)(nil),            // 24: meshmanager.TracingConfig
	(*Mesh)(nil),                     // 25: meshmanager.Mesh
	(*ServiceDiscovery)(nil),         // 26: meshmanager.ServiceDiscovery
	(*NamespaceList)(nil),            // 27: meshmanager.NamespaceList
	(*NamespacePods)(nil),            // 28: meshmanager.NamespacePods
	(*PodList)(nil),                  // 29: meshmanager.PodList
	nil,                              // 30: meshmanager.MeshListItem.FeatureConfigsEntry
	nil,                              // 31: meshmanager.UpdateMeshRequest.FeatureConfigsEntry
	nil,                              // 32: meshmanager.InstallIstioRequest.FeatureConfigsEntry
	nil,                              // 33: meshmanager.Mesh.FeatureConfigsEntry
	nil,                              // 34: meshmanager.ServiceDiscovery.AutoInjectNSEntry
	nil,                              // 35: meshmanager.ServiceDiscovery.DisabledInjectPodsEntry
	nil,                              // 36: meshmanager.NamespacePods.NamespacePodsEntry
	(*_struct.Struct)(nil),           // 37: google.protobuf.Struct
}
var file_bcs_mesh_manager_proto_depIdxs = []int32{
	37, // 0: meshmanager.WebAnnotations.perms:type_name -> google.protobuf.Struct
	4,  // 1: meshmanager.ListIstioVersionResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	7,  // 2: meshmanager.ListIstioVersionResponse.data:type_name -> meshmanager.IstioVersionAndFeatures
	8,  // 3: meshmanager.IstioVersionAndFeatures.istioVersions:type_name -> meshmanager.IstioVersion
	9,  // 4: meshmanager.IstioVersionAndFeatures.featureConfigs:type_name -> meshmanager.FeatureConfig
	4,  // 5: meshmanager.ListMeshResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	12, // 6: meshmanager.ListMeshResponse.data:type_name -> meshmanager.ListMeshData
	13, // 7: meshmanager.ListMeshData.items:type_name -> meshmanager.MeshListItem
	0,  // 8: meshmanager.MeshListItem.status:type_name -> meshmanager.MeshStatus
	1,  // 9: meshmanager.MeshListItem.controlPlaneMode:type_name -> meshmanager.ControlPlaneMode
	2,  // 10: meshmanager.MeshListItem.clusterMode:type_name -> meshmanager.ClusterMode
	26, // 11: meshmanager.MeshListItem.serviceDiscovery:type_name -> meshmanager.ServiceDiscovery
	20, // 12: meshmanager.MeshListItem.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	22, // 13: meshmanager.MeshListItem.highAvailability:type_name -> meshmanager.HighAvailability
	23, // 14: meshmanager.MeshListItem.logCollectorConfig:type_name -> meshmanager.LogCollectorConfig
	24, // 15: meshmanager.MeshListItem.tracingConfig:type_name -> meshmanager.TracingConfig
	30, // 16: meshmanager.MeshListItem.featureConfigs:type_name -> meshmanager.MeshListItem.FeatureConfigsEntry
	26, // 17: meshmanager.UpdateMeshRequest.serviceDiscovery:type_name -> meshmanager.ServiceDiscovery
	20, // 18: meshmanager.UpdateMeshRequest.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	22, // 19: meshmanager.UpdateMeshRequest.highAvailability:type_name -> meshmanager.HighAvailability
	23, // 20: meshmanager.UpdateMeshRequest.logCollectorConfig:type_name -> meshmanager.LogCollectorConfig
	24, // 21: meshmanager.UpdateMeshRequest.tracingConfig:type_name -> meshmanager.TracingConfig
	31, // 22: meshmanager.UpdateMeshRequest.featureConfigs:type_name -> meshmanager.UpdateMeshRequest.FeatureConfigsEntry
	4,  // 23: meshmanager.UpdateMeshResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	4,  // 24: meshmanager.DeleteMeshResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	1,  // 25: meshmanager.InstallIstioRequest.controlPlaneMode:type_name -> meshmanager.ControlPlaneMode
	2,  // 26: meshmanager.InstallIstioRequest.clusterMode:type_name -> meshmanager.ClusterMode
	20, // 27: meshmanager.InstallIstioRequest.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	22, // 28: meshmanager.InstallIstioRequest.highAvailability:type_name -> meshmanager.HighAvailability
	23, // 29: meshmanager.InstallIstioRequest.logCollectorConfig:type_name -> meshmanager.LogCollectorConfig
	24, // 30: meshmanager.InstallIstioRequest.tracingConfig:type_name -> meshmanager.TracingConfig
	32, // 31: meshmanager.InstallIstioRequest.featureConfigs:type_name -> meshmanager.InstallIstioRequest.FeatureConfigsEntry
	4,  // 32: meshmanager.InstallIstioResponse.web_annotations:type_name -> meshmanager.WebAnnotations
	20, // 33: meshmanager.HighAvailability.resourceConfig:type_name -> meshmanager.ResourceConfig
	21, // 34: meshmanager.HighAvailability.dedicatedNodeLabel:type_name -> meshmanager.DedicatedNodeLabel
	3,  // 35: meshmanager.LogCollectorConfig.accessLogEncoding:type_name -> meshmanager.AccessLogEncoding
	0,  // 36: meshmanager.Mesh.status:type_name -> meshmanager.MeshStatus
	1,  // 37: meshmanager.Mesh.controlPlaneMode:type_name -> meshmanager.ControlPlaneMode
	2,  // 38: meshmanager.Mesh.clusterMode:type_name -> meshmanager.ClusterMode
	26, // 39: meshmanager.Mesh.serviceDiscovery:type_name -> meshmanager.ServiceDiscovery
	20, // 40: meshmanager.Mesh.sidecarResourceConfig:type_name -> meshmanager.ResourceConfig
	22, // 41: meshmanager.Mesh.highAvailability:type_name -> meshmanager.HighAvailability
	23, // 42: meshmanager.Mesh.logCollectorConfig:type_name -> meshmanager.LogCollectorConfig
	24, // 43: meshmanager.Mesh.tracingConfig:type_name -> meshmanager.TracingConfig
	33, // 44: meshmanager.Mesh.featureConfigs:type_name -> meshmanager.Mesh.FeatureConfigsEntry
	34, // 45: meshmanager.ServiceDiscovery.autoInjectNS:type_name -> meshmanager.ServiceDiscovery.AutoInjectNSEntry
	35, // 46: meshmanager.ServiceDiscovery.disabledInjectPods:type_name -> meshmanager.ServiceDiscovery.DisabledInjectPodsEntry
	36, // 47: meshmanager.NamespacePods.namespacePods:type_name -> meshmanager.NamespacePods.NamespacePodsEntry
	9,  // 48: meshmanager.MeshListItem.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	9,  // 49: meshmanager.UpdateMeshRequest.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	9,  // 50: meshmanager.InstallIstioRequest.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	9,  // 51: meshmanager.Mesh.FeatureConfigsEntry.value:type_name -> meshmanager.FeatureConfig
	27, // 52: meshmanager.ServiceDiscovery.AutoInjectNSEntry.value:type_name -> meshmanager.NamespaceList
	28, // 53: meshmanager.ServiceDiscovery.DisabledInjectPodsEntry.value:type_name -> meshmanager.NamespacePods
	29, // 54: meshmanager.NamespacePods.NamespacePodsEntry.value:type_name -> meshmanager.PodList
	5,  // 55: meshmanager.MeshManager.ListIstioVersion:input_type -> meshmanager.ListIstioVersionRequest
	18, // 56: meshmanager.MeshManager.InstallIstio:input_type -> meshmanager.InstallIstioRequest
	10, // 57: meshmanager.MeshManager.ListMesh:input_type -> meshmanager.ListMeshRequest
	14, // 58: meshmanager.MeshManager.UpdateMesh:input_type -> meshmanager.UpdateMeshRequest
	16, // 59: meshmanager.MeshManager.DeleteMesh:input_type -> meshmanager.DeleteMeshRequest
	6,  // 60: meshmanager.MeshManager.ListIstioVersion:output_type -> meshmanager.ListIstioVersionResponse
	19, // 61: meshmanager.MeshManager.InstallIstio:output_type -> meshmanager.InstallIstioResponse
	11, // 62: meshmanager.MeshManager.ListMesh:output_type -> meshmanager.ListMeshResponse
	15, // 63: meshmanager.MeshManager.UpdateMesh:output_type -> meshmanager.UpdateMeshResponse
	17, // 64: meshmanager.MeshManager.DeleteMesh:output_type -> meshmanager.DeleteMeshResponse
	60, // [60:65] is the sub-list for method output_type
	55, // [55:60] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_bcs_mesh_manager_proto_init() }
func file_bcs_mesh_manager_proto_init() {
	if File_bcs_mesh_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bcs_mesh_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIstioVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioVersionAndFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IstioVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMeshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMeshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMeshData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMeshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMeshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallIstioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallIstioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DedicatedNodeLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogCollectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mesh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDiscovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespacePods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bcs_mesh_manager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcs_mesh_manager_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bcs_mesh_manager_proto_goTypes,
		DependencyIndexes: file_bcs_mesh_manager_proto_depIdxs,
		EnumInfos:         file_bcs_mesh_manager_proto_enumTypes,
		MessageInfos:      file_bcs_mesh_manager_proto_msgTypes,
	}.Build()
	File_bcs_mesh_manager_proto = out.File
	file_bcs_mesh_manager_proto_rawDesc = nil
	file_bcs_mesh_manager_proto_goTypes = nil
	file_bcs_mesh_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MeshManagerClient is the client API for MeshManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshManagerClient interface {
	// 获取当前开放的istio版本
	ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...grpc.CallOption) (*ListIstioVersionResponse, error)
	// 安装istio
	InstallIstio(ctx context.Context, in *InstallIstioRequest, opts ...grpc.CallOption) (*InstallIstioResponse, error)
	// 获取网格列表
	ListMesh(ctx context.Context, in *ListMeshRequest, opts ...grpc.CallOption) (*ListMeshResponse, error)
	// 更新网格配置
	UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...grpc.CallOption) (*UpdateMeshResponse, error)
	// 删除网格
	DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...grpc.CallOption) (*DeleteMeshResponse, error)
}

type meshManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshManagerClient(cc grpc.ClientConnInterface) MeshManagerClient {
	return &meshManagerClient{cc}
}

func (c *meshManagerClient) ListIstioVersion(ctx context.Context, in *ListIstioVersionRequest, opts ...grpc.CallOption) (*ListIstioVersionResponse, error) {
	out := new(ListIstioVersionResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/ListIstioVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) InstallIstio(ctx context.Context, in *InstallIstioRequest, opts ...grpc.CallOption) (*InstallIstioResponse, error) {
	out := new(InstallIstioResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/InstallIstio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) ListMesh(ctx context.Context, in *ListMeshRequest, opts ...grpc.CallOption) (*ListMeshResponse, error) {
	out := new(ListMeshResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/ListMesh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...grpc.CallOption) (*UpdateMeshResponse, error) {
	out := new(UpdateMeshResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/UpdateMesh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerClient) DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...grpc.CallOption) (*DeleteMeshResponse, error) {
	out := new(DeleteMeshResponse)
	err := c.cc.Invoke(ctx, "/meshmanager.MeshManager/DeleteMesh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshManagerServer is the server API for MeshManager service.
type MeshManagerServer interface {
	// 获取当前开放的istio版本
	ListIstioVersion(context.Context, *ListIstioVersionRequest) (*ListIstioVersionResponse, error)
	// 安装istio
	InstallIstio(context.Context, *InstallIstioRequest) (*InstallIstioResponse, error)
	// 获取网格列表
	ListMesh(context.Context, *ListMeshRequest) (*ListMeshResponse, error)
	// 更新网格配置
	UpdateMesh(context.Context, *UpdateMeshRequest) (*UpdateMeshResponse, error)
	// 删除网格
	DeleteMesh(context.Context, *DeleteMeshRequest) (*DeleteMeshResponse, error)
}

// UnimplementedMeshManagerServer can be embedded to have forward compatible implementations.
type UnimplementedMeshManagerServer struct {
}

func (*UnimplementedMeshManagerServer) ListIstioVersion(context.Context, *ListIstioVersionRequest) (*ListIstioVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIstioVersion not implemented")
}
func (*UnimplementedMeshManagerServer) InstallIstio(context.Context, *InstallIstioRequest) (*InstallIstioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallIstio not implemented")
}
func (*UnimplementedMeshManagerServer) ListMesh(context.Context, *ListMeshRequest) (*ListMeshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMesh not implemented")
}
func (*UnimplementedMeshManagerServer) UpdateMesh(context.Context, *UpdateMeshRequest) (*UpdateMeshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMesh not implemented")
}
func (*UnimplementedMeshManagerServer) DeleteMesh(context.Context, *DeleteMeshRequest) (*DeleteMeshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMesh not implemented")
}

func RegisterMeshManagerServer(s *grpc.Server, srv MeshManagerServer) {
	s.RegisterService(&_MeshManager_serviceDesc, srv)
}

func _MeshManager_ListIstioVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIstioVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).ListIstioVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/ListIstioVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).ListIstioVersion(ctx, req.(*ListIstioVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_InstallIstio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallIstioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).InstallIstio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/InstallIstio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).InstallIstio(ctx, req.(*InstallIstioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_ListMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).ListMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/ListMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).ListMesh(ctx, req.(*ListMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_UpdateMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).UpdateMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/UpdateMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).UpdateMesh(ctx, req.(*UpdateMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshManager_DeleteMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshManagerServer).DeleteMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshmanager.MeshManager/DeleteMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshManagerServer).DeleteMesh(ctx, req.(*DeleteMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meshmanager.MeshManager",
	HandlerType: (*MeshManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIstioVersion",
			Handler:    _MeshManager_ListIstioVersion_Handler,
		},
		{
			MethodName: "InstallIstio",
			Handler:    _MeshManager_InstallIstio_Handler,
		},
		{
			MethodName: "ListMesh",
			Handler:    _MeshManager_ListMesh_Handler,
		},
		{
			MethodName: "UpdateMesh",
			Handler:    _MeshManager_UpdateMesh_Handler,
		},
		{
			MethodName: "DeleteMesh",
			Handler:    _MeshManager_DeleteMesh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcs-mesh-manager.proto",
}
