apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bcs-federation-manager.fullname" . }}
  labels:
    {{- include "bcs-federation-manager.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "bcs-federation-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "bcs-federation-manager.selectorLabels" . | nindent 8 }}
    spec:
      {{- if or .Values.hostAliases .Values.global.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" append .Values.hostAliases .Values.global.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- include "common.images.pullSecrets" ( dict "images" (list .Values) "global" .Values.global) | nindent 6  }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.global.pullPolicy | default .Values.image.pullPolicy }}
          command: [ "/data/bcs/bcs-federation-manager/container-start.sh" ]
          args:
            - -c
            - /data/bcs/bcs-federation-manager/bcs-federation-manager.json
          env:
            - name: BCS_CONFIG_TYPE
              value: "{{ .Values.global.env.BK_BCS_CONFIG_TYPE | default .Values.env.BK_BCS_CONFIG_TYPE}}"
            - name: bcsFederationManagerPort
              value: "{{ .Values.env.BK_BCS_bcsFederationManagerPort }}"
            - name: bcsFederationManagerHTTPPort
              value: "{{ .Values.env.BK_BCS_bcsFederationManagerHTTPPort }}"
            - name: bcsFederationManagerMetricPort
              value: "{{ .Values.env.BK_BCS_bcsFederationManagerMetricPort }}"
            - name: localIp
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: caFile
              value: "/data/bcs/cert/bcs/bcs-ca.crt"
            - name: serverCertFile
              value: "/data/bcs/cert/bcs/bcs-server.crt"
            - name: serverKeyFile
              value: "/data/bcs/cert/bcs/bcs-server.key"
            - name: clientCertFile
              value: "/data/bcs/cert/bcs/bcs-client.crt"
            - name: clientKeyFile
              value: "/data/bcs/cert/bcs/bcs-client.key"
            # log options
            - name: log_dir
              value: "/data/bcs/logs/bcs"
            - name: bcsFederationManagerAlsoToStdErr
              value: "{{ .Values.global.env.BK_BCS_also_log_to_stderr }}"
            - name: bcsFederationManagerVerbosity
              value: "{{ .Values.global.env.BK_BCS_log_level }}"
            # etcd options
            - name: bcsEtcdHost
              value: "{{ include "bcs-common.etcd.host" ( dict "localStorage" .Values.storage "globalStorage" .Values.global.storage "namespace" .Release.Namespace ) }}"
            - name: bcsEtcdCAFile
              value: "/data/bcs/cert/etcd/etcd-ca.pem"
            - name: bcsEtcdCertFile
              value: "/data/bcs/cert/etcd/etcd.pem"
            - name: bcsEtcdKeyFile
              value: "/data/bcs/cert/etcd/etcd-key.pem"
            # swagger options
            - name: bcsFederationManagerSwaggerDir
              value: "/data/bcs/swagger"
            # mongo options
            - name: bcsFederationManagerMongo
              value: "{{ include "bcs-common.mongodb.host" ( dict "localStorage" .Values.storage "globalStorage" .Values.global.storage "namespace" .Release.Namespace ) }}"
            - name: bcsFederationManagerMongoDB
              value: "{{ .Values.env.BK_BCS_bcsFederationManagerMongoDatabase }}"
            - name: bcsFederationManagerMongoUser
              value: "{{ .Values.global.storage.mongodb.username | default .Values.storage.mongodb.username }}"
            {{ include "bcs-common.bcspwd.mongodb" ( dict "root" . "envName" "bcsFederationManagerMongoPassword" ) | indent 12 }}
            - name: bcsFederationManagerDebug
              value: "{{ .Values.env.BK_BCS_bcsFederationManagerDebug }}"
            - name: bcsGatewayEndpoint
              value: "{{ .Values.env.BK_BCS_bcsApiGwUrl}}"
            - name: bcsGatewayToken
              value: "{{ .Values.env.BK_BCS_adminToken}}"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: bcs-certs
              mountPath: /data/bcs/cert/bcs
            - name: etcd-certs
              mountPath: /data/bcs/cert/etcd
      initContainers:
        - name: init-etcd
          image: {{ include "common.images.image" ( dict "imageRoot" .Values.global.busybox "global" .Values.global) }}
          command: ['sh', '-c', 'until [ {{ include "bcs-common.utils.telnet" ( dict "listStr" ( include "bcs-common.etcd.host" ( dict "localStorage" .Values.storage "globalStorage" .Values.global.storage "namespace" .Release.Namespace ) ) "seperator" "," "condOp" "-o" ) }} ]; do echo waiting for readiness of etcd; sleep 2; done']
      volumes:
        {{- include "bcs-common.volumes.bcsServices" . | indent 8 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
